
sx1276_spi_F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f174  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800f288  0800f288  0001f288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8f0  0800f8f0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f8f0  0800f8f0  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f8f0  0800f8f0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8f0  0800f8f0  0001f8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8f4  0800f8f4  0001f8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f8f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003dac  200001f0  0800fae8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f9c  0800fae8  00023f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018291  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f5  00000000  00000000  000384ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001175  00000000  00000000  0003dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bcd5  00000000  00000000  0003ede5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b28e  00000000  00000000  0005aaba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098e20  00000000  00000000  00075d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007474  00000000  00000000  0010eb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00115fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f26c 	.word	0x0800f26c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800f26c 	.word	0x0800f26c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4605      	mov	r5, r0
 8001074:	460c      	mov	r4, r1
 8001076:	2200      	movs	r2, #0
 8001078:	2300      	movs	r3, #0
 800107a:	4628      	mov	r0, r5
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <delay>:
extern TIM_HandleTypeDef htim4;

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM, RH, TEMP;

void delay(uint16_t time){
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <delay+0x2c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim4)) < time);
 80010f2:	bf00      	nop
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <delay+0x2c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3f9      	bcc.n	80010f4 <delay+0x14>
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	20000588 	.word	0x20000588

08001110 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2302      	movs	r3, #2
 8001134:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4619      	mov	r1, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f003 f8ff 	bl	8004340 <HAL_GPIO_Init>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f003 f8e2 	bl	8004340 <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <DHT22_Start>:

//----------------------------------------------------------------
void DHT22_Start(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN);
 8001188:	2101      	movs	r1, #1
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <DHT22_Start+0x3c>)
 800118c:	f7ff ffc0 	bl	8001110 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2101      	movs	r1, #1
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <DHT22_Start+0x3c>)
 8001196:	f003 fa6e 	bl	8004676 <HAL_GPIO_WritePin>
	delay(1200); // wait for > 1ms
 800119a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800119e:	f7ff ff9f 	bl	80010e0 <delay>

	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2101      	movs	r1, #1
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <DHT22_Start+0x3c>)
 80011a8:	f003 fa65 	bl	8004676 <HAL_GPIO_WritePin>
	delay(20);
 80011ac:	2014      	movs	r0, #20
 80011ae:	f7ff ff97 	bl	80010e0 <delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);
 80011b2:	2101      	movs	r1, #1
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <DHT22_Start+0x3c>)
 80011b6:	f7ff ffc8 	bl	800114a <Set_Pin_Input>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40010800 	.word	0x40010800

080011c4 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	71fb      	strb	r3, [r7, #7]
	delay(40);
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f7ff ff86 	bl	80010e0 <delay>
	if(!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))){ // if the pin is low
 80011d4:	2101      	movs	r1, #1
 80011d6:	4811      	ldr	r0, [pc, #68]	; (800121c <DHT22_Check_Response+0x58>)
 80011d8:	f003 fa36 	bl	8004648 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10e      	bne.n	8001200 <DHT22_Check_Response+0x3c>
		delay(80);
 80011e2:	2050      	movs	r0, #80	; 0x50
 80011e4:	f7ff ff7c 	bl	80010e0 <delay>

		if((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) Response = 1;
 80011e8:	2101      	movs	r1, #1
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <DHT22_Check_Response+0x58>)
 80011ec:	f003 fa2c 	bl	8004648 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <DHT22_Check_Response+0x38>
 80011f6:	2301      	movs	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e001      	b.n	8001200 <DHT22_Check_Response+0x3c>
		else Response = -1;
 80011fc:	23ff      	movs	r3, #255	; 0xff
 80011fe:	71fb      	strb	r3, [r7, #7]
	}

	while((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))); // wait for the pin to go low
 8001200:	bf00      	nop
 8001202:	2101      	movs	r1, #1
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <DHT22_Check_Response+0x58>)
 8001206:	f003 fa1f 	bl	8004648 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f8      	bne.n	8001202 <DHT22_Check_Response+0x3e>
	return Response;
 8001210:	79fb      	ldrb	r3, [r7, #7]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40010800 	.word	0x40010800

08001220 <DHT22_Read>:

uint8_t DHT22_Read(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++){
 8001226:	2300      	movs	r3, #0
 8001228:	71bb      	strb	r3, [r7, #6]
 800122a:	e037      	b.n	800129c <DHT22_Read+0x7c>
		while(!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))); // wait for the pin to go high
 800122c:	bf00      	nop
 800122e:	2101      	movs	r1, #1
 8001230:	481e      	ldr	r0, [pc, #120]	; (80012ac <DHT22_Read+0x8c>)
 8001232:	f003 fa09 	bl	8004648 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f8      	beq.n	800122e <DHT22_Read+0xe>
		delay(40);
 800123c:	2028      	movs	r0, #40	; 0x28
 800123e:	f7ff ff4f 	bl	80010e0 <delay>

		if(!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))){ // if the pin is low
 8001242:	2101      	movs	r1, #1
 8001244:	4819      	ldr	r0, [pc, #100]	; (80012ac <DHT22_Read+0x8c>)
 8001246:	f003 f9ff 	bl	8004648 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10e      	bne.n	800126e <DHT22_Read+0x4e>
			i &= ~(1<<(7-j)); // write 0
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2201      	movs	r2, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	b25b      	sxtb	r3, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	b25a      	sxtb	r2, r3
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4013      	ands	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	e00b      	b.n	8001286 <DHT22_Read+0x66>
		}
		else i |= (1<<(7-j)); // write 1
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	f1c3 0307 	rsb	r3, r3, #7
 8001274:	2201      	movs	r2, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	b25a      	sxtb	r2, r3
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4313      	orrs	r3, r2
 8001282:	b25b      	sxtb	r3, r3
 8001284:	71fb      	strb	r3, [r7, #7]
		while((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))); // wait for the pin to go low
 8001286:	bf00      	nop
 8001288:	2101      	movs	r1, #1
 800128a:	4808      	ldr	r0, [pc, #32]	; (80012ac <DHT22_Read+0x8c>)
 800128c:	f003 f9dc 	bl	8004648 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f8      	bne.n	8001288 <DHT22_Read+0x68>
	for(j = 0; j < 8; j++){
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	3301      	adds	r3, #1
 800129a:	71bb      	strb	r3, [r7, #6]
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	2b07      	cmp	r3, #7
 80012a0:	d9c4      	bls.n	800122c <DHT22_Read+0xc>
	}

	return i;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40010800 	.word	0x40010800

080012b0 <DHT22_Get_Data>:

uint8_t DHT22_Get_Data(float* Temperature, float* Humidity){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	DHT22_Start();
 80012ba:	f7ff ff63 	bl	8001184 <DHT22_Start>
	if(DHT22_Check_Response()){
 80012be:	f7ff ff81 	bl	80011c4 <DHT22_Check_Response>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d05d      	beq.n	8001384 <DHT22_Get_Data+0xd4>
		Rh_byte1 = DHT22_Read();
 80012c8:	f7ff ffaa 	bl	8001220 <DHT22_Read>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <DHT22_Get_Data+0xe0>)
 80012d2:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT22_Read();
 80012d4:	f7ff ffa4 	bl	8001220 <DHT22_Read>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <DHT22_Get_Data+0xe4>)
 80012de:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT22_Read();
 80012e0:	f7ff ff9e 	bl	8001220 <DHT22_Read>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <DHT22_Get_Data+0xe8>)
 80012ea:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT22_Read();
 80012ec:	f7ff ff98 	bl	8001220 <DHT22_Read>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <DHT22_Get_Data+0xec>)
 80012f6:	701a      	strb	r2, [r3, #0]
		SUM = DHT22_Read();
 80012f8:	f7ff ff92 	bl	8001220 <DHT22_Read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <DHT22_Get_Data+0xf0>)
 8001302:	801a      	strh	r2, [r3, #0]
		///if(SUM == (Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2)){
			TEMP = ((Temp_byte1 << 8)|Temp_byte2);
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <DHT22_Get_Data+0xe8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <DHT22_Get_Data+0xec>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b21b      	sxth	r3, r3
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <DHT22_Get_Data+0xf4>)
 800131a:	801a      	strh	r2, [r3, #0]
			RH = ((Rh_byte1 << 8)|Rh_byte2);
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <DHT22_Get_Data+0xe0>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <DHT22_Get_Data+0xe4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <DHT22_Get_Data+0xf8>)
 8001332:	801a      	strh	r2, [r3, #0]
		//}
		//else return -1;
	}
	else return -1;

	*Humidity = (float)(RH/10.0);
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <DHT22_Get_Data+0xf8>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f863 	bl	8000404 <__aeabi_i2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <DHT22_Get_Data+0xfc>)
 8001344:	f7ff f9f2 	bl	800072c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fbba 	bl	8000ac8 <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	601a      	str	r2, [r3, #0]
	*Temperature = (float)(TEMP/10.0);
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <DHT22_Get_Data+0xf4>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f850 	bl	8000404 <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <DHT22_Get_Data+0xfc>)
 800136a:	f7ff f9df 	bl	800072c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fba7 	bl	8000ac8 <__aeabi_d2f>
 800137a:	4602      	mov	r2, r0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	601a      	str	r2, [r3, #0]

	return 1;
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <DHT22_Get_Data+0xd6>
	else return -1;
 8001384:	23ff      	movs	r3, #255	; 0xff
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000020c 	.word	0x2000020c
 8001394:	2000020d 	.word	0x2000020d
 8001398:	2000020e 	.word	0x2000020e
 800139c:	2000020f 	.word	0x2000020f
 80013a0:	20000210 	.word	0x20000210
 80013a4:	20000214 	.word	0x20000214
 80013a8:	20000212 	.word	0x20000212
 80013ac:	40240000 	.word	0x40240000

080013b0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80013b0:	b4b0      	push	{r4, r5, r7}
 80013b2:	b08f      	sub	sp, #60	; 0x3c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80013b8:	f240 13b1 	movw	r3, #433	; 0x1b1
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80013be:	2307      	movs	r3, #7
 80013c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80013c4:	2307      	movs	r3, #7
 80013c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80013d0:	23ff      	movs	r3, #255	; 0xff
 80013d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80013dc:	2308      	movs	r3, #8
 80013de:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	461d      	mov	r5, r3
 80013e4:	f107 040c 	add.w	r4, r7, #12
 80013e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	373c      	adds	r7, #60	; 0x3c
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bcb0      	pop	{r4, r5, r7}
 8001400:	4770      	bx	lr

08001402 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800140c:	2101      	movs	r1, #1
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f9c5 	bl	800179e <LoRa_read>
 8001414:	4603      	mov	r3, r0
 8001416:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d107      	bne.n	8001432 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	f023 0307 	bic.w	r3, r3, #7
 8001428:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	61da      	str	r2, [r3, #28]
 8001430:	e03e      	b.n	80014b0 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10c      	bne.n	8001452 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800143c:	f023 0307 	bic.w	r3, r3, #7
 8001440:	b25b      	sxtb	r3, r3
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	b25b      	sxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	61da      	str	r2, [r3, #28]
 8001450:	e02e      	b.n	80014b0 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d10c      	bne.n	8001472 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800145c:	f023 0307 	bic.w	r3, r3, #7
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f043 0303 	orr.w	r3, r3, #3
 8001466:	b25b      	sxtb	r3, r3
 8001468:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	61da      	str	r2, [r3, #28]
 8001470:	e01e      	b.n	80014b0 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d10c      	bne.n	8001492 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800147c:	f023 0307 	bic.w	r3, r3, #7
 8001480:	b25b      	sxtb	r3, r3
 8001482:	f043 0305 	orr.w	r3, r3, #5
 8001486:	b25b      	sxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2205      	movs	r2, #5
 800148e:	61da      	str	r2, [r3, #28]
 8001490:	e00e      	b.n	80014b0 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b06      	cmp	r3, #6
 8001496:	d10b      	bne.n	80014b0 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800149c:	f023 0307 	bic.w	r3, r3, #7
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	f043 0306 	orr.w	r3, r3, #6
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2206      	movs	r2, #6
 80014ae:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	461a      	mov	r2, r3
 80014b4:	2101      	movs	r1, #1
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f98b 	bl	80017d2 <LoRa_write>
	//HAL_Delay(10);
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	889b      	ldrh	r3, [r3, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	f003 f8c9 	bl	8004676 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6998      	ldr	r0, [r3, #24]
 80014e8:	88fa      	ldrh	r2, [r7, #6]
 80014ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	f004 fcd6 	bl	8005ea0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80014f4:	bf00      	nop
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 f8db 	bl	80066b6 <HAL_SPI_GetState>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d1f7      	bne.n	80014f6 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6998      	ldr	r0, [r3, #24]
 800150a:	8b3a      	ldrh	r2, [r7, #24]
 800150c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	f004 fe08 	bl	8006126 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001516:	bf00      	nop
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4618      	mov	r0, r3
 800151e:	f005 f8ca 	bl	80066b6 <HAL_SPI_GetState>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d1f7      	bne.n	8001518 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	889b      	ldrh	r3, [r3, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	4619      	mov	r1, r3
 8001534:	f003 f89f 	bl	8004676 <HAL_GPIO_WritePin>
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	889b      	ldrh	r3, [r3, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	4619      	mov	r1, r3
 800155c:	f003 f88b 	bl	8004676 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6998      	ldr	r0, [r3, #24]
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	f004 fc98 	bl	8005ea0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001570:	bf00      	nop
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4618      	mov	r0, r3
 8001578:	f005 f89d 	bl	80066b6 <HAL_SPI_GetState>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d1f7      	bne.n	8001572 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6998      	ldr	r0, [r3, #24]
 8001586:	8b3a      	ldrh	r2, [r7, #24]
 8001588:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	f004 fc87 	bl	8005ea0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001592:	bf00      	nop
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4618      	mov	r0, r3
 800159a:	f005 f88c 	bl	80066b6 <HAL_SPI_GetState>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d1f7      	bne.n	8001594 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	889b      	ldrh	r3, [r3, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	f003 f861 	bl	8004676 <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0000      	movs	r0, r0
	...

080015c0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	// F = (freq * 524288)>>5;
	F = (uint32_t)(freq * 16.384);
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	f7fe ff1a 	bl	8000404 <__aeabi_i2d>
 80015d0:	a319      	add	r3, pc, #100	; (adr r3, 8001638 <LoRa_setFrequency+0x78>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7fe ff7f 	bl	80004d8 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fa51 	bl	8000a88 <__aeabi_d2uiz>
 80015e6:	4603      	mov	r3, r0
 80015e8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	461a      	mov	r2, r3
 80015f4:	2106      	movs	r1, #6
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f8eb 	bl	80017d2 <LoRa_write>
	HAL_Delay(5);
 80015fc:	2005      	movs	r0, #5
 80015fe:	f002 fce9 	bl	8003fd4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001608:	7afb      	ldrb	r3, [r7, #11]
 800160a:	461a      	mov	r2, r3
 800160c:	2107      	movs	r1, #7
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f8df 	bl	80017d2 <LoRa_write>
	HAL_Delay(5);
 8001614:	2005      	movs	r0, #5
 8001616:	f002 fcdd 	bl	8003fd4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800161e:	7afb      	ldrb	r3, [r7, #11]
 8001620:	461a      	mov	r2, r3
 8001622:	2108      	movs	r1, #8
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f8d4 	bl	80017d2 <LoRa_write>
	HAL_Delay(5);
 800162a:	2005      	movs	r0, #5
 800162c:	f002 fcd2 	bl	8003fd4 <HAL_Delay>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	d2f1a9fc 	.word	0xd2f1a9fc
 800163c:	4030624d 	.word	0x4030624d

08001640 <LoRa_setSyncWord>:

void LoRa_setSyncWord(LoRa* _LoRa, uint8_t value){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegSyncWord, value);
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	461a      	mov	r2, r3
 8001650:	2139      	movs	r1, #57	; 0x39
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f8bd 	bl	80017d2 <LoRa_write>
	HAL_Delay(10);
 8001658:	200a      	movs	r0, #10
 800165a:	f002 fcbb 	bl	8003fd4 <HAL_Delay>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b0c      	cmp	r3, #12
 8001674:	dd01      	ble.n	800167a <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001676:	230c      	movs	r3, #12
 8001678:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b06      	cmp	r3, #6
 800167e:	dc01      	bgt.n	8001684 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001680:	2307      	movs	r3, #7
 8001682:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001684:	211e      	movs	r1, #30
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f889 	bl	800179e <LoRa_read>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f002 fc9f 	bl	8003fd4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	b2da      	uxtb	r2, r3
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80016aa:	7bbb      	ldrb	r3, [r7, #14]
 80016ac:	461a      	mov	r2, r3
 80016ae:	211e      	movs	r1, #30
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f88e 	bl	80017d2 <LoRa_write>
	HAL_Delay(10);
 80016b6:	200a      	movs	r0, #10
 80016b8:	f002 fc8c 	bl	8003fd4 <HAL_Delay>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	461a      	mov	r2, r3
 80016d4:	2109      	movs	r1, #9
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f87b 	bl	80017d2 <LoRa_write>
	HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f002 fc79 	bl	8003fd4 <HAL_Delay>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	2b2c      	cmp	r3, #44	; 0x2c
 8001700:	d801      	bhi.n	8001706 <LoRa_setOCP+0x1a>
		current = 45;
 8001702:	232d      	movs	r3, #45	; 0x2d
 8001704:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	2bf0      	cmp	r3, #240	; 0xf0
 800170a:	d901      	bls.n	8001710 <LoRa_setOCP+0x24>
		current = 240;
 800170c:	23f0      	movs	r3, #240	; 0xf0
 800170e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2b78      	cmp	r3, #120	; 0x78
 8001714:	d809      	bhi.n	800172a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	3b2d      	subs	r3, #45	; 0x2d
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <LoRa_setOCP+0x78>)
 800171c:	fb82 1203 	smull	r1, r2, r2, r3
 8001720:	1052      	asrs	r2, r2, #1
 8001722:	17db      	asrs	r3, r3, #31
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e00b      	b.n	8001742 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	2bf0      	cmp	r3, #240	; 0xf0
 800172e:	d808      	bhi.n	8001742 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	331e      	adds	r3, #30
 8001734:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoRa_setOCP+0x78>)
 8001736:	fb82 1203 	smull	r1, r2, r2, r3
 800173a:	1092      	asrs	r2, r2, #2
 800173c:	17db      	asrs	r3, r3, #31
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	3320      	adds	r3, #32
 8001746:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	461a      	mov	r2, r3
 800174c:	210b      	movs	r1, #11
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f83f 	bl	80017d2 <LoRa_write>
	HAL_Delay(10);
 8001754:	200a      	movs	r0, #10
 8001756:	f002 fc3d 	bl	8003fd4 <HAL_Delay>
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	66666667 	.word	0x66666667

08001768 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001770:	211e      	movs	r1, #30
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f813 	bl	800179e <LoRa_read>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f043 0307 	orr.w	r3, r3, #7
 8001782:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001784:	7bbb      	ldrb	r3, [r7, #14]
 8001786:	461a      	mov	r2, r3
 8001788:	211e      	movs	r1, #30
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f821 	bl	80017d2 <LoRa_write>
	HAL_Delay(10);
 8001790:	200a      	movs	r0, #10
 8001792:	f002 fc1f 	bl	8003fd4 <HAL_Delay>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af02      	add	r7, sp, #8
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80017b4:	f107 030f 	add.w	r3, r7, #15
 80017b8:	f107 010e 	add.w	r1, r7, #14
 80017bc:	2201      	movs	r2, #1
 80017be:	9200      	str	r2, [sp, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fe7e 	bl	80014c4 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af02      	add	r7, sp, #8
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	70fb      	strb	r3, [r7, #3]
 80017de:	4613      	mov	r3, r2
 80017e0:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	73bb      	strb	r3, [r7, #14]
	data = value;
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80017f0:	f107 030f 	add.w	r3, r7, #15
 80017f4:	f107 010e 	add.w	r1, r7, #14
 80017f8:	2201      	movs	r2, #1
 80017fa:	9200      	str	r2, [sp, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe9e 	bl	8001540 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	461a      	mov	r2, r3
 8001818:	460b      	mov	r3, r1
 800181a:	72fb      	strb	r3, [r7, #11]
 800181c:	4613      	mov	r3, r2
 800181e:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001820:	7afb      	ldrb	r3, [r7, #11]
 8001822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001826:	b2db      	uxtb	r3, r3
 8001828:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	889b      	ldrh	r3, [r3, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	4619      	mov	r1, r3
 8001836:	f002 ff1e 	bl	8004676 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6998      	ldr	r0, [r3, #24]
 800183e:	f107 0117 	add.w	r1, r7, #23
 8001842:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001846:	2201      	movs	r2, #1
 8001848:	f004 fb2a 	bl	8005ea0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800184c:	bf00      	nop
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	4618      	mov	r0, r3
 8001854:	f004 ff2f 	bl	80066b6 <HAL_SPI_GetState>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d1f7      	bne.n	800184e <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6998      	ldr	r0, [r3, #24]
 8001862:	7abb      	ldrb	r3, [r7, #10]
 8001864:	b29a      	uxth	r2, r3
 8001866:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f004 fb18 	bl	8005ea0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001870:	bf00      	nop
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4618      	mov	r0, r3
 8001878:	f004 ff1d 	bl	80066b6 <HAL_SPI_GetState>
 800187c:	4603      	mov	r3, r0
 800187e:	2b01      	cmp	r3, #1
 8001880:	d1f7      	bne.n	8001872 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	4619      	mov	r1, r3
 800188e:	f002 fef2 	bl	8004676 <HAL_GPIO_WritePin>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]

	return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	4611      	mov	r1, r2
 80018ba:	461a      	mov	r2, r3
 80018bc:	460b      	mov	r3, r1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	4613      	mov	r3, r2
 80018c2:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80018ca:	2101      	movs	r1, #1
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff fd98 	bl	8001402 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80018d2:	210e      	movs	r1, #14
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff ff62 	bl	800179e <LoRa_read>
 80018da:	4603      	mov	r3, r0
 80018dc:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	461a      	mov	r2, r3
 80018e2:	210d      	movs	r1, #13
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff ff74 	bl	80017d2 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	461a      	mov	r2, r3
 80018ee:	2122      	movs	r1, #34	; 0x22
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff ff6e 	bl	80017d2 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	2100      	movs	r1, #0
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff ff85 	bl	800180c <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001902:	2103      	movs	r1, #3
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fd7c 	bl	8001402 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800190a:	2112      	movs	r1, #18
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff ff46 	bl	800179e <LoRa_read>
 8001912:	4603      	mov	r3, r0
 8001914:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001916:	7cfb      	ldrb	r3, [r7, #19]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00a      	beq.n	8001936 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001920:	22ff      	movs	r2, #255	; 0xff
 8001922:	2112      	movs	r1, #18
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff ff54 	bl	80017d2 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800192a:	6979      	ldr	r1, [r7, #20]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff fd68 	bl	8001402 <LoRa_gotoMode>
			return 1;
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	3b01      	subs	r3, #1
 800193a:	80bb      	strh	r3, [r7, #4]
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d105      	bne.n	800194e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001942:	6979      	ldr	r1, [r7, #20]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff fd5c 	bl	8001402 <LoRa_gotoMode>
				return 0;
 800194a:	2300      	movs	r3, #0
 800194c:	e003      	b.n	8001956 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800194e:	2001      	movs	r0, #1
 8001950:	f002 fb40 	bl	8003fd4 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001954:	e7d9      	b.n	800190a <LoRa_transmit+0x5c>
	}

}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff97 	bl	800189a <LoRa_isvalid>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8093 	beq.w	8001a9a <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001974:	2100      	movs	r1, #0
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fd43 	bl	8001402 <LoRa_gotoMode>
			HAL_Delay(10);
 800197c:	200a      	movs	r0, #10
 800197e:	f002 fb29 	bl	8003fd4 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001982:	2101      	movs	r1, #1
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff0a 	bl	800179e <LoRa_read>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800198e:	200a      	movs	r0, #10
 8001990:	f002 fb20 	bl	8003fd4 <HAL_Delay>
			data = read | 0x80;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800199a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800199c:	7bbb      	ldrb	r3, [r7, #14]
 800199e:	461a      	mov	r2, r3
 80019a0:	2101      	movs	r1, #1
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff15 	bl	80017d2 <LoRa_write>
			HAL_Delay(100);
 80019a8:	2064      	movs	r0, #100	; 0x64
 80019aa:	f002 fb13 	bl	8003fd4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fe03 	bl	80015c0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80019c0:	4619      	mov	r1, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fe7e 	bl	80016c4 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fe8b 	bl	80016ec <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80019d6:	2223      	movs	r2, #35	; 0x23
 80019d8:	210c      	movs	r1, #12
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fef9 	bl	80017d2 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fec1 	bl	8001768 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fe39 	bl	8001666 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	211f      	movs	r1, #31
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff feea 	bl	80017d2 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	211d      	movs	r1, #29
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fed6 	bl	80017d2 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	2120      	movs	r1, #32
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fecc 	bl	80017d2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	2121      	movs	r1, #33	; 0x21
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fec4 	bl	80017d2 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fea6 	bl	800179e <LoRa_read>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001a5c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001a5e:	7bbb      	ldrb	r3, [r7, #14]
 8001a60:	461a      	mov	r2, r3
 8001a62:	2140      	movs	r1, #64	; 0x40
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff feb4 	bl	80017d2 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fcc8 	bl	8001402 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001a78:	200a      	movs	r0, #10
 8001a7a:	f002 faab 	bl	8003fd4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001a7e:	2142      	movs	r1, #66	; 0x42
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fe8c 	bl	800179e <LoRa_read>
 8001a86:	4603      	mov	r3, r0
 8001a88:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	2b12      	cmp	r3, #18
 8001a8e:	d101      	bne.n	8001a94 <LoRa_init+0x136>
				return LORA_OK;
 8001a90:	23c8      	movs	r3, #200	; 0xc8
 8001a92:	e004      	b.n	8001a9e <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8001a94:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001a98:	e001      	b.n	8001a9e <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8001a9a:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aac:	b08c      	sub	sp, #48	; 0x30
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <decodeGGA+0x17c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001abe:	e004      	b.n	8001aca <decodeGGA+0x22>
 8001ac0:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <decodeGGA+0x17c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4a57      	ldr	r2, [pc, #348]	; (8001c24 <decodeGGA+0x17c>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <decodeGGA+0x17c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ad8:	d1f2      	bne.n	8001ac0 <decodeGGA+0x18>
	inx++;
 8001ada:	4b52      	ldr	r3, [pc, #328]	; (8001c24 <decodeGGA+0x17c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <decodeGGA+0x17c>)
 8001ae2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001ae4:	e004      	b.n	8001af0 <decodeGGA+0x48>
 8001ae6:	4b4f      	ldr	r3, [pc, #316]	; (8001c24 <decodeGGA+0x17c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	4a4d      	ldr	r2, [pc, #308]	; (8001c24 <decodeGGA+0x17c>)
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <decodeGGA+0x17c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b2c      	cmp	r3, #44	; 0x2c
 8001afe:	d1f2      	bne.n	8001ae6 <decodeGGA+0x3e>
	inx++;
 8001b00:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <decodeGGA+0x17c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a47      	ldr	r2, [pc, #284]	; (8001c24 <decodeGGA+0x17c>)
 8001b08:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001b0a:	e004      	b.n	8001b16 <decodeGGA+0x6e>
 8001b0c:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <decodeGGA+0x17c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <decodeGGA+0x17c>)
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <decodeGGA+0x17c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b2c      	cmp	r3, #44	; 0x2c
 8001b24:	d1f2      	bne.n	8001b0c <decodeGGA+0x64>
	inx++;
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <decodeGGA+0x17c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a3d      	ldr	r2, [pc, #244]	; (8001c24 <decodeGGA+0x17c>)
 8001b2e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001b30:	e004      	b.n	8001b3c <decodeGGA+0x94>
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <decodeGGA+0x17c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a3a      	ldr	r2, [pc, #232]	; (8001c24 <decodeGGA+0x17c>)
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <decodeGGA+0x17c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b2c      	cmp	r3, #44	; 0x2c
 8001b4a:	d1f2      	bne.n	8001b32 <decodeGGA+0x8a>
	inx++;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <decodeGGA+0x17c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	4a34      	ldr	r2, [pc, #208]	; (8001c24 <decodeGGA+0x17c>)
 8001b54:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001b56:	e004      	b.n	8001b62 <decodeGGA+0xba>
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <decodeGGA+0x17c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <decodeGGA+0x17c>)
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <decodeGGA+0x17c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b2c      	cmp	r3, #44	; 0x2c
 8001b70:	d1f2      	bne.n	8001b58 <decodeGGA+0xb0>
	inx++;
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <decodeGGA+0x17c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a2a      	ldr	r2, [pc, #168]	; (8001c24 <decodeGGA+0x17c>)
 8001b7a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001b7c:	e004      	b.n	8001b88 <decodeGGA+0xe0>
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <decodeGGA+0x17c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <decodeGGA+0x17c>)
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <decodeGGA+0x17c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b2c      	cmp	r3, #44	; 0x2c
 8001b96:	d1f2      	bne.n	8001b7e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <decodeGGA+0x17c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a21      	ldr	r2, [pc, #132]	; (8001c24 <decodeGGA+0x17c>)
 8001ba0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <decodeGGA+0x17c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b31      	cmp	r3, #49	; 0x31
 8001bb0:	d00f      	beq.n	8001bd2 <decodeGGA+0x12a>
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <decodeGGA+0x17c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b32      	cmp	r3, #50	; 0x32
 8001bc0:	d007      	beq.n	8001bd2 <decodeGGA+0x12a>
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <decodeGGA+0x17c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b36      	cmp	r3, #54	; 0x36
 8001bd0:	d106      	bne.n	8001be0 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <decodeGGA+0x17c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001bde:	e009      	b.n	8001bf4 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001be6:	2301      	movs	r3, #1
 8001be8:	e2f2      	b.n	80021d0 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <decodeGGA+0x17c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <decodeGGA+0x17c>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <decodeGGA+0x17c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b2c      	cmp	r3, #44	; 0x2c
 8001c02:	d1f2      	bne.n	8001bea <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <decodeGGA+0x17c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <decodeGGA+0x17c>)
 8001c0c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	220c      	movs	r2, #12
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f009 f825 	bl	800ac66 <memset>
	i=0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c20:	e016      	b.n	8001c50 <decodeGGA+0x1a8>
 8001c22:	bf00      	nop
 8001c24:	20000218 	.word	0x20000218
	{
		buffer[i] = GGAbuffer[inx];
 8001c28:	4ba7      	ldr	r3, [pc, #668]	; (8001ec8 <decodeGGA+0x420>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	7819      	ldrb	r1, [r3, #0]
 8001c34:	f107 020c 	add.w	r2, r7, #12
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3a:	4413      	add	r3, r2
 8001c3c:	460a      	mov	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
		i++;
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	3301      	adds	r3, #1
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001c46:	4ba0      	ldr	r3, [pc, #640]	; (8001ec8 <decodeGGA+0x420>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a9e      	ldr	r2, [pc, #632]	; (8001ec8 <decodeGGA+0x420>)
 8001c4e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001c50:	4b9d      	ldr	r3, [pc, #628]	; (8001ec8 <decodeGGA+0x420>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b2c      	cmp	r3, #44	; 0x2c
 8001c5e:	d1e3      	bne.n	8001c28 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 fff1 	bl	8009c4c <atoi>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a97      	ldr	r2, [pc, #604]	; (8001ecc <decodeGGA+0x424>)
 8001c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c72:	1312      	asrs	r2, r2, #12
 8001c74:	17db      	asrs	r3, r3, #31
 8001c76:	1ad2      	subs	r2, r2, r3
 8001c78:	4b95      	ldr	r3, [pc, #596]	; (8001ed0 <decodeGGA+0x428>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4995      	ldr	r1, [pc, #596]	; (8001ed4 <decodeGGA+0x42c>)
 8001c7e:	fb81 0103 	smull	r0, r1, r1, r3
 8001c82:	1149      	asrs	r1, r1, #5
 8001c84:	17db      	asrs	r3, r3, #31
 8001c86:	1acb      	subs	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a93      	ldr	r2, [pc, #588]	; (8001ed8 <decodeGGA+0x430>)
 8001c8c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4618      	mov	r0, r3
 8001c94:	f007 ffda 	bl	8009c4c <atoi>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a8e      	ldr	r2, [pc, #568]	; (8001ed4 <decodeGGA+0x42c>)
 8001c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca0:	1152      	asrs	r2, r2, #5
 8001ca2:	17db      	asrs	r3, r3, #31
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	4a8b      	ldr	r2, [pc, #556]	; (8001ed4 <decodeGGA+0x42c>)
 8001ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cac:	1151      	asrs	r1, r2, #5
 8001cae:	17da      	asrs	r2, r3, #31
 8001cb0:	1a8a      	subs	r2, r1, r2
 8001cb2:	2164      	movs	r1, #100	; 0x64
 8001cb4:	fb01 f202 	mul.w	r2, r1, r2
 8001cb8:	1a9a      	subs	r2, r3, r2
 8001cba:	4b85      	ldr	r3, [pc, #532]	; (8001ed0 <decodeGGA+0x428>)
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	4b85      	ldr	r3, [pc, #532]	; (8001ed4 <decodeGGA+0x42c>)
 8001cc0:	fb83 0301 	smull	r0, r3, r3, r1
 8001cc4:	1158      	asrs	r0, r3, #5
 8001cc6:	17cb      	asrs	r3, r1, #31
 8001cc8:	1ac3      	subs	r3, r0, r3
 8001cca:	2064      	movs	r0, #100	; 0x64
 8001ccc:	fb00 f303 	mul.w	r3, r0, r3
 8001cd0:	1acb      	subs	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a81      	ldr	r2, [pc, #516]	; (8001edc <decodeGGA+0x434>)
 8001cd6:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001cd8:	4b80      	ldr	r3, [pc, #512]	; (8001edc <decodeGGA+0x434>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b3b      	cmp	r3, #59	; 0x3b
 8001cde:	dd09      	ble.n	8001cf4 <decodeGGA+0x24c>
	{
		min = min-60;
 8001ce0:	4b7e      	ldr	r3, [pc, #504]	; (8001edc <decodeGGA+0x434>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3b3c      	subs	r3, #60	; 0x3c
 8001ce6:	4a7d      	ldr	r2, [pc, #500]	; (8001edc <decodeGGA+0x434>)
 8001ce8:	6013      	str	r3, [r2, #0]
		hr++;
 8001cea:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <decodeGGA+0x430>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	4a79      	ldr	r2, [pc, #484]	; (8001ed8 <decodeGGA+0x430>)
 8001cf2:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001cf4:	4b78      	ldr	r3, [pc, #480]	; (8001ed8 <decodeGGA+0x430>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da09      	bge.n	8001d10 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001cfc:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <decodeGGA+0x430>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3318      	adds	r3, #24
 8001d02:	4a75      	ldr	r2, [pc, #468]	; (8001ed8 <decodeGGA+0x430>)
 8001d04:	6013      	str	r3, [r2, #0]
		daychange--;
 8001d06:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <decodeGGA+0x438>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	4a74      	ldr	r2, [pc, #464]	; (8001ee0 <decodeGGA+0x438>)
 8001d0e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001d10:	4b71      	ldr	r3, [pc, #452]	; (8001ed8 <decodeGGA+0x430>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b17      	cmp	r3, #23
 8001d16:	dd09      	ble.n	8001d2c <decodeGGA+0x284>
	{
		hr=hr-24;
 8001d18:	4b6f      	ldr	r3, [pc, #444]	; (8001ed8 <decodeGGA+0x430>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3b18      	subs	r3, #24
 8001d1e:	4a6e      	ldr	r2, [pc, #440]	; (8001ed8 <decodeGGA+0x430>)
 8001d20:	6013      	str	r3, [r2, #0]
		daychange++;
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <decodeGGA+0x438>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a6d      	ldr	r2, [pc, #436]	; (8001ee0 <decodeGGA+0x438>)
 8001d2a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <decodeGGA+0x430>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <decodeGGA+0x434>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	4618      	mov	r0, r3
 8001d42:	f007 ff83 	bl	8009c4c <atoi>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b62      	ldr	r3, [pc, #392]	; (8001ed4 <decodeGGA+0x42c>)
 8001d4a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d4e:	1159      	asrs	r1, r3, #5
 8001d50:	17d3      	asrs	r3, r2, #31
 8001d52:	1acb      	subs	r3, r1, r3
 8001d54:	2164      	movs	r1, #100	; 0x64
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <decodeGGA+0x420>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <decodeGGA+0x420>)
 8001d68:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	220c      	movs	r2, #12
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f008 ff77 	bl	800ac66 <memset>
	i=0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001d7c:	e013      	b.n	8001da6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001d7e:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <decodeGGA+0x420>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	7819      	ldrb	r1, [r3, #0]
 8001d8a:	f107 020c 	add.w	r2, r7, #12
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	4413      	add	r3, r2
 8001d92:	460a      	mov	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
		i++;
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	3301      	adds	r3, #1
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001d9c:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <decodeGGA+0x420>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a49      	ldr	r2, [pc, #292]	; (8001ec8 <decodeGGA+0x420>)
 8001da4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001da6:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <decodeGGA+0x420>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b2c      	cmp	r3, #44	; 0x2c
 8001db4:	d1e3      	bne.n	8001d7e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe f9c8 	bl	8000150 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d801      	bhi.n	8001dca <decodeGGA+0x322>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e202      	b.n	80021d0 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f007 ff3c 	bl	8009c4c <atoi>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001ddc:	e002      	b.n	8001de4 <decodeGGA+0x33c>
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	3301      	adds	r3, #1
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de4:	f107 020c 	add.w	r2, r7, #12
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b2e      	cmp	r3, #46	; 0x2e
 8001df0:	d1f5      	bne.n	8001dde <decodeGGA+0x336>
	j++;
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	3301      	adds	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe f9a7 	bl	8000150 <strlen>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	f107 020c 	add.w	r2, r7, #12
 8001e10:	4413      	add	r3, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f007 ff1a 	bl	8009c4c <atoi>
 8001e18:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001e1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe faf0 	bl	8000404 <__aeabi_i2d>
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <decodeGGA+0x43c>)
 8001e2a:	f7fe fc7f 	bl	800072c <__aeabi_ddiv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4690      	mov	r8, r2
 8001e34:	4699      	mov	r9, r3
 8001e36:	69f8      	ldr	r0, [r7, #28]
 8001e38:	f7fe fae4 	bl	8000404 <__aeabi_i2d>
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	460d      	mov	r5, r1
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	3302      	adds	r3, #2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fadd 	bl	8000404 <__aeabi_i2d>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	4925      	ldr	r1, [pc, #148]	; (8001ee8 <decodeGGA+0x440>)
 8001e54:	f00c fb00 	bl	800e458 <pow>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fc64 	bl	800072c <__aeabi_ddiv>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4640      	mov	r0, r8
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	f7fe f97e 	bl	800016c <__adddf3>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fe26 	bl	8000ac8 <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]
	inx++;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <decodeGGA+0x420>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <decodeGGA+0x420>)
 8001e8e:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <decodeGGA+0x420>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <decodeGGA+0x420>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <decodeGGA+0x420>)
 8001ea8:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <decodeGGA+0x420>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <decodeGGA+0x420>)
 8001eb2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	220c      	movs	r2, #12
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f008 fed2 	bl	800ac66 <memset>
	i=0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001ec6:	e025      	b.n	8001f14 <decodeGGA+0x46c>
 8001ec8:	20000218 	.word	0x20000218
 8001ecc:	68db8bad 	.word	0x68db8bad
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	51eb851f 	.word	0x51eb851f
 8001ed8:	2000021c 	.word	0x2000021c
 8001edc:	20000220 	.word	0x20000220
 8001ee0:	20000230 	.word	0x20000230
 8001ee4:	40590000 	.word	0x40590000
 8001ee8:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8001eec:	4b88      	ldr	r3, [pc, #544]	; (8002110 <decodeGGA+0x668>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	7819      	ldrb	r1, [r3, #0]
 8001ef8:	f107 020c 	add.w	r2, r7, #12
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	4413      	add	r3, r2
 8001f00:	460a      	mov	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
		i++;
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	3301      	adds	r3, #1
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001f0a:	4b81      	ldr	r3, [pc, #516]	; (8002110 <decodeGGA+0x668>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	4a7f      	ldr	r2, [pc, #508]	; (8002110 <decodeGGA+0x668>)
 8001f12:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001f14:	4b7e      	ldr	r3, [pc, #504]	; (8002110 <decodeGGA+0x668>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b2c      	cmp	r3, #44	; 0x2c
 8001f22:	d1e3      	bne.n	8001eec <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f007 fe8f 	bl	8009c4c <atoi>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001f36:	e002      	b.n	8001f3e <decodeGGA+0x496>
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3e:	f107 020c 	add.w	r2, r7, #12
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b2e      	cmp	r3, #46	; 0x2e
 8001f4a:	d1f5      	bne.n	8001f38 <decodeGGA+0x490>
	j++;
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	3301      	adds	r3, #1
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe f8fa 	bl	8000150 <strlen>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f66:	f107 020c 	add.w	r2, r7, #12
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f007 fe6d 	bl	8009c4c <atoi>
 8001f72:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001f74:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fa43 	bl	8000404 <__aeabi_i2d>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b64      	ldr	r3, [pc, #400]	; (8002114 <decodeGGA+0x66c>)
 8001f84:	f7fe fbd2 	bl	800072c <__aeabi_ddiv>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4690      	mov	r8, r2
 8001f8e:	4699      	mov	r9, r3
 8001f90:	69f8      	ldr	r0, [r7, #28]
 8001f92:	f7fe fa37 	bl	8000404 <__aeabi_i2d>
 8001f96:	4604      	mov	r4, r0
 8001f98:	460d      	mov	r5, r1
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fa30 	bl	8000404 <__aeabi_i2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	f04f 0000 	mov.w	r0, #0
 8001fac:	495a      	ldr	r1, [pc, #360]	; (8002118 <decodeGGA+0x670>)
 8001fae:	f00c fa53 	bl	800e458 <pow>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe fbb7 	bl	800072c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4640      	mov	r0, r8
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	f7fe f8d1 	bl	800016c <__adddf3>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7fe fd79 	bl	8000ac8 <__aeabi_d2f>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	609a      	str	r2, [r3, #8]
	inx++;
 8001fe0:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <decodeGGA+0x668>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	4a4a      	ldr	r2, [pc, #296]	; (8002110 <decodeGGA+0x668>)
 8001fe8:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001fea:	4b49      	ldr	r3, [pc, #292]	; (8002110 <decodeGGA+0x668>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001ffa:	4b45      	ldr	r3, [pc, #276]	; (8002110 <decodeGGA+0x668>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	4a43      	ldr	r2, [pc, #268]	; (8002110 <decodeGGA+0x668>)
 8002002:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <decodeGGA+0x668>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a41      	ldr	r2, [pc, #260]	; (8002110 <decodeGGA+0x668>)
 800200c:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800200e:	4b40      	ldr	r3, [pc, #256]	; (8002110 <decodeGGA+0x668>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	4a3e      	ldr	r2, [pc, #248]	; (8002110 <decodeGGA+0x668>)
 8002016:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002018:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <decodeGGA+0x668>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a3c      	ldr	r2, [pc, #240]	; (8002110 <decodeGGA+0x668>)
 8002020:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	220c      	movs	r2, #12
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f008 fe1b 	bl	800ac66 <memset>
	i=0;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8002034:	e013      	b.n	800205e <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <decodeGGA+0x668>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	7819      	ldrb	r1, [r3, #0]
 8002042:	f107 020c 	add.w	r2, r7, #12
 8002046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002048:	4413      	add	r3, r2
 800204a:	460a      	mov	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
		i++;
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	3301      	adds	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002054:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <decodeGGA+0x668>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a2d      	ldr	r2, [pc, #180]	; (8002110 <decodeGGA+0x668>)
 800205c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <decodeGGA+0x668>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b2c      	cmp	r3, #44	; 0x2c
 800206c:	d1e3      	bne.n	8002036 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4618      	mov	r0, r3
 8002074:	f007 fdea 	bl	8009c4c <atoi>
 8002078:	4602      	mov	r2, r0
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <decodeGGA+0x668>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	4a22      	ldr	r2, [pc, #136]	; (8002110 <decodeGGA+0x668>)
 8002086:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8002088:	e004      	b.n	8002094 <decodeGGA+0x5ec>
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <decodeGGA+0x668>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <decodeGGA+0x668>)
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <decodeGGA+0x668>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b2c      	cmp	r3, #44	; 0x2c
 80020a2:	d1f2      	bne.n	800208a <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <decodeGGA+0x668>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a19      	ldr	r2, [pc, #100]	; (8002110 <decodeGGA+0x668>)
 80020ac:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	220c      	movs	r2, #12
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f008 fdd5 	bl	800ac66 <memset>
	i=0;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80020c0:	e013      	b.n	80020ea <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <decodeGGA+0x668>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	7819      	ldrb	r1, [r3, #0]
 80020ce:	f107 020c 	add.w	r2, r7, #12
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	4413      	add	r3, r2
 80020d6:	460a      	mov	r2, r1
 80020d8:	701a      	strb	r2, [r3, #0]
		i++;
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	3301      	adds	r3, #1
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <decodeGGA+0x668>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <decodeGGA+0x668>)
 80020e8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <decodeGGA+0x668>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b2c      	cmp	r3, #44	; 0x2c
 80020f8:	d1e3      	bne.n	80020c2 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4618      	mov	r0, r3
 8002100:	f007 fda4 	bl	8009c4c <atoi>
 8002104:	4603      	mov	r3, r0
 8002106:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800210c:	e009      	b.n	8002122 <decodeGGA+0x67a>
 800210e:	bf00      	nop
 8002110:	20000218 	.word	0x20000218
 8002114:	40590000 	.word	0x40590000
 8002118:	40240000 	.word	0x40240000
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	3301      	adds	r3, #1
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	f107 020c 	add.w	r2, r7, #12
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b2e      	cmp	r3, #46	; 0x2e
 800212e:	d1f5      	bne.n	800211c <decodeGGA+0x674>
	j++;
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002132:	3301      	adds	r3, #1
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f808 	bl	8000150 <strlen>
 8002140:	4602      	mov	r2, r0
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	f107 020c 	add.w	r2, r7, #12
 800214e:	4413      	add	r3, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f007 fd7b 	bl	8009c4c <atoi>
 8002156:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8002158:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f951 	bl	8000404 <__aeabi_i2d>
 8002162:	4604      	mov	r4, r0
 8002164:	460d      	mov	r5, r1
 8002166:	69f8      	ldr	r0, [r7, #28]
 8002168:	f7fe f94c 	bl	8000404 <__aeabi_i2d>
 800216c:	4680      	mov	r8, r0
 800216e:	4689      	mov	r9, r1
 8002170:	6a38      	ldr	r0, [r7, #32]
 8002172:	f7fe f947 	bl	8000404 <__aeabi_i2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	f04f 0000 	mov.w	r0, #0
 800217e:	4917      	ldr	r1, [pc, #92]	; (80021dc <decodeGGA+0x734>)
 8002180:	f00c f96a 	bl	800e458 <pow>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4640      	mov	r0, r8
 800218a:	4649      	mov	r1, r9
 800218c:	f7fe face 	bl	800072c <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fd ffe8 	bl	800016c <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7fe fc90 	bl	8000ac8 <__aeabi_d2f>
 80021a8:	4603      	mov	r3, r0
 80021aa:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	621a      	str	r2, [r3, #32]

	inx++;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <decodeGGA+0x738>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <decodeGGA+0x738>)
 80021ba:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <decodeGGA+0x738>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80021ce:	2300      	movs	r3, #0

}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3730      	adds	r7, #48	; 0x30
 80021d4:	46bd      	mov	sp, r7
 80021d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021da:	bf00      	nop
 80021dc:	40240000 	.word	0x40240000
 80021e0:	20000218 	.word	0x20000218

080021e4 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 80021e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021e8:	b090      	sub	sp, #64	; 0x40
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
	inx = 0;
 80021f0:	4b92      	ldr	r3, [pc, #584]	; (800243c <decodeRMC+0x258>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 80021fa:	e004      	b.n	8002206 <decodeRMC+0x22>
 80021fc:	4b8f      	ldr	r3, [pc, #572]	; (800243c <decodeRMC+0x258>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a8e      	ldr	r2, [pc, #568]	; (800243c <decodeRMC+0x258>)
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b8d      	ldr	r3, [pc, #564]	; (800243c <decodeRMC+0x258>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b2c      	cmp	r3, #44	; 0x2c
 8002214:	d1f2      	bne.n	80021fc <decodeRMC+0x18>
	inx++;
 8002216:	4b89      	ldr	r3, [pc, #548]	; (800243c <decodeRMC+0x258>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	4a87      	ldr	r2, [pc, #540]	; (800243c <decodeRMC+0x258>)
 800221e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8002220:	e004      	b.n	800222c <decodeRMC+0x48>
 8002222:	4b86      	ldr	r3, [pc, #536]	; (800243c <decodeRMC+0x258>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	4a84      	ldr	r2, [pc, #528]	; (800243c <decodeRMC+0x258>)
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b83      	ldr	r3, [pc, #524]	; (800243c <decodeRMC+0x258>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b2c      	cmp	r3, #44	; 0x2c
 800223a:	d1f2      	bne.n	8002222 <decodeRMC+0x3e>
	inx++;
 800223c:	4b7f      	ldr	r3, [pc, #508]	; (800243c <decodeRMC+0x258>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	4a7e      	ldr	r2, [pc, #504]	; (800243c <decodeRMC+0x258>)
 8002244:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8002246:	4b7d      	ldr	r3, [pc, #500]	; (800243c <decodeRMC+0x258>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b41      	cmp	r3, #65	; 0x41
 8002254:	d10d      	bne.n	8002272 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 800225c:	4b77      	ldr	r3, [pc, #476]	; (800243c <decodeRMC+0x258>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	4a76      	ldr	r2, [pc, #472]	; (800243c <decodeRMC+0x258>)
 8002264:	6013      	str	r3, [r2, #0]
	inx++;
 8002266:	4b75      	ldr	r3, [pc, #468]	; (800243c <decodeRMC+0x258>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a73      	ldr	r2, [pc, #460]	; (800243c <decodeRMC+0x258>)
 800226e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8002270:	e009      	b.n	8002286 <decodeRMC+0xa2>
		rmc->isValid =0;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
		return 1;
 8002278:	2301      	movs	r3, #1
 800227a:	e1d5      	b.n	8002628 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800227c:	4b6f      	ldr	r3, [pc, #444]	; (800243c <decodeRMC+0x258>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a6e      	ldr	r2, [pc, #440]	; (800243c <decodeRMC+0x258>)
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b6d      	ldr	r3, [pc, #436]	; (800243c <decodeRMC+0x258>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b2c      	cmp	r3, #44	; 0x2c
 8002294:	d1f2      	bne.n	800227c <decodeRMC+0x98>
	inx++;
 8002296:	4b69      	ldr	r3, [pc, #420]	; (800243c <decodeRMC+0x258>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	4a67      	ldr	r2, [pc, #412]	; (800243c <decodeRMC+0x258>)
 800229e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80022a0:	e004      	b.n	80022ac <decodeRMC+0xc8>
 80022a2:	4b66      	ldr	r3, [pc, #408]	; (800243c <decodeRMC+0x258>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a64      	ldr	r2, [pc, #400]	; (800243c <decodeRMC+0x258>)
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b63      	ldr	r3, [pc, #396]	; (800243c <decodeRMC+0x258>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b2c      	cmp	r3, #44	; 0x2c
 80022ba:	d1f2      	bne.n	80022a2 <decodeRMC+0xbe>
	inx++;
 80022bc:	4b5f      	ldr	r3, [pc, #380]	; (800243c <decodeRMC+0x258>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	4a5e      	ldr	r2, [pc, #376]	; (800243c <decodeRMC+0x258>)
 80022c4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 80022c6:	e004      	b.n	80022d2 <decodeRMC+0xee>
 80022c8:	4b5c      	ldr	r3, [pc, #368]	; (800243c <decodeRMC+0x258>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a5b      	ldr	r2, [pc, #364]	; (800243c <decodeRMC+0x258>)
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b5a      	ldr	r3, [pc, #360]	; (800243c <decodeRMC+0x258>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b2c      	cmp	r3, #44	; 0x2c
 80022e0:	d1f2      	bne.n	80022c8 <decodeRMC+0xe4>
	inx++;
 80022e2:	4b56      	ldr	r3, [pc, #344]	; (800243c <decodeRMC+0x258>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	4a54      	ldr	r2, [pc, #336]	; (800243c <decodeRMC+0x258>)
 80022ea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 80022ec:	e004      	b.n	80022f8 <decodeRMC+0x114>
 80022ee:	4b53      	ldr	r3, [pc, #332]	; (800243c <decodeRMC+0x258>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a51      	ldr	r2, [pc, #324]	; (800243c <decodeRMC+0x258>)
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <decodeRMC+0x258>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b2c      	cmp	r3, #44	; 0x2c
 8002306:	d1f2      	bne.n	80022ee <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8002308:	4b4c      	ldr	r3, [pc, #304]	; (800243c <decodeRMC+0x258>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a4b      	ldr	r2, [pc, #300]	; (800243c <decodeRMC+0x258>)
 8002310:	6013      	str	r3, [r2, #0]
	i=0;
 8002312:	2300      	movs	r3, #0
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	220c      	movs	r2, #12
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f008 fca1 	bl	800ac66 <memset>
	while (RMCbuffer[inx] != ',')
 8002324:	e013      	b.n	800234e <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8002326:	4b45      	ldr	r3, [pc, #276]	; (800243c <decodeRMC+0x258>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	7819      	ldrb	r1, [r3, #0]
 8002332:	f107 0208 	add.w	r2, r7, #8
 8002336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002338:	4413      	add	r3, r2
 800233a:	460a      	mov	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
		i++;
 800233e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002340:	3301      	adds	r3, #1
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002344:	4b3d      	ldr	r3, [pc, #244]	; (800243c <decodeRMC+0x258>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a3c      	ldr	r2, [pc, #240]	; (800243c <decodeRMC+0x258>)
 800234c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <decodeRMC+0x258>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b2c      	cmp	r3, #44	; 0x2c
 800235c:	d1e3      	bne.n	8002326 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d055      	beq.n	8002414 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	4618      	mov	r0, r3
 800236e:	f007 fc6d 	bl	8009c4c <atoi>
 8002372:	4603      	mov	r3, r0
 8002374:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 800237a:	e002      	b.n	8002382 <decodeRMC+0x19e>
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	3301      	adds	r3, #1
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
 8002382:	f107 0208 	add.w	r2, r7, #8
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b2e      	cmp	r3, #46	; 0x2e
 800238e:	d1f5      	bne.n	800237c <decodeRMC+0x198>
		j++;
 8002390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002392:	3301      	adds	r3, #1
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	4618      	mov	r0, r3
 800239c:	f7fd fed8 	bl	8000150 <strlen>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	f107 0208 	add.w	r2, r7, #8
 80023ae:	4413      	add	r3, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f007 fc4b 	bl	8009c4c <atoi>
 80023b6:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 80023b8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f821 	bl	8000404 <__aeabi_i2d>
 80023c2:	4604      	mov	r4, r0
 80023c4:	460d      	mov	r5, r1
 80023c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c8:	f7fe f81c 	bl	8000404 <__aeabi_i2d>
 80023cc:	4680      	mov	r8, r0
 80023ce:	4689      	mov	r9, r1
 80023d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023d2:	f7fe f817 	bl	8000404 <__aeabi_i2d>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	4918      	ldr	r1, [pc, #96]	; (8002440 <decodeRMC+0x25c>)
 80023e0:	f00c f83a 	bl	800e458 <pow>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4640      	mov	r0, r8
 80023ea:	4649      	mov	r1, r9
 80023ec:	f7fe f99e 	bl	800072c <__aeabi_ddiv>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fd feb8 	bl	800016c <__adddf3>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fb60 	bl	8000ac8 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	e003      	b.n	800241c <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <decodeRMC+0x258>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	4a06      	ldr	r2, [pc, #24]	; (800243c <decodeRMC+0x258>)
 8002424:	6013      	str	r3, [r2, #0]
	i=0;
 8002426:	2300      	movs	r3, #0
 8002428:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	220c      	movs	r2, #12
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f008 fc17 	bl	800ac66 <memset>
	while (RMCbuffer[inx] != ',')
 8002438:	e018      	b.n	800246c <decodeRMC+0x288>
 800243a:	bf00      	nop
 800243c:	20000218 	.word	0x20000218
 8002440:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 8002444:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <decodeRMC+0x450>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	7819      	ldrb	r1, [r3, #0]
 8002450:	f107 0208 	add.w	r2, r7, #8
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	4413      	add	r3, r2
 8002458:	460a      	mov	r2, r1
 800245a:	701a      	strb	r2, [r3, #0]
		i++;
 800245c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245e:	3301      	adds	r3, #1
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002462:	4b74      	ldr	r3, [pc, #464]	; (8002634 <decodeRMC+0x450>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a72      	ldr	r2, [pc, #456]	; (8002634 <decodeRMC+0x450>)
 800246a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800246c:	4b71      	ldr	r3, [pc, #452]	; (8002634 <decodeRMC+0x450>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b2c      	cmp	r3, #44	; 0x2c
 800247a:	d1e3      	bne.n	8002444 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d055      	beq.n	8002532 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8002486:	f107 0308 	add.w	r3, r7, #8
 800248a:	4618      	mov	r0, r3
 800248c:	f007 fbde 	bl	8009c4c <atoi>
 8002490:	4603      	mov	r3, r0
 8002492:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8002498:	e002      	b.n	80024a0 <decodeRMC+0x2bc>
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	3301      	adds	r3, #1
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
 80024a0:	f107 0208 	add.w	r2, r7, #8
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a6:	4413      	add	r3, r2
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b2e      	cmp	r3, #46	; 0x2e
 80024ac:	d1f5      	bne.n	800249a <decodeRMC+0x2b6>
		j++;
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	3301      	adds	r3, #1
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 80024b4:	f107 0308 	add.w	r3, r7, #8
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd fe49 	bl	8000150 <strlen>
 80024be:	4602      	mov	r2, r0
 80024c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c8:	f107 0208 	add.w	r2, r7, #8
 80024cc:	4413      	add	r3, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f007 fbbc 	bl	8009c4c <atoi>
 80024d4:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 80024d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fd ff92 	bl	8000404 <__aeabi_i2d>
 80024e0:	4604      	mov	r4, r0
 80024e2:	460d      	mov	r5, r1
 80024e4:	69b8      	ldr	r0, [r7, #24]
 80024e6:	f7fd ff8d 	bl	8000404 <__aeabi_i2d>
 80024ea:	4680      	mov	r8, r0
 80024ec:	4689      	mov	r9, r1
 80024ee:	69f8      	ldr	r0, [r7, #28]
 80024f0:	f7fd ff88 	bl	8000404 <__aeabi_i2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	494e      	ldr	r1, [pc, #312]	; (8002638 <decodeRMC+0x454>)
 80024fe:	f00b ffab 	bl	800e458 <pow>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4640      	mov	r0, r8
 8002508:	4649      	mov	r1, r9
 800250a:	f7fe f90f 	bl	800072c <__aeabi_ddiv>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fd fe29 	bl	800016c <__adddf3>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe fad1 	bl	8000ac8 <__aeabi_d2f>
 8002526:	4603      	mov	r3, r0
 8002528:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	611a      	str	r2, [r3, #16]
 8002530:	e003      	b.n	800253a <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <decodeRMC+0x450>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	4a3c      	ldr	r2, [pc, #240]	; (8002634 <decodeRMC+0x450>)
 8002542:	6013      	str	r3, [r2, #0]
	i=0;
 8002544:	2300      	movs	r3, #0
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	220c      	movs	r2, #12
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f008 fb88 	bl	800ac66 <memset>
	while (RMCbuffer[inx] != ',')
 8002556:	e013      	b.n	8002580 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <decodeRMC+0x450>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	7819      	ldrb	r1, [r3, #0]
 8002564:	f107 0208 	add.w	r2, r7, #8
 8002568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256a:	4413      	add	r3, r2
 800256c:	460a      	mov	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
		i++;
 8002570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002572:	3301      	adds	r3, #1
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <decodeRMC+0x450>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a2d      	ldr	r2, [pc, #180]	; (8002634 <decodeRMC+0x450>)
 800257e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8002580:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <decodeRMC+0x450>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b2c      	cmp	r3, #44	; 0x2c
 800258e:	d1e3      	bne.n	8002558 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	4618      	mov	r0, r3
 8002596:	f007 fb59 	bl	8009c4c <atoi>
 800259a:	4603      	mov	r3, r0
 800259c:	4a27      	ldr	r2, [pc, #156]	; (800263c <decodeRMC+0x458>)
 800259e:	fb82 1203 	smull	r1, r2, r2, r3
 80025a2:	1312      	asrs	r2, r2, #12
 80025a4:	17db      	asrs	r3, r3, #31
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	4a25      	ldr	r2, [pc, #148]	; (8002640 <decodeRMC+0x45c>)
 80025aa:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	4618      	mov	r0, r3
 80025b2:	f007 fb4b 	bl	8009c4c <atoi>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4a22      	ldr	r2, [pc, #136]	; (8002644 <decodeRMC+0x460>)
 80025ba:	fb82 1203 	smull	r1, r2, r2, r3
 80025be:	1152      	asrs	r2, r2, #5
 80025c0:	17db      	asrs	r3, r3, #31
 80025c2:	1ad2      	subs	r2, r2, r3
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <decodeRMC+0x460>)
 80025c6:	fb83 1302 	smull	r1, r3, r3, r2
 80025ca:	1159      	asrs	r1, r3, #5
 80025cc:	17d3      	asrs	r3, r2, #31
 80025ce:	1acb      	subs	r3, r1, r3
 80025d0:	2164      	movs	r1, #100	; 0x64
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <decodeRMC+0x464>)
 80025da:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	4618      	mov	r0, r3
 80025e2:	f007 fb33 	bl	8009c4c <atoi>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <decodeRMC+0x460>)
 80025ea:	fb83 1302 	smull	r1, r3, r3, r2
 80025ee:	1159      	asrs	r1, r3, #5
 80025f0:	17d3      	asrs	r3, r2, #31
 80025f2:	1acb      	subs	r3, r1, r3
 80025f4:	2164      	movs	r1, #100	; 0x64
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	4a13      	ldr	r2, [pc, #76]	; (800264c <decodeRMC+0x468>)
 80025fe:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <decodeRMC+0x45c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <decodeRMC+0x46c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4413      	add	r3, r2
 800260a:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <decodeRMC+0x45c>)
 800260c:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <decodeRMC+0x45c>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <decodeRMC+0x464>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <decodeRMC+0x468>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	609a      	str	r2, [r3, #8]

	return 0;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3740      	adds	r7, #64	; 0x40
 800262c:	46bd      	mov	sp, r7
 800262e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002632:	bf00      	nop
 8002634:	20000218 	.word	0x20000218
 8002638:	40240000 	.word	0x40240000
 800263c:	68db8bad 	.word	0x68db8bad
 8002640:	20000224 	.word	0x20000224
 8002644:	51eb851f 	.word	0x51eb851f
 8002648:	20000228 	.word	0x20000228
 800264c:	2000022c 	.word	0x2000022c
 8002650:	20000230 	.word	0x20000230

08002654 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a06      	ldr	r2, [pc, #24]	; (800267c <vApplicationGetIdleTaskMemory+0x28>)
 8002664:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4a05      	ldr	r2, [pc, #20]	; (8002680 <vApplicationGetIdleTaskMemory+0x2c>)
 800266a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000234 	.word	0x20000234
 8002680:	200002d4 	.word	0x200002d4

08002684 <HAL_UART_RxCpltCallback>:
void DHT22_Task(void* pvParameter);
void GPSR_Task(void* pvParameter);
void BLE_Task(void* pvParameter);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_UART_RxCpltCallback+0x64>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d120      	bne.n	80026d6 <HAL_UART_RxCpltCallback+0x52>
	{
		if(rx_data == 'R')
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_UART_RxCpltCallback+0x68>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b52      	cmp	r3, #82	; 0x52
 800269a:	d106      	bne.n	80026aa <HAL_UART_RxCpltCallback+0x26>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)"Reset GST !\n", 12, 0xffff);
 800269c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a0:	220c      	movs	r2, #12
 80026a2:	4913      	ldr	r1, [pc, #76]	; (80026f0 <HAL_UART_RxCpltCallback+0x6c>)
 80026a4:	4810      	ldr	r0, [pc, #64]	; (80026e8 <HAL_UART_RxCpltCallback+0x64>)
 80026a6:	f004 fda3 	bl	80071f0 <HAL_UART_Transmit>
		}
		if(rx_data == 'A')
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_UART_RxCpltCallback+0x68>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b41      	cmp	r3, #65	; 0x41
 80026b0:	d111      	bne.n	80026d6 <HAL_UART_RxCpltCallback+0x52>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)"Packet: ", 8, 0xffff);
 80026b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b6:	2208      	movs	r2, #8
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <HAL_UART_RxCpltCallback+0x70>)
 80026ba:	480b      	ldr	r0, [pc, #44]	; (80026e8 <HAL_UART_RxCpltCallback+0x64>)
 80026bc:	f004 fd98 	bl	80071f0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)TxBuffer, strlen(TxBuffer), 0xffff);
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <HAL_UART_RxCpltCallback+0x74>)
 80026c2:	f7fd fd45 	bl	8000150 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ce:	490a      	ldr	r1, [pc, #40]	; (80026f8 <HAL_UART_RxCpltCallback+0x74>)
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <HAL_UART_RxCpltCallback+0x64>)
 80026d2:	f004 fd8d 	bl	80071f0 <HAL_UART_Transmit>
		}

	}
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80026d6:	2201      	movs	r2, #1
 80026d8:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_UART_RxCpltCallback+0x68>)
 80026da:	4803      	ldr	r0, [pc, #12]	; (80026e8 <HAL_UART_RxCpltCallback+0x64>)
 80026dc:	f004 fe0b 	bl	80072f6 <HAL_UART_Receive_IT>
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000660 	.word	0x20000660
 80026ec:	2000088c 	.word	0x2000088c
 80026f0:	0800f288 	.word	0x0800f288
 80026f4:	0800f298 	.word	0x0800f298
 80026f8:	200006dc 	.word	0x200006dc

080026fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin==RF_BTN_Pin)
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b20      	cmp	r3, #32
 800270a:	d145      	bne.n	8002798 <HAL_GPIO_EXTI_Callback+0x9c>
  {
		for(int i = 0;i<3;i++){ delay(60000);}
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e006      	b.n	8002720 <HAL_GPIO_EXTI_Callback+0x24>
 8002712:	f64e 2060 	movw	r0, #60000	; 0xea60
 8002716:	f7fe fce3 	bl	80010e0 <delay>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3301      	adds	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b02      	cmp	r3, #2
 8002724:	ddf5      	ble.n	8002712 <HAL_GPIO_EXTI_Callback+0x16>

		if(HAL_GPIO_ReadPin(RF_BTN_GPIO_Port, RF_BTN_Pin) == GPIO_PIN_RESET){
 8002726:	2120      	movs	r1, #32
 8002728:	481d      	ldr	r0, [pc, #116]	; (80027a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800272a:	f001 ff8d 	bl	8004648 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d131      	bne.n	8002798 <HAL_GPIO_EXTI_Callback+0x9c>
			HAL_GPIO_WritePin(OUTPUT_BTN_GPIO_Port, OUTPUT_BTN_Pin, GPIO_PIN_SET);
 8002734:	2201      	movs	r2, #1
 8002736:	2108      	movs	r1, #8
 8002738:	4819      	ldr	r0, [pc, #100]	; (80027a0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800273a:	f001 ff9c 	bl	8004676 <HAL_GPIO_WritePin>
			sprintf(message, "Button Interrupt\r\n");
 800273e:	4919      	ldr	r1, [pc, #100]	; (80027a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002740:	4819      	ldr	r0, [pc, #100]	; (80027a8 <HAL_GPIO_EXTI_Callback+0xac>)
 8002742:	f008 fa2d 	bl	800aba0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xffff);
 8002746:	4818      	ldr	r0, [pc, #96]	; (80027a8 <HAL_GPIO_EXTI_Callback+0xac>)
 8002748:	f7fd fd02 	bl	8000150 <strlen>
 800274c:	4603      	mov	r3, r0
 800274e:	b29a      	uxth	r2, r3
 8002750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002754:	4914      	ldr	r1, [pc, #80]	; (80027a8 <HAL_GPIO_EXTI_Callback+0xac>)
 8002756:	4815      	ldr	r0, [pc, #84]	; (80027ac <HAL_GPIO_EXTI_Callback+0xb0>)
 8002758:	f004 fd4a 	bl	80071f0 <HAL_UART_Transmit>
			memset(message, NULL, strlen(message));
 800275c:	4812      	ldr	r0, [pc, #72]	; (80027a8 <HAL_GPIO_EXTI_Callback+0xac>)
 800275e:	f7fd fcf7 	bl	8000150 <strlen>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	2100      	movs	r1, #0
 8002768:	480f      	ldr	r0, [pc, #60]	; (80027a8 <HAL_GPIO_EXTI_Callback+0xac>)
 800276a:	f008 fa7c 	bl	800ac66 <memset>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
			xSemaphoreGiveFromISR (LoRa_Sem, &xHigherPriorityTaskWoken);
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f107 0208 	add.w	r2, r7, #8
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f005 fcd4 	bl	800812a <xQueueGiveFromISR>
			portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_GPIO_EXTI_Callback+0x9c>
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	f3bf 8f6f 	isb	sy
		}

  }

}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40010c00 	.word	0x40010c00
 80027a4:	0800f2a4 	.word	0x0800f2a4
 80027a8:	200006f4 	.word	0x200006f4
 80027ac:	200005d0 	.word	0x200005d0
 80027b0:	200006ac 	.word	0x200006ac
 80027b4:	e000ed04 	.word	0xe000ed04

080027b8 <LORA_Task>:
  u.float_variable = val;
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
}

void LORA_Task(void* pvParameter){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]

	while(1){
		if(xSemaphoreTake(LoRa_Sem, 9700) != pdTRUE){
 80027c0:	4b5d      	ldr	r3, [pc, #372]	; (8002938 <LORA_Task+0x180>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f242 51e4 	movw	r1, #9700	; 0x25e4
 80027c8:	4618      	mov	r0, r3
 80027ca:	f005 fd3b 	bl	8008244 <xQueueSemaphoreTake>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d016      	beq.n	8002802 <LORA_Task+0x4a>
			char *info = pvPortMalloc(50*sizeof(char));
 80027d4:	2032      	movs	r0, #50	; 0x32
 80027d6:	f007 f861 	bl	800989c <pvPortMalloc>
 80027da:	60b8      	str	r0, [r7, #8]
			sprintf(info, "Unable to acquire LoRa semaphore !!!\r\n");
 80027dc:	4957      	ldr	r1, [pc, #348]	; (800293c <LORA_Task+0x184>)
 80027de:	68b8      	ldr	r0, [r7, #8]
 80027e0:	f008 f9de 	bl	800aba0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 0xffff);
 80027e4:	68b8      	ldr	r0, [r7, #8]
 80027e6:	f7fd fcb3 	bl	8000150 <strlen>
 80027ea:	4603      	mov	r3, r0
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4852      	ldr	r0, [pc, #328]	; (8002940 <LORA_Task+0x188>)
 80027f6:	f004 fcfb 	bl	80071f0 <HAL_UART_Transmit>
			vPortFree(info);
 80027fa:	68b8      	ldr	r0, [r7, #8]
 80027fc:	f007 f912 	bl	8009a24 <vPortFree>
 8002800:	e7de      	b.n	80027c0 <LORA_Task+0x8>
		}
		else{
			char *info = pvPortMalloc(50*sizeof(char));
 8002802:	2032      	movs	r0, #50	; 0x32
 8002804:	f007 f84a 	bl	800989c <pvPortMalloc>
 8002808:	60f8      	str	r0, [r7, #12]
			sprintf(info, "Button push\r\n");
 800280a:	494e      	ldr	r1, [pc, #312]	; (8002944 <LORA_Task+0x18c>)
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f008 f9c7 	bl	800aba0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 0xffff);
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7fd fc9c 	bl	8000150 <strlen>
 8002818:	4603      	mov	r3, r0
 800281a:	b29a      	uxth	r2, r3
 800281c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	4847      	ldr	r0, [pc, #284]	; (8002940 <LORA_Task+0x188>)
 8002824:	f004 fce4 	bl	80071f0 <HAL_UART_Transmit>
			vPortFree(info);
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f007 f8fb 	bl	8009a24 <vPortFree>
	//		{
	//			if (TxBuffer[i] < 16) strcat(pckt_str, "0");
	//			strcat(pckt_str, itoa(TxBuffer[i], pckt_buffer, 16));
	//			strcat(pckt_str, " ");
	//		}
			sprintf(TxBuffer, "HelloHelloHello");
 800282e:	4946      	ldr	r1, [pc, #280]	; (8002948 <LORA_Task+0x190>)
 8002830:	4846      	ldr	r0, [pc, #280]	; (800294c <LORA_Task+0x194>)
 8002832:	f008 f9b5 	bl	800aba0 <siprintf>
			HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);	//PC13 High
 8002836:	2200      	movs	r2, #0
 8002838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800283c:	4844      	ldr	r0, [pc, #272]	; (8002950 <LORA_Task+0x198>)
 800283e:	f001 ff1a 	bl	8004676 <HAL_GPIO_WritePin>
			LoRa_transmit(&myLoRa, TxBuffer, 24, 2500);
 8002842:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002846:	2218      	movs	r2, #24
 8002848:	4940      	ldr	r1, [pc, #256]	; (800294c <LORA_Task+0x194>)
 800284a:	4842      	ldr	r0, [pc, #264]	; (8002954 <LORA_Task+0x19c>)
 800284c:	f7ff f82f 	bl	80018ae <LoRa_transmit>
			info = pvPortMalloc(100*sizeof(char));
 8002850:	2064      	movs	r0, #100	; 0x64
 8002852:	f007 f823 	bl	800989c <pvPortMalloc>
 8002856:	60f8      	str	r0, [r7, #12]
			sprintf(info, "Packet size: %d ,Send packet.. \r\n", sizeof(TxBuffer)/sizeof(TxBuffer[0]));
 8002858:	2218      	movs	r2, #24
 800285a:	493f      	ldr	r1, [pc, #252]	; (8002958 <LORA_Task+0x1a0>)
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f008 f99f 	bl	800aba0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)info, strlen(info), 0xffff);
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7fd fc74 	bl	8000150 <strlen>
 8002868:	4603      	mov	r3, r0
 800286a:	b29a      	uxth	r2, r3
 800286c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	4833      	ldr	r0, [pc, #204]	; (8002940 <LORA_Task+0x188>)
 8002874:	f004 fcbc 	bl	80071f0 <HAL_UART_Transmit>
			vPortFree(info);
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f007 f8d3 	bl	8009a24 <vPortFree>
			HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);	//PC13 Low
 800287e:	2201      	movs	r2, #1
 8002880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002884:	4832      	ldr	r0, [pc, #200]	; (8002950 <LORA_Task+0x198>)
 8002886:	f001 fef6 	bl	8004676 <HAL_GPIO_WritePin>

			HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800288a:	2200      	movs	r2, #0
 800288c:	4933      	ldr	r1, [pc, #204]	; (800295c <LORA_Task+0x1a4>)
 800288e:	4834      	ldr	r0, [pc, #208]	; (8002960 <LORA_Task+0x1a8>)
 8002890:	f002 fdfe 	bl	8005490 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002894:	2200      	movs	r2, #0
 8002896:	4933      	ldr	r1, [pc, #204]	; (8002964 <LORA_Task+0x1ac>)
 8002898:	4831      	ldr	r0, [pc, #196]	; (8002960 <LORA_Task+0x1a8>)
 800289a:	f002 ff87 	bl	80057ac <HAL_RTC_GetDate>

			info = pvPortMalloc(50*sizeof(char));
 800289e:	2032      	movs	r0, #50	; 0x32
 80028a0:	f006 fffc 	bl	800989c <pvPortMalloc>
 80028a4:	60f8      	str	r0, [r7, #12]
			sprintf(info,"RTC time: %02d:%02d:%02d \r\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <LORA_Task+0x1a4>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <LORA_Task+0x1a4>)
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	4619      	mov	r1, r3
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <LORA_Task+0x1a4>)
 80028b4:	789b      	ldrb	r3, [r3, #2]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	460b      	mov	r3, r1
 80028ba:	492b      	ldr	r1, [pc, #172]	; (8002968 <LORA_Task+0x1b0>)
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f008 f96f 	bl	800aba0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)info, strlen(info), 0xffff);
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7fd fc44 	bl	8000150 <strlen>
 80028c8:	4603      	mov	r3, r0
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	481b      	ldr	r0, [pc, #108]	; (8002940 <LORA_Task+0x188>)
 80028d4:	f004 fc8c 	bl	80071f0 <HAL_UART_Transmit>
			vPortFree(info);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f007 f8a3 	bl	8009a24 <vPortFree>

			info = pvPortMalloc(50*sizeof(char));
 80028de:	2032      	movs	r0, #50	; 0x32
 80028e0:	f006 ffdc 	bl	800989c <pvPortMalloc>
 80028e4:	60f8      	str	r0, [r7, #12]
			sprintf(info,"RTC date: %02d-%02d-%04d \r\n", gDate.Month, gDate.Date, 2000+gDate.Year);
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <LORA_Task+0x1ac>)
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <LORA_Task+0x1ac>)
 80028ee:	789b      	ldrb	r3, [r3, #2]
 80028f0:	4619      	mov	r1, r3
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <LORA_Task+0x1ac>)
 80028f4:	78db      	ldrb	r3, [r3, #3]
 80028f6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	491b      	ldr	r1, [pc, #108]	; (800296c <LORA_Task+0x1b4>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f008 f94d 	bl	800aba0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)info, strlen(info), 0xffff);
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7fd fc22 	bl	8000150 <strlen>
 800290c:	4603      	mov	r3, r0
 800290e:	b29a      	uxth	r2, r3
 8002910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002914:	68f9      	ldr	r1, [r7, #12]
 8002916:	480a      	ldr	r0, [pc, #40]	; (8002940 <LORA_Task+0x188>)
 8002918:	f004 fc6a 	bl	80071f0 <HAL_UART_Transmit>
			vPortFree(info);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f007 f881 	bl	8009a24 <vPortFree>

			vTaskDelay(500);
 8002922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002926:	f005 ffb9 	bl	800889c <vTaskDelay>
			HAL_GPIO_WritePin(OUTPUT_BTN_GPIO_Port, OUTPUT_BTN_Pin, GPIO_PIN_RESET);
 800292a:	2200      	movs	r2, #0
 800292c:	2108      	movs	r1, #8
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <LORA_Task+0x1b8>)
 8002930:	f001 fea1 	bl	8004676 <HAL_GPIO_WritePin>
		if(xSemaphoreTake(LoRa_Sem, 9700) != pdTRUE){
 8002934:	e744      	b.n	80027c0 <LORA_Task+0x8>
 8002936:	bf00      	nop
 8002938:	200006ac 	.word	0x200006ac
 800293c:	0800f2b8 	.word	0x0800f2b8
 8002940:	200005d0 	.word	0x200005d0
 8002944:	0800f2e0 	.word	0x0800f2e0
 8002948:	0800f2f0 	.word	0x0800f2f0
 800294c:	200006dc 	.word	0x200006dc
 8002950:	40011000 	.word	0x40011000
 8002954:	200006b0 	.word	0x200006b0
 8002958:	0800f300 	.word	0x0800f300
 800295c:	20000890 	.word	0x20000890
 8002960:	200004d4 	.word	0x200004d4
 8002964:	20000894 	.word	0x20000894
 8002968:	0800f324 	.word	0x0800f324
 800296c:	0800f340 	.word	0x0800f340
 8002970:	40010c00 	.word	0x40010c00

08002974 <DHT22_Task>:
		}

	}
}
void DHT22_Task(void* pvParameter){
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af04      	add	r7, sp, #16
 800297a:	6078      	str	r0, [r7, #4]
	int index = 1;
 800297c:	2301      	movs	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
	while(1){
		if(xSemaphoreTake(DHT_Sem, 2500) != pdTRUE){
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <DHT22_Task+0x98>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002988:	4618      	mov	r0, r3
 800298a:	f005 fc5b 	bl	8008244 <xQueueSemaphoreTake>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d006      	beq.n	80029a2 <DHT22_Task+0x2e>
			HAL_UART_Transmit(&huart1, (uint8_t*)"Unable to acquire DHT semaphore\r\n", 35, 100);
 8002994:	2364      	movs	r3, #100	; 0x64
 8002996:	2223      	movs	r2, #35	; 0x23
 8002998:	491d      	ldr	r1, [pc, #116]	; (8002a10 <DHT22_Task+0x9c>)
 800299a:	481e      	ldr	r0, [pc, #120]	; (8002a14 <DHT22_Task+0xa0>)
 800299c:	f004 fc28 	bl	80071f0 <HAL_UART_Transmit>
 80029a0:	e7ee      	b.n	8002980 <DHT22_Task+0xc>
		}
		else{
			if(DHT22_Get_Data(&Temperature, &Humidity) == 1){
 80029a2:	491d      	ldr	r1, [pc, #116]	; (8002a18 <DHT22_Task+0xa4>)
 80029a4:	481d      	ldr	r0, [pc, #116]	; (8002a1c <DHT22_Task+0xa8>)
 80029a6:	f7fe fc83 	bl	80012b0 <DHT22_Get_Data>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d1e7      	bne.n	8002980 <DHT22_Task+0xc>
				char *info = pvPortMalloc(50*sizeof(char));
 80029b0:	2032      	movs	r0, #50	; 0x32
 80029b2:	f006 ff73 	bl	800989c <pvPortMalloc>
 80029b6:	60b8      	str	r0, [r7, #8]
				sprintf (info, "%d. Temp = %.2f C\t RH = %.2f%% \r\n",index++, Temperature, Humidity);
 80029b8:	68fe      	ldr	r6, [r7, #12]
 80029ba:	1c73      	adds	r3, r6, #1
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <DHT22_Task+0xa8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fd30 	bl	8000428 <__aeabi_f2d>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <DHT22_Task+0xa4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fd29 	bl	8000428 <__aeabi_f2d>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029de:	e9cd 4500 	strd	r4, r5, [sp]
 80029e2:	4632      	mov	r2, r6
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <DHT22_Task+0xac>)
 80029e6:	68b8      	ldr	r0, [r7, #8]
 80029e8:	f008 f8da 	bl	800aba0 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)info, strlen(info), 0xffff);
 80029ec:	68b8      	ldr	r0, [r7, #8]
 80029ee:	f7fd fbaf 	bl	8000150 <strlen>
 80029f2:	4603      	mov	r3, r0
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <DHT22_Task+0xa0>)
 80029fe:	f004 fbf7 	bl	80071f0 <HAL_UART_Transmit>
				vPortFree(info);
 8002a02:	68b8      	ldr	r0, [r7, #8]
 8002a04:	f007 f80e 	bl	8009a24 <vPortFree>
		if(xSemaphoreTake(DHT_Sem, 2500) != pdTRUE){
 8002a08:	e7ba      	b.n	8002980 <DHT22_Task+0xc>
 8002a0a:	bf00      	nop
 8002a0c:	200006a8 	.word	0x200006a8
 8002a10:	0800f35c 	.word	0x0800f35c
 8002a14:	200005d0 	.word	0x200005d0
 8002a18:	2000072c 	.word	0x2000072c
 8002a1c:	20000728 	.word	0x20000728
 8002a20:	0800f380 	.word	0x0800f380

08002a24 <GPSR_Task>:
			}
		}
	}
}

void GPSR_Task(void* pvParameter){
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af06      	add	r7, sp, #24
 8002a2a:	6078      	str	r0, [r7, #4]
	while(1){
		if (Wait_for("GGA") == 1){
 8002a2c:	488c      	ldr	r0, [pc, #560]	; (8002c60 <GPSR_Task+0x23c>)
 8002a2e:	f001 f993 	bl	8003d58 <Wait_for>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d115      	bne.n	8002a64 <GPSR_Task+0x40>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the GGA is being received
 8002a38:	4b8a      	ldr	r3, [pc, #552]	; (8002c64 <GPSR_Task+0x240>)
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	601a      	str	r2, [r3, #0]

			Copy_upto("*", GGA);
 8002a40:	4989      	ldr	r1, [pc, #548]	; (8002c68 <GPSR_Task+0x244>)
 8002a42:	488a      	ldr	r0, [pc, #552]	; (8002c6c <GPSR_Task+0x248>)
 8002a44:	f001 f908 	bl	8003c58 <Copy_upto>
			if(decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2; // 2 indicates the data is valid
 8002a48:	4989      	ldr	r1, [pc, #548]	; (8002c70 <GPSR_Task+0x24c>)
 8002a4a:	4887      	ldr	r0, [pc, #540]	; (8002c68 <GPSR_Task+0x244>)
 8002a4c:	f7ff f82c 	bl	8001aa8 <decodeGGA>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <GPSR_Task+0x3a>
 8002a56:	4b87      	ldr	r3, [pc, #540]	; (8002c74 <GPSR_Task+0x250>)
 8002a58:	2202      	movs	r2, #2
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e002      	b.n	8002a64 <GPSR_Task+0x40>
			else flagGGA = 1;
 8002a5e:	4b85      	ldr	r3, [pc, #532]	; (8002c74 <GPSR_Task+0x250>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
		}
		if (Wait_for("RMC") == 1){
 8002a64:	4884      	ldr	r0, [pc, #528]	; (8002c78 <GPSR_Task+0x254>)
 8002a66:	f001 f977 	bl	8003d58 <Wait_for>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d115      	bne.n	8002a9c <GPSR_Task+0x78>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the RMC is being received
 8002a70:	4b7c      	ldr	r3, [pc, #496]	; (8002c64 <GPSR_Task+0x240>)
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	601a      	str	r2, [r3, #0]

			Copy_upto("*", RMC);
 8002a78:	4980      	ldr	r1, [pc, #512]	; (8002c7c <GPSR_Task+0x258>)
 8002a7a:	487c      	ldr	r0, [pc, #496]	; (8002c6c <GPSR_Task+0x248>)
 8002a7c:	f001 f8ec 	bl	8003c58 <Copy_upto>
			if(decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2; // 2 indicates the data is valid
 8002a80:	497f      	ldr	r1, [pc, #508]	; (8002c80 <GPSR_Task+0x25c>)
 8002a82:	487e      	ldr	r0, [pc, #504]	; (8002c7c <GPSR_Task+0x258>)
 8002a84:	f7ff fbae 	bl	80021e4 <decodeRMC>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <GPSR_Task+0x72>
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	; (8002c84 <GPSR_Task+0x260>)
 8002a90:	2202      	movs	r2, #2
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e002      	b.n	8002a9c <GPSR_Task+0x78>
			else flagRMC = 1;
 8002a96:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <GPSR_Task+0x260>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
		}
		if ((flagGGA = 2) | (flagRMC = 2)){
 8002a9c:	4b75      	ldr	r3, [pc, #468]	; (8002c74 <GPSR_Task+0x250>)
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	4b78      	ldr	r3, [pc, #480]	; (8002c84 <GPSR_Task+0x260>)
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	601a      	str	r2, [r3, #0]
			// print the time format
			sprintf(lcdBuffer, "%02d:%02d:%02d, %02d-%02d-%04d\r\n", gpsData.ggastruct.tim.hour, \
 8002aa8:	4b71      	ldr	r3, [pc, #452]	; (8002c70 <GPSR_Task+0x24c>)
 8002aaa:	691c      	ldr	r4, [r3, #16]
 8002aac:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <GPSR_Task+0x24c>)
 8002aae:	695d      	ldr	r5, [r3, #20]
 8002ab0:	4b6f      	ldr	r3, [pc, #444]	; (8002c70 <GPSR_Task+0x24c>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <GPSR_Task+0x24c>)
 8002ab6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ab8:	496d      	ldr	r1, [pc, #436]	; (8002c70 <GPSR_Task+0x24c>)
 8002aba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
				  gpsData.ggastruct.tim.min, gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Mon, \
				  gpsData.rmcstruct.date.Day, 2000 + gpsData.rmcstruct.date.Yr);
 8002abc:	486c      	ldr	r0, [pc, #432]	; (8002c70 <GPSR_Task+0x24c>)
 8002abe:	6b40      	ldr	r0, [r0, #52]	; 0x34
			sprintf(lcdBuffer, "%02d:%02d:%02d, %02d-%02d-%04d\r\n", gpsData.ggastruct.tim.hour, \
 8002ac0:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8002ac4:	9003      	str	r0, [sp, #12]
 8002ac6:	9102      	str	r1, [sp, #8]
 8002ac8:	9201      	str	r2, [sp, #4]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	462b      	mov	r3, r5
 8002ace:	4622      	mov	r2, r4
 8002ad0:	496d      	ldr	r1, [pc, #436]	; (8002c88 <GPSR_Task+0x264>)
 8002ad2:	486e      	ldr	r0, [pc, #440]	; (8002c8c <GPSR_Task+0x268>)
 8002ad4:	f008 f864 	bl	800aba0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)lcdBuffer, strlen(lcdBuffer), 0xffff);
 8002ad8:	486c      	ldr	r0, [pc, #432]	; (8002c8c <GPSR_Task+0x268>)
 8002ada:	f7fd fb39 	bl	8000150 <strlen>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae6:	4969      	ldr	r1, [pc, #420]	; (8002c8c <GPSR_Task+0x268>)
 8002ae8:	4869      	ldr	r0, [pc, #420]	; (8002c90 <GPSR_Task+0x26c>)
 8002aea:	f004 fb81 	bl	80071f0 <HAL_UART_Transmit>
			memset(lcdBuffer, '\0', strlen(lcdBuffer));
 8002aee:	4867      	ldr	r0, [pc, #412]	; (8002c8c <GPSR_Task+0x268>)
 8002af0:	f7fd fb2e 	bl	8000150 <strlen>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	2100      	movs	r1, #0
 8002afa:	4864      	ldr	r0, [pc, #400]	; (8002c8c <GPSR_Task+0x268>)
 8002afc:	f008 f8b3 	bl	800ac66 <memset>
			// Convert to google map format
			lat_afterPoint = gpsData.ggastruct.lcation.latitude - (int)(gpsData.ggastruct.lcation.latitude);
 8002b00:	4b5b      	ldr	r3, [pc, #364]	; (8002c70 <GPSR_Task+0x24c>)
 8002b02:	681c      	ldr	r4, [r3, #0]
 8002b04:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <GPSR_Task+0x24c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe fa8b 	bl	8001024 <__aeabi_f2iz>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe f8e3 	bl	8000cdc <__aeabi_i2f>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7fe f828 	bl	8000b70 <__aeabi_fsub>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <GPSR_Task+0x270>)
 8002b26:	601a      	str	r2, [r3, #0]
			fix_latitude = (int)(gpsData.ggastruct.lcation.latitude) + lat_afterPoint/60*100;
 8002b28:	4b51      	ldr	r3, [pc, #324]	; (8002c70 <GPSR_Task+0x24c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fa79 	bl	8001024 <__aeabi_f2iz>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe f8d1 	bl	8000cdc <__aeabi_i2f>
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	4b55      	ldr	r3, [pc, #340]	; (8002c94 <GPSR_Task+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4955      	ldr	r1, [pc, #340]	; (8002c98 <GPSR_Task+0x274>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f9d2 	bl	8000eec <__aeabi_fdiv>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4954      	ldr	r1, [pc, #336]	; (8002c9c <GPSR_Task+0x278>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe f919 	bl	8000d84 <__aeabi_fmul>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4619      	mov	r1, r3
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7fe f80c 	bl	8000b74 <__addsf3>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <GPSR_Task+0x27c>)
 8002b62:	601a      	str	r2, [r3, #0]
			lon_afterPoint = gpsData.ggastruct.lcation.longitude - (int)(gpsData.ggastruct.lcation.longitude);
 8002b64:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <GPSR_Task+0x24c>)
 8002b66:	689c      	ldr	r4, [r3, #8]
 8002b68:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <GPSR_Task+0x24c>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fa59 	bl	8001024 <__aeabi_f2iz>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe f8b1 	bl	8000cdc <__aeabi_i2f>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f7fd fff6 	bl	8000b70 <__aeabi_fsub>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <GPSR_Task+0x280>)
 8002b8a:	601a      	str	r2, [r3, #0]
			fix_longitude = (int)(gpsData.ggastruct.lcation.longitude) + lon_afterPoint/60*100;
 8002b8c:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <GPSR_Task+0x24c>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fa47 	bl	8001024 <__aeabi_f2iz>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe f89f 	bl	8000cdc <__aeabi_i2f>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <GPSR_Task+0x280>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	493c      	ldr	r1, [pc, #240]	; (8002c98 <GPSR_Task+0x274>)
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe f9a0 	bl	8000eec <__aeabi_fdiv>
 8002bac:	4603      	mov	r3, r0
 8002bae:	493b      	ldr	r1, [pc, #236]	; (8002c9c <GPSR_Task+0x278>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe f8e7 	bl	8000d84 <__aeabi_fmul>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7fd ffda 	bl	8000b74 <__addsf3>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <GPSR_Task+0x284>)
 8002bc6:	601a      	str	r2, [r3, #0]
			// print the location format
			sprintf(lcdBuffer, "LAT: %.4f%c, LON: %.4f%c\r\n", fix_latitude, \
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <GPSR_Task+0x27c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fc2b 	bl	8000428 <__aeabi_f2d>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	460d      	mov	r5, r1
				  gpsData.ggastruct.lcation.NS, fix_longitude, gpsData.ggastruct.lcation.EW);
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <GPSR_Task+0x24c>)
 8002bd8:	791b      	ldrb	r3, [r3, #4]
			sprintf(lcdBuffer, "LAT: %.4f%c, LON: %.4f%c\r\n", fix_latitude, \
 8002bda:	461e      	mov	r6, r3
 8002bdc:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <GPSR_Task+0x284>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fc21 	bl	8000428 <__aeabi_f2d>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
				  gpsData.ggastruct.lcation.NS, fix_longitude, gpsData.ggastruct.lcation.EW);
 8002bea:	4921      	ldr	r1, [pc, #132]	; (8002c70 <GPSR_Task+0x24c>)
 8002bec:	7b09      	ldrb	r1, [r1, #12]
			sprintf(lcdBuffer, "LAT: %.4f%c, LON: %.4f%c\r\n", fix_latitude, \
 8002bee:	9104      	str	r1, [sp, #16]
 8002bf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bf4:	9600      	str	r6, [sp, #0]
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	492c      	ldr	r1, [pc, #176]	; (8002cac <GPSR_Task+0x288>)
 8002bfc:	4823      	ldr	r0, [pc, #140]	; (8002c8c <GPSR_Task+0x268>)
 8002bfe:	f007 ffcf 	bl	800aba0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)lcdBuffer, strlen(lcdBuffer), 0xffff);
 8002c02:	4822      	ldr	r0, [pc, #136]	; (8002c8c <GPSR_Task+0x268>)
 8002c04:	f7fd faa4 	bl	8000150 <strlen>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c10:	491e      	ldr	r1, [pc, #120]	; (8002c8c <GPSR_Task+0x268>)
 8002c12:	481f      	ldr	r0, [pc, #124]	; (8002c90 <GPSR_Task+0x26c>)
 8002c14:	f004 faec 	bl	80071f0 <HAL_UART_Transmit>
			memset(lcdBuffer, '\0', strlen(lcdBuffer));
 8002c18:	481c      	ldr	r0, [pc, #112]	; (8002c8c <GPSR_Task+0x268>)
 8002c1a:	f7fd fa99 	bl	8000150 <strlen>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	2100      	movs	r1, #0
 8002c24:	4819      	ldr	r0, [pc, #100]	; (8002c8c <GPSR_Task+0x268>)
 8002c26:	f008 f81e 	bl	800ac66 <memset>
			// Correct the RTC time
		}
		else if((flagGGA = 1) | (flagRMC = 1)){
			HAL_UART_Transmit(&huart1, (uint8_t *)"NO FIX YET !!\r\n", 20, 0xffff);
		}
		if (VCCTimeout <= 0){
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <GPSR_Task+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	dc11      	bgt.n	8002c56 <GPSR_Task+0x232>
			VCCTimeout = 5000;  // Reset the timeout
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <GPSR_Task+0x240>)
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	601a      	str	r2, [r3, #0]

			//reset flags
			flagGGA =flagRMC =0;
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <GPSR_Task+0x260>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <GPSR_Task+0x260>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <GPSR_Task+0x250>)
 8002c46:	6013      	str	r3, [r2, #0]

			// You are here means the VCC is less, or maybe there is some connection issue
			// Check the VCC, also you can try connecting to the external 5V
			HAL_UART_Transmit(&huart1, (uint8_t *)"VCC Issue, Check Connection\r\n", 20, 0xffff);
 8002c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4c:	2214      	movs	r2, #20
 8002c4e:	4918      	ldr	r1, [pc, #96]	; (8002cb0 <GPSR_Task+0x28c>)
 8002c50:	480f      	ldr	r0, [pc, #60]	; (8002c90 <GPSR_Task+0x26c>)
 8002c52:	f004 facd 	bl	80071f0 <HAL_UART_Transmit>
		}
		vTaskDelay(2000);
 8002c56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c5a:	f005 fe1f 	bl	800889c <vTaskDelay>
		if (Wait_for("GGA") == 1){
 8002c5e:	e6e5      	b.n	8002a2c <GPSR_Task+0x8>
 8002c60:	0800f3a4 	.word	0x0800f3a4
 8002c64:	20000870 	.word	0x20000870
 8002c68:	20000730 	.word	0x20000730
 8002c6c:	0800f3a8 	.word	0x0800f3a8
 8002c70:	200007f8 	.word	0x200007f8
 8002c74:	20000874 	.word	0x20000874
 8002c78:	0800f3ac 	.word	0x0800f3ac
 8002c7c:	20000794 	.word	0x20000794
 8002c80:	20000824 	.word	0x20000824
 8002c84:	20000878 	.word	0x20000878
 8002c88:	0800f3b0 	.word	0x0800f3b0
 8002c8c:	2000083c 	.word	0x2000083c
 8002c90:	200005d0 	.word	0x200005d0
 8002c94:	20000884 	.word	0x20000884
 8002c98:	42700000 	.word	0x42700000
 8002c9c:	42c80000 	.word	0x42c80000
 8002ca0:	2000087c 	.word	0x2000087c
 8002ca4:	20000888 	.word	0x20000888
 8002ca8:	20000880 	.word	0x20000880
 8002cac:	0800f3d4 	.word	0x0800f3d4
 8002cb0:	0800f3f0 	.word	0x0800f3f0

08002cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cb4:	b5b0      	push	{r4, r5, r7, lr}
 8002cb6:	b090      	sub	sp, #64	; 0x40
 8002cb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cba:	f001 f959 	bl	8003f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cbe:	f000 f8f3 	bl	8002ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cc2:	f000 faed 	bl	80032a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002cc6:	f000 f997 	bl	8002ff8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002cca:	f000 fa6b 	bl	80031a4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002cce:	f000 f9c9 	bl	8003064 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002cd2:	f000 fa19 	bl	8003108 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002cd6:	f000 fa8f 	bl	80031f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002cda:	f000 fab7 	bl	800324c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8002cde:	f000 f941 	bl	8002f64 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	// --LoRa initialization--
	myLoRa = newLoRa();
 8002ce2:	4c5c      	ldr	r4, [pc, #368]	; (8002e54 <main+0x1a0>)
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fb62 	bl	80013b0 <newLoRa>
 8002cec:	4625      	mov	r5, r4
 8002cee:	463c      	mov	r4, r7
 8002cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002cfc:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port         = NSS_GPIO_Port;
 8002d00:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <main+0x1a0>)
 8002d02:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <main+0x1a4>)
 8002d04:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin          = NSS_Pin;
 8002d06:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <main+0x1a0>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port      = RST_GPIO_Port;
 8002d0c:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <main+0x1a0>)
 8002d0e:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <main+0x1a4>)
 8002d10:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin       = RST_Pin;
 8002d12:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <main+0x1a0>)
 8002d14:	2202      	movs	r2, #2
 8002d16:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8002d18:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <main+0x1a0>)
 8002d1a:	4a50      	ldr	r2, [pc, #320]	; (8002e5c <main+0x1a8>)
 8002d1c:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin        = DIO0_Pin;
 8002d1e:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <main+0x1a0>)
 8002d20:	2210      	movs	r2, #16
 8002d22:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx           = &hspi1;
 8002d24:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <main+0x1a0>)
 8002d26:	4a4e      	ldr	r2, [pc, #312]	; (8002e60 <main+0x1ac>)
 8002d28:	619a      	str	r2, [r3, #24]

	myLoRa.frequency             = 924400;          // default = 433 MHz
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <main+0x1a0>)
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	; (8002e64 <main+0x1b0>)
 8002d2e:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_12;           	// default = SF_7
 8002d30:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <main+0x1a0>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <main+0x1a0>)
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8002d40:	4b44      	ldr	r3, [pc, #272]	; (8002e54 <main+0x1a0>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power                 = POWER_20db;      // default = 20db
 8002d48:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <main+0x1a0>)
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8002d50:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <main+0x1a0>)
 8002d52:	2282      	movs	r2, #130	; 0x82
 8002d54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//myLoRa.preamble = 10;

	uint16_t LoRa_status = LoRa_init(&myLoRa);
 8002d58:	483e      	ldr	r0, [pc, #248]	; (8002e54 <main+0x1a0>)
 8002d5a:	f7fe fe00 	bl	800195e <LoRa_init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	86fb      	strh	r3, [r7, #54]	; 0x36
	sprintf(message, "LoRa initialization ..");
 8002d62:	4941      	ldr	r1, [pc, #260]	; (8002e68 <main+0x1b4>)
 8002d64:	4841      	ldr	r0, [pc, #260]	; (8002e6c <main+0x1b8>)
 8002d66:	f007 ff1b 	bl	800aba0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), 0xffff);
 8002d6a:	4840      	ldr	r0, [pc, #256]	; (8002e6c <main+0x1b8>)
 8002d6c:	f7fd f9f0 	bl	8000150 <strlen>
 8002d70:	4603      	mov	r3, r0
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d78:	493c      	ldr	r1, [pc, #240]	; (8002e6c <main+0x1b8>)
 8002d7a:	483d      	ldr	r0, [pc, #244]	; (8002e70 <main+0x1bc>)
 8002d7c:	f004 fa38 	bl	80071f0 <HAL_UART_Transmit>
	memset(message, NULL, strlen(message));
 8002d80:	483a      	ldr	r0, [pc, #232]	; (8002e6c <main+0x1b8>)
 8002d82:	f7fd f9e5 	bl	8000150 <strlen>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4837      	ldr	r0, [pc, #220]	; (8002e6c <main+0x1b8>)
 8002d8e:	f007 ff6a 	bl	800ac66 <memset>
	if(LoRa_status == LORA_OK){
 8002d92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d94:	2bc8      	cmp	r3, #200	; 0xc8
 8002d96:	d117      	bne.n	8002dc8 <main+0x114>
	  sprintf(message, " success !\r\n");
 8002d98:	4936      	ldr	r1, [pc, #216]	; (8002e74 <main+0x1c0>)
 8002d9a:	4834      	ldr	r0, [pc, #208]	; (8002e6c <main+0x1b8>)
 8002d9c:	f007 ff00 	bl	800aba0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), 0xffff);
 8002da0:	4832      	ldr	r0, [pc, #200]	; (8002e6c <main+0x1b8>)
 8002da2:	f7fd f9d5 	bl	8000150 <strlen>
 8002da6:	4603      	mov	r3, r0
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dae:	492f      	ldr	r1, [pc, #188]	; (8002e6c <main+0x1b8>)
 8002db0:	482f      	ldr	r0, [pc, #188]	; (8002e70 <main+0x1bc>)
 8002db2:	f004 fa1d 	bl	80071f0 <HAL_UART_Transmit>
	  memset(message, NULL, strlen(message));
 8002db6:	482d      	ldr	r0, [pc, #180]	; (8002e6c <main+0x1b8>)
 8002db8:	f7fd f9ca 	bl	8000150 <strlen>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	482a      	ldr	r0, [pc, #168]	; (8002e6c <main+0x1b8>)
 8002dc4:	f007 ff4f 	bl	800ac66 <memset>
	}

	LoRa_setSyncWord(&myLoRa, 0x34); // default: 0x12
 8002dc8:	2134      	movs	r1, #52	; 0x34
 8002dca:	4822      	ldr	r0, [pc, #136]	; (8002e54 <main+0x1a0>)
 8002dcc:	f7fe fc38 	bl	8001640 <LoRa_setSyncWord>
//	mytime.minutes = 0;
//	mytime.hours = 0;
//	ds1307_set_current_time(&mytime);

	// --GPSR--
	Ringbuf_init();
 8002dd0:	f000 fe98 	bl	8003b04 <Ringbuf_init>

	DHT_Sem = xSemaphoreCreateBinary();
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f005 f949 	bl	8008070 <xQueueGenericCreate>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <main+0x1c4>)
 8002de2:	6013      	str	r3, [r2, #0]
	LoRa_Sem = xSemaphoreCreateBinary();
 8002de4:	2203      	movs	r2, #3
 8002de6:	2100      	movs	r1, #0
 8002de8:	2001      	movs	r0, #1
 8002dea:	f005 f941 	bl	8008070 <xQueueGenericCreate>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <main+0x1c8>)
 8002df2:	6013      	str	r3, [r2, #0]

	xTaskCreate(LORA_Task, "LORA", 1024, NULL, 2, NULL);
 8002df4:	2300      	movs	r3, #0
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	2302      	movs	r3, #2
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e02:	491f      	ldr	r1, [pc, #124]	; (8002e80 <main+0x1cc>)
 8002e04:	481f      	ldr	r0, [pc, #124]	; (8002e84 <main+0x1d0>)
 8002e06:	f005 fc04 	bl	8008612 <xTaskCreate>
	xTaskCreate(DHT22_Task, "DHT22", 256, NULL, 3, NULL);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	2303      	movs	r3, #3
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	2300      	movs	r3, #0
 8002e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e18:	491b      	ldr	r1, [pc, #108]	; (8002e88 <main+0x1d4>)
 8002e1a:	481c      	ldr	r0, [pc, #112]	; (8002e8c <main+0x1d8>)
 8002e1c:	f005 fbf9 	bl	8008612 <xTaskCreate>
	xTaskCreate(GPSR_Task, "GPSR", 256, NULL, 2, NULL);
 8002e20:	2300      	movs	r3, #0
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	2302      	movs	r3, #2
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2e:	4918      	ldr	r1, [pc, #96]	; (8002e90 <main+0x1dc>)
 8002e30:	4818      	ldr	r0, [pc, #96]	; (8002e94 <main+0x1e0>)
 8002e32:	f005 fbee 	bl	8008612 <xTaskCreate>

	HAL_TIM_Base_Start(&htim4);
 8002e36:	4818      	ldr	r0, [pc, #96]	; (8002e98 <main+0x1e4>)
 8002e38:	f003 fd92 	bl	8006960 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8002e3c:	4817      	ldr	r0, [pc, #92]	; (8002e9c <main+0x1e8>)
 8002e3e:	f003 fdd9 	bl	80069f4 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart3,&rx_data,1);
 8002e42:	2201      	movs	r2, #1
 8002e44:	4916      	ldr	r1, [pc, #88]	; (8002ea0 <main+0x1ec>)
 8002e46:	4817      	ldr	r0, [pc, #92]	; (8002ea4 <main+0x1f0>)
 8002e48:	f004 fa55 	bl	80072f6 <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 8002e4c:	f005 fd5a 	bl	8008904 <vTaskStartScheduler>
  /* definition and creation of LED */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <main+0x19c>
 8002e52:	bf00      	nop
 8002e54:	200006b0 	.word	0x200006b0
 8002e58:	40010c00 	.word	0x40010c00
 8002e5c:	40010800 	.word	0x40010800
 8002e60:	200004e8 	.word	0x200004e8
 8002e64:	000e1af0 	.word	0x000e1af0
 8002e68:	0800f410 	.word	0x0800f410
 8002e6c:	200006f4 	.word	0x200006f4
 8002e70:	200005d0 	.word	0x200005d0
 8002e74:	0800f428 	.word	0x0800f428
 8002e78:	200006a8 	.word	0x200006a8
 8002e7c:	200006ac 	.word	0x200006ac
 8002e80:	0800f438 	.word	0x0800f438
 8002e84:	080027b9 	.word	0x080027b9
 8002e88:	0800f440 	.word	0x0800f440
 8002e8c:	08002975 	.word	0x08002975
 8002e90:	0800f448 	.word	0x0800f448
 8002e94:	08002a25 	.word	0x08002a25
 8002e98:	20000588 	.word	0x20000588
 8002e9c:	20000540 	.word	0x20000540
 8002ea0:	2000088c 	.word	0x2000088c
 8002ea4:	20000660 	.word	0x20000660

08002ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b094      	sub	sp, #80	; 0x50
 8002eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb2:	2228      	movs	r2, #40	; 0x28
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f007 fed5 	bl	800ac66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ed8:	2309      	movs	r3, #9
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002eea:	2301      	movs	r3, #1
 8002eec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ef8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002efc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fbf4 	bl	80046f0 <HAL_RCC_OscConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002f0e:	f000 faa5 	bl	800345c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f12:	230f      	movs	r3, #15
 8002f14:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fe60 	bl	8004bf4 <HAL_RCC_ClockConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f3a:	f000 fa8f 	bl	800345c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f46:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 f810 	bl	8004f70 <HAL_RCCEx_PeriphCLKConfig>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002f56:	f000 fa81 	bl	800345c <Error_Handler>
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	3750      	adds	r7, #80	; 0x50
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	460a      	mov	r2, r1
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	460a      	mov	r2, r1
 8002f74:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002f76:	2300      	movs	r3, #0
 8002f78:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <MX_RTC_Init+0x8c>)
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <MX_RTC_Init+0x90>)
 8002f7e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <MX_RTC_Init+0x8c>)
 8002f82:	f04f 32ff 	mov.w	r2, #4294967295
 8002f86:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <MX_RTC_Init+0x8c>)
 8002f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f8e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f90:	4817      	ldr	r0, [pc, #92]	; (8002ff0 <MX_RTC_Init+0x8c>)
 8002f92:	f002 f959 	bl	8005248 <HAL_RTC_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002f9c:	f000 fa5e 	bl	800345c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8002fa0:	2311      	movs	r3, #17
 8002fa2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x22;
 8002fa4:	2322      	movs	r3, #34	; 0x22
 8002fa6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x33;
 8002fa8:	2333      	movs	r3, #51	; 0x33
 8002faa:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002fac:	1d3b      	adds	r3, r7, #4
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <MX_RTC_Init+0x8c>)
 8002fb4:	f002 f9d4 	bl	8005360 <HAL_RTC_SetTime>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002fbe:	f000 fa4d 	bl	800345c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JULY;
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x18;
 8002fca:	2318      	movs	r3, #24
 8002fcc:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 8002fce:	2323      	movs	r3, #35	; 0x23
 8002fd0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <MX_RTC_Init+0x8c>)
 8002fda:	f002 fb31 	bl	8005640 <HAL_RTC_SetDate>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002fe4:	f000 fa3a 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	200004d4 	.word	0x200004d4
 8002ff4:	40002800 	.word	0x40002800

08002ff8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ffc:	4b17      	ldr	r3, [pc, #92]	; (800305c <MX_SPI1_Init+0x64>)
 8002ffe:	4a18      	ldr	r2, [pc, #96]	; (8003060 <MX_SPI1_Init+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003002:	4b16      	ldr	r3, [pc, #88]	; (800305c <MX_SPI1_Init+0x64>)
 8003004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <MX_SPI1_Init+0x64>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <MX_SPI1_Init+0x64>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <MX_SPI1_Init+0x64>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <MX_SPI1_Init+0x64>)
 800301e:	2200      	movs	r2, #0
 8003020:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_SPI1_Init+0x64>)
 8003024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003028:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <MX_SPI1_Init+0x64>)
 800302c:	2210      	movs	r2, #16
 800302e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <MX_SPI1_Init+0x64>)
 8003032:	2200      	movs	r2, #0
 8003034:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <MX_SPI1_Init+0x64>)
 8003038:	2200      	movs	r2, #0
 800303a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <MX_SPI1_Init+0x64>)
 800303e:	2200      	movs	r2, #0
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_SPI1_Init+0x64>)
 8003044:	220a      	movs	r2, #10
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003048:	4804      	ldr	r0, [pc, #16]	; (800305c <MX_SPI1_Init+0x64>)
 800304a:	f002 fea5 	bl	8005d98 <HAL_SPI_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003054:	f000 fa02 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}
 800305c:	200004e8 	.word	0x200004e8
 8003060:	40013000 	.word	0x40013000

08003064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306a:	f107 0308 	add.w	r3, r7, #8
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003078:	463b      	mov	r3, r7
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <MX_TIM1_Init+0x9c>)
 8003082:	4a20      	ldr	r2, [pc, #128]	; (8003104 <MX_TIM1_Init+0xa0>)
 8003084:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36000-1;
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <MX_TIM1_Init+0x9c>)
 8003088:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800308c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308e:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <MX_TIM1_Init+0x9c>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000-1;
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <MX_TIM1_Init+0x9c>)
 8003096:	f640 729f 	movw	r2, #3999	; 0xf9f
 800309a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309c:	4b18      	ldr	r3, [pc, #96]	; (8003100 <MX_TIM1_Init+0x9c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <MX_TIM1_Init+0x9c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <MX_TIM1_Init+0x9c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030ae:	4814      	ldr	r0, [pc, #80]	; (8003100 <MX_TIM1_Init+0x9c>)
 80030b0:	f003 fc06 	bl	80068c0 <HAL_TIM_Base_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80030ba:	f000 f9cf 	bl	800345c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	4619      	mov	r1, r3
 80030ca:	480d      	ldr	r0, [pc, #52]	; (8003100 <MX_TIM1_Init+0x9c>)
 80030cc:	f003 fdec 	bl	8006ca8 <HAL_TIM_ConfigClockSource>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80030d6:	f000 f9c1 	bl	800345c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030da:	2320      	movs	r3, #32
 80030dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030e2:	463b      	mov	r3, r7
 80030e4:	4619      	mov	r1, r3
 80030e6:	4806      	ldr	r0, [pc, #24]	; (8003100 <MX_TIM1_Init+0x9c>)
 80030e8:	f003 ffc2 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80030f2:	f000 f9b3 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000540 	.word	0x20000540
 8003104:	40012c00 	.word	0x40012c00

08003108 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800311c:	463b      	mov	r3, r7
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <MX_TIM4_Init+0x94>)
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <MX_TIM4_Init+0x98>)
 8003128:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <MX_TIM4_Init+0x94>)
 800312c:	2247      	movs	r2, #71	; 0x47
 800312e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <MX_TIM4_Init+0x94>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <MX_TIM4_Init+0x94>)
 8003138:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800313c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <MX_TIM4_Init+0x94>)
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <MX_TIM4_Init+0x94>)
 8003146:	2200      	movs	r2, #0
 8003148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800314a:	4814      	ldr	r0, [pc, #80]	; (800319c <MX_TIM4_Init+0x94>)
 800314c:	f003 fbb8 	bl	80068c0 <HAL_TIM_Base_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003156:	f000 f981 	bl	800345c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800315a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003160:	f107 0308 	add.w	r3, r7, #8
 8003164:	4619      	mov	r1, r3
 8003166:	480d      	ldr	r0, [pc, #52]	; (800319c <MX_TIM4_Init+0x94>)
 8003168:	f003 fd9e 	bl	8006ca8 <HAL_TIM_ConfigClockSource>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003172:	f000 f973 	bl	800345c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800317e:	463b      	mov	r3, r7
 8003180:	4619      	mov	r1, r3
 8003182:	4806      	ldr	r0, [pc, #24]	; (800319c <MX_TIM4_Init+0x94>)
 8003184:	f003 ff74 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800318e:	f000 f965 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000588 	.word	0x20000588
 80031a0:	40000800 	.word	0x40000800

080031a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <MX_USART1_UART_Init+0x50>)
 80031ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031ca:	220c      	movs	r2, #12
 80031cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031da:	4805      	ldr	r0, [pc, #20]	; (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031dc:	f003 ffb8 	bl	8007150 <HAL_UART_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031e6:	f000 f939 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200005d0 	.word	0x200005d0
 80031f4:	40013800 	.word	0x40013800

080031f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <MX_USART2_UART_Init+0x50>)
 8003200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003204:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 800321e:	220c      	movs	r2, #12
 8003220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800322e:	4805      	ldr	r0, [pc, #20]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003230:	f003 ff8e 	bl	8007150 <HAL_UART_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800323a:	f000 f90f 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000618 	.word	0x20000618
 8003248:	40004400 	.word	0x40004400

0800324c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 8003252:	4a12      	ldr	r2, [pc, #72]	; (800329c <MX_USART3_UART_Init+0x50>)
 8003254:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 8003258:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800325c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 8003272:	220c      	movs	r2, #12
 8003274:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003282:	4805      	ldr	r0, [pc, #20]	; (8003298 <MX_USART3_UART_Init+0x4c>)
 8003284:	f003 ff64 	bl	8007150 <HAL_UART_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800328e:	f000 f8e5 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000660 	.word	0x20000660
 800329c:	40004800 	.word	0x40004800

080032a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a6:	f107 0310 	add.w	r3, r7, #16
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b4:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	4a49      	ldr	r2, [pc, #292]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032ba:	f043 0310 	orr.w	r3, r3, #16
 80032be:	6193      	str	r3, [r2, #24]
 80032c0:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032cc:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	4a43      	ldr	r2, [pc, #268]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032d2:	f043 0320 	orr.w	r3, r3, #32
 80032d6:	6193      	str	r3, [r2, #24]
 80032d8:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e4:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	6193      	str	r3, [r2, #24]
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fc:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <MX_GPIO_Init+0x140>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4a37      	ldr	r2, [pc, #220]	; (80033e0 <MX_GPIO_Init+0x140>)
 8003302:	f043 0308 	orr.w	r3, r3, #8
 8003306:	6193      	str	r3, [r2, #24]
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <MX_GPIO_Init+0x140>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8003314:	2200      	movs	r2, #0
 8003316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800331a:	4832      	ldr	r0, [pc, #200]	; (80033e4 <MX_GPIO_Init+0x144>)
 800331c:	f001 f9ab 	bl	8004676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8003320:	2201      	movs	r2, #1
 8003322:	2103      	movs	r1, #3
 8003324:	4830      	ldr	r0, [pc, #192]	; (80033e8 <MX_GPIO_Init+0x148>)
 8003326:	f001 f9a6 	bl	8004676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUTPUT_BTN_GPIO_Port, OUTPUT_BTN_Pin, GPIO_PIN_RESET);
 800332a:	2200      	movs	r2, #0
 800332c:	2108      	movs	r1, #8
 800332e:	482e      	ldr	r0, [pc, #184]	; (80033e8 <MX_GPIO_Init+0x148>)
 8003330:	f001 f9a1 	bl	8004676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8003334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333a:	2301      	movs	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2302      	movs	r3, #2
 8003344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8003346:	f107 0310 	add.w	r3, r7, #16
 800334a:	4619      	mov	r1, r3
 800334c:	4825      	ldr	r0, [pc, #148]	; (80033e4 <MX_GPIO_Init+0x144>)
 800334e:	f000 fff7 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8003352:	2301      	movs	r3, #1
 8003354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 800335e:	f107 0310 	add.w	r3, r7, #16
 8003362:	4619      	mov	r1, r3
 8003364:	4821      	ldr	r0, [pc, #132]	; (80033ec <MX_GPIO_Init+0x14c>)
 8003366:	f000 ffeb 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800336a:	2310      	movs	r3, #16
 800336c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <MX_GPIO_Init+0x150>)
 8003370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8003376:	f107 0310 	add.w	r3, r7, #16
 800337a:	4619      	mov	r1, r3
 800337c:	481b      	ldr	r0, [pc, #108]	; (80033ec <MX_GPIO_Init+0x14c>)
 800337e:	f000 ffdf 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin OUTPUT_BTN_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|OUTPUT_BTN_Pin;
 8003382:	230b      	movs	r3, #11
 8003384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2302      	movs	r3, #2
 8003390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003392:	f107 0310 	add.w	r3, r7, #16
 8003396:	4619      	mov	r1, r3
 8003398:	4813      	ldr	r0, [pc, #76]	; (80033e8 <MX_GPIO_Init+0x148>)
 800339a:	f000 ffd1 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_BTN_Pin */
  GPIO_InitStruct.Pin = RF_BTN_Pin;
 800339e:	2320      	movs	r3, #32
 80033a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <MX_GPIO_Init+0x154>)
 80033a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a6:	2301      	movs	r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_BTN_GPIO_Port, &GPIO_InitStruct);
 80033aa:	f107 0310 	add.w	r3, r7, #16
 80033ae:	4619      	mov	r1, r3
 80033b0:	480d      	ldr	r0, [pc, #52]	; (80033e8 <MX_GPIO_Init+0x148>)
 80033b2:	f000 ffc5 	bl	8004340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2105      	movs	r1, #5
 80033ba:	200a      	movs	r0, #10
 80033bc:	f000 fee3 	bl	8004186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80033c0:	200a      	movs	r0, #10
 80033c2:	f000 fefc 	bl	80041be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2105      	movs	r1, #5
 80033ca:	2017      	movs	r0, #23
 80033cc:	f000 fedb 	bl	8004186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033d0:	2017      	movs	r0, #23
 80033d2:	f000 fef4 	bl	80041be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033d6:	bf00      	nop
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40011000 	.word	0x40011000
 80033e8:	40010c00 	.word	0x40010c00
 80033ec:	40010800 	.word	0x40010800
 80033f0:	10110000 	.word	0x10110000
 80033f4:	10210000 	.word	0x10210000

080033f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM1){
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d114      	bne.n	8003434 <HAL_TIM_PeriodElapsedCallback+0x3c>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]

		xSemaphoreGiveFromISR(DHT_Sem, &xHigherPriorityTaskWoken);
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f107 020c 	add.w	r2, r7, #12
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f004 fe86 	bl	800812a <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	f3bf 8f6f 	isb	sy
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_TIM_PeriodElapsedCallback+0x4a>
    HAL_IncTick();
 800343e:	f000 fdad 	bl	8003f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40012c00 	.word	0x40012c00
 8003450:	200006a8 	.word	0x200006a8
 8003454:	e000ed04 	.word	0xe000ed04
 8003458:	40000400 	.word	0x40000400

0800345c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003460:	b672      	cpsid	i
}
 8003462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003464:	e7fe      	b.n	8003464 <Error_Handler+0x8>
	...

08003468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_MspInit+0x68>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_MspInit+0x68>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6193      	str	r3, [r2, #24]
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_MspInit+0x68>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_MspInit+0x68>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <HAL_MspInit+0x68>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	61d3      	str	r3, [r2, #28]
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_MspInit+0x68>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	210f      	movs	r1, #15
 80034a2:	f06f 0001 	mvn.w	r0, #1
 80034a6:	f000 fe6e 	bl	8004186 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_MspInit+0x6c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <HAL_MspInit+0x6c>)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40010000 	.word	0x40010000

080034d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0b      	ldr	r2, [pc, #44]	; (8003514 <HAL_RTC_MspInit+0x3c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d110      	bne.n	800350c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80034ea:	f001 f8f5 	bl	80046d8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RTC_MspInit+0x40>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <HAL_RTC_MspInit+0x40>)
 80034f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034f8:	61d3      	str	r3, [r2, #28]
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_RTC_MspInit+0x40>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RTC_MspInit+0x44>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40002800 	.word	0x40002800
 8003518:	40021000 	.word	0x40021000
 800351c:	4242043c 	.word	0x4242043c

08003520 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 0310 	add.w	r3, r7, #16
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_SPI_MspInit+0x88>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d12f      	bne.n	80035a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_SPI_MspInit+0x8c>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4a19      	ldr	r2, [pc, #100]	; (80035ac <HAL_SPI_MspInit+0x8c>)
 8003546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800354a:	6193      	str	r3, [r2, #24]
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_SPI_MspInit+0x8c>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <HAL_SPI_MspInit+0x8c>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <HAL_SPI_MspInit+0x8c>)
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	6193      	str	r3, [r2, #24]
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_SPI_MspInit+0x8c>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003570:	23a0      	movs	r3, #160	; 0xa0
 8003572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003578:	2303      	movs	r3, #3
 800357a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	4619      	mov	r1, r3
 8003582:	480b      	ldr	r0, [pc, #44]	; (80035b0 <HAL_SPI_MspInit+0x90>)
 8003584:	f000 fedc 	bl	8004340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003588:	2340      	movs	r3, #64	; 0x40
 800358a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	4619      	mov	r1, r3
 800359a:	4805      	ldr	r0, [pc, #20]	; (80035b0 <HAL_SPI_MspInit+0x90>)
 800359c:	f000 fed0 	bl	8004340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40013000 	.word	0x40013000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40010800 	.word	0x40010800

080035b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_TIM_Base_MspInit+0x68>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d114      	bne.n	80035f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035c6:	4b16      	ldr	r3, [pc, #88]	; (8003620 <HAL_TIM_Base_MspInit+0x6c>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <HAL_TIM_Base_MspInit+0x6c>)
 80035cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035d0:	6193      	str	r3, [r2, #24]
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_TIM_Base_MspInit+0x6c>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2105      	movs	r1, #5
 80035e2:	2019      	movs	r0, #25
 80035e4:	f000 fdcf 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80035e8:	2019      	movs	r0, #25
 80035ea:	f000 fde8 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035ee:	e010      	b.n	8003612 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <HAL_TIM_Base_MspInit+0x70>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d10b      	bne.n	8003612 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_TIM_Base_MspInit+0x6c>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4a08      	ldr	r2, [pc, #32]	; (8003620 <HAL_TIM_Base_MspInit+0x6c>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	61d3      	str	r3, [r2, #28]
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_TIM_Base_MspInit+0x6c>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40021000 	.word	0x40021000
 8003624:	40000800 	.word	0x40000800

08003628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0320 	add.w	r3, r7, #32
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a5b      	ldr	r2, [pc, #364]	; (80037b0 <HAL_UART_MspInit+0x188>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d132      	bne.n	80036ae <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003648:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	4a59      	ldr	r2, [pc, #356]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 800364e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003652:	6193      	str	r3, [r2, #24]
 8003654:	4b57      	ldr	r3, [pc, #348]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003660:	4b54      	ldr	r3, [pc, #336]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	4a53      	ldr	r2, [pc, #332]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	6193      	str	r3, [r2, #24]
 800366c:	4b51      	ldr	r3, [pc, #324]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003686:	f107 0320 	add.w	r3, r7, #32
 800368a:	4619      	mov	r1, r3
 800368c:	484a      	ldr	r0, [pc, #296]	; (80037b8 <HAL_UART_MspInit+0x190>)
 800368e:	f000 fe57 	bl	8004340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a0:	f107 0320 	add.w	r3, r7, #32
 80036a4:	4619      	mov	r1, r3
 80036a6:	4844      	ldr	r0, [pc, #272]	; (80037b8 <HAL_UART_MspInit+0x190>)
 80036a8:	f000 fe4a 	bl	8004340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036ac:	e07c      	b.n	80037a8 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a42      	ldr	r2, [pc, #264]	; (80037bc <HAL_UART_MspInit+0x194>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d138      	bne.n	800372a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036b8:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4a3d      	ldr	r2, [pc, #244]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c2:	61d3      	str	r3, [r2, #28]
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d0:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	4a37      	ldr	r2, [pc, #220]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	6193      	str	r3, [r2, #24]
 80036dc:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036e8:	2304      	movs	r3, #4
 80036ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036f0:	2303      	movs	r3, #3
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f4:	f107 0320 	add.w	r3, r7, #32
 80036f8:	4619      	mov	r1, r3
 80036fa:	482f      	ldr	r0, [pc, #188]	; (80037b8 <HAL_UART_MspInit+0x190>)
 80036fc:	f000 fe20 	bl	8004340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003700:	2308      	movs	r3, #8
 8003702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370c:	f107 0320 	add.w	r3, r7, #32
 8003710:	4619      	mov	r1, r3
 8003712:	4829      	ldr	r0, [pc, #164]	; (80037b8 <HAL_UART_MspInit+0x190>)
 8003714:	f000 fe14 	bl	8004340 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003718:	2200      	movs	r2, #0
 800371a:	2105      	movs	r1, #5
 800371c:	2026      	movs	r0, #38	; 0x26
 800371e:	f000 fd32 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003722:	2026      	movs	r0, #38	; 0x26
 8003724:	f000 fd4b 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 8003728:	e03e      	b.n	80037a8 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a24      	ldr	r2, [pc, #144]	; (80037c0 <HAL_UART_MspInit+0x198>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d139      	bne.n	80037a8 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 800373a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800373e:	61d3      	str	r3, [r2, #28]
 8003740:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 8003752:	f043 0308 	orr.w	r3, r3, #8
 8003756:	6193      	str	r3, [r2, #24]
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <HAL_UART_MspInit+0x18c>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376a:	2302      	movs	r3, #2
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800376e:	2303      	movs	r3, #3
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003772:	f107 0320 	add.w	r3, r7, #32
 8003776:	4619      	mov	r1, r3
 8003778:	4812      	ldr	r0, [pc, #72]	; (80037c4 <HAL_UART_MspInit+0x19c>)
 800377a:	f000 fde1 	bl	8004340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800377e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378c:	f107 0320 	add.w	r3, r7, #32
 8003790:	4619      	mov	r1, r3
 8003792:	480c      	ldr	r0, [pc, #48]	; (80037c4 <HAL_UART_MspInit+0x19c>)
 8003794:	f000 fdd4 	bl	8004340 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003798:	2200      	movs	r2, #0
 800379a:	2105      	movs	r1, #5
 800379c:	2027      	movs	r0, #39	; 0x27
 800379e:	f000 fcf2 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037a2:	2027      	movs	r0, #39	; 0x27
 80037a4:	f000 fd0b 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 80037a8:	bf00      	nop
 80037aa:	3730      	adds	r7, #48	; 0x30
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40013800 	.word	0x40013800
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40010800 	.word	0x40010800
 80037bc:	40004400 	.word	0x40004400
 80037c0:	40004800 	.word	0x40004800
 80037c4:	40010c00 	.word	0x40010c00

080037c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08e      	sub	sp, #56	; 0x38
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80037de:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <HAL_InitTick+0xe8>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4a33      	ldr	r2, [pc, #204]	; (80038b0 <HAL_InitTick+0xe8>)
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	61d3      	str	r3, [r2, #28]
 80037ea:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <HAL_InitTick+0xe8>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037f6:	f107 0210 	add.w	r2, r7, #16
 80037fa:	f107 0314 	add.w	r3, r7, #20
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fb67 	bl	8004ed4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003810:	f001 fb38 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8003814:	6378      	str	r0, [r7, #52]	; 0x34
 8003816:	e004      	b.n	8003822 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003818:	f001 fb34 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 800381c:	4603      	mov	r3, r0
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003824:	4a23      	ldr	r2, [pc, #140]	; (80038b4 <HAL_InitTick+0xec>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0c9b      	lsrs	r3, r3, #18
 800382c:	3b01      	subs	r3, #1
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003830:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <HAL_InitTick+0xf0>)
 8003832:	4a22      	ldr	r2, [pc, #136]	; (80038bc <HAL_InitTick+0xf4>)
 8003834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_InitTick+0xf0>)
 8003838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800383c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800383e:	4a1e      	ldr	r2, [pc, #120]	; (80038b8 <HAL_InitTick+0xf0>)
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <HAL_InitTick+0xf0>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_InitTick+0xf0>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_InitTick+0xf0>)
 8003852:	2200      	movs	r2, #0
 8003854:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8003856:	4818      	ldr	r0, [pc, #96]	; (80038b8 <HAL_InitTick+0xf0>)
 8003858:	f003 f832 	bl	80068c0 <HAL_TIM_Base_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11b      	bne.n	80038a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800386a:	4813      	ldr	r0, [pc, #76]	; (80038b8 <HAL_InitTick+0xf0>)
 800386c:	f003 f8c2 	bl	80069f4 <HAL_TIM_Base_Start_IT>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800387a:	2b00      	cmp	r3, #0
 800387c:	d111      	bne.n	80038a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800387e:	201d      	movs	r0, #29
 8003880:	f000 fc9d 	bl	80041be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	d808      	bhi.n	800389c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800388a:	2200      	movs	r2, #0
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	201d      	movs	r0, #29
 8003890:	f000 fc79 	bl	8004186 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003894:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <HAL_InitTick+0xf8>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e002      	b.n	80038a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80038a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3738      	adds	r7, #56	; 0x38
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	20000898 	.word	0x20000898
 80038bc:	40000400 	.word	0x40000400
 80038c0:	20000008 	.word	0x20000008

080038c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <NMI_Handler+0x4>

080038ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ce:	e7fe      	b.n	80038ce <HardFault_Handler+0x4>

080038d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <MemManage_Handler+0x4>

080038d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038da:	e7fe      	b.n	80038da <BusFault_Handler+0x4>

080038dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <UsageFault_Handler+0x4>

080038e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80038f2:	2010      	movs	r0, #16
 80038f4:	f000 fed8 	bl	80046a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}

080038fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_BTN_Pin);
 8003900:	2020      	movs	r0, #32
 8003902:	f000 fed1 	bl	80046a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <TIM1_UP_IRQHandler+0x10>)
 8003912:	f003 f8c1 	bl	8006a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000540 	.word	0x20000540

08003920 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(timeout > 0) timeout--;
 8003924:	4b07      	ldr	r3, [pc, #28]	; (8003944 <TIM3_IRQHandler+0x24>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <TIM3_IRQHandler+0x18>
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <TIM3_IRQHandler+0x24>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <TIM3_IRQHandler+0x24>)
 8003936:	801a      	strh	r2, [r3, #0]
	//if (VCCTimeout>0) VCCTimeout--;
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003938:	4803      	ldr	r0, [pc, #12]	; (8003948 <TIM3_IRQHandler+0x28>)
 800393a:	f003 f8ad 	bl	8006a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200008e4 	.word	0x200008e4
 8003948:	20000898 	.word	0x20000898

0800394c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (&huart2);
 8003950:	4803      	ldr	r0, [pc, #12]	; (8003960 <USART2_IRQHandler+0x14>)
 8003952:	f000 fa89 	bl	8003e68 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003956:	4802      	ldr	r0, [pc, #8]	; (8003960 <USART2_IRQHandler+0x14>)
 8003958:	f003 fcf2 	bl	8007340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000618 	.word	0x20000618

08003964 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <USART3_IRQHandler+0x10>)
 800396a:	f003 fce9 	bl	8007340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000660 	.word	0x20000660

08003978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return 1;
 800397c:	2301      	movs	r3, #1
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <_kill>:

int _kill(int pid, int sig)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003990:	f007 fa12 	bl	800adb8 <__errno>
 8003994:	4603      	mov	r3, r0
 8003996:	2216      	movs	r2, #22
 8003998:	601a      	str	r2, [r3, #0]
  return -1;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_exit>:

void _exit (int status)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039ae:	f04f 31ff 	mov.w	r1, #4294967295
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffe7 	bl	8003986 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039b8:	e7fe      	b.n	80039b8 <_exit+0x12>

080039ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e00a      	b.n	80039e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039cc:	f3af 8000 	nop.w
 80039d0:	4601      	mov	r1, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	60ba      	str	r2, [r7, #8]
 80039d8:	b2ca      	uxtb	r2, r1
 80039da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3301      	adds	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	dbf0      	blt.n	80039cc <_read+0x12>
  }

  return len;
 80039ea:	687b      	ldr	r3, [r7, #4]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e009      	b.n	8003a1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	60ba      	str	r2, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3301      	adds	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	dbf1      	blt.n	8003a06 <_write+0x12>
  }
  return len;
 8003a22:	687b      	ldr	r3, [r7, #4]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_close>:

int _close(int file)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a52:	605a      	str	r2, [r3, #4]
  return 0;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <_isatty>:

int _isatty(int file)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a68:	2301      	movs	r3, #1
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <_sbrk+0x5c>)
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <_sbrk+0x60>)
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <_sbrk+0x64>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <_sbrk+0x64>)
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <_sbrk+0x68>)
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <_sbrk+0x64>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d207      	bcs.n	8003acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003abc:	f007 f97c 	bl	800adb8 <__errno>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	e009      	b.n	8003ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <_sbrk+0x64>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <_sbrk+0x64>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	4a05      	ldr	r2, [pc, #20]	; (8003af0 <_sbrk+0x64>)
 8003adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20005000 	.word	0x20005000
 8003aec:	00000400 	.word	0x00000400
 8003af0:	200008e0 	.word	0x200008e0
 8003af4:	20003fa0 	.word	0x20003fa0

08003af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <Ringbuf_init+0x38>)
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <Ringbuf_init+0x3c>)
 8003b0c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <Ringbuf_init+0x40>)
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <Ringbuf_init+0x44>)
 8003b12:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <Ringbuf_init+0x48>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <Ringbuf_init+0x48>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <Ringbuf_init+0x48>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <Ringbuf_init+0x48>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0220 	orr.w	r2, r2, #32
 8003b32:	60da      	str	r2, [r3, #12]
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	20000cf8 	.word	0x20000cf8
 8003b40:	200008e8 	.word	0x200008e8
 8003b44:	20000cfc 	.word	0x20000cfc
 8003b48:	20000af0 	.word	0x20000af0
 8003b4c:	20000618 	.word	0x20000618

08003b50 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b68:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d009      	beq.n	8003b8a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	79f9      	ldrb	r1, [r7, #7]
 8003b80:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <Uart_read+0x54>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <Uart_read+0x54>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d102      	bne.n	8003bb4 <Uart_read+0x20>
  {
    return -1;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	e013      	b.n	8003bdc <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <Uart_read+0x54>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <Uart_read+0x54>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <Uart_read+0x54>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <Uart_read+0x54>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8003bda:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000cf8 	.word	0x20000cf8

08003bec <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <IsDataAvailable+0x30>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <IsDataAvailable+0x30>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000cf8 	.word	0x20000cf8

08003c20 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <Uart_peek+0x34>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <Uart_peek+0x34>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d102      	bne.n	8003c3e <Uart_peek+0x1e>
  {
    return -1;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	e006      	b.n	8003c4c <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <Uart_peek+0x34>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <Uart_peek+0x34>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003c4a:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	20000cf8 	.word	0x20000cf8

08003c58 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fc fa72 	bl	8000150 <strlen>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8003c74:	e01e      	b.n	8003cb4 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8003c76:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <Copy_upto+0xf8>)
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <Copy_upto+0xf8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6838      	ldr	r0, [r7, #0]
 8003c86:	4403      	add	r3, r0
 8003c88:	5c8a      	ldrb	r2, [r1, r2]
 8003c8a:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <Copy_upto+0xf8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <Copy_upto+0xf8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8003ca8:	bf00      	nop
 8003caa:	f7ff ff9f 	bl	8003bec <IsDataAvailable>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0fa      	beq.n	8003caa <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8003cb4:	f7ff ffb4 	bl	8003c20 <Uart_peek>
 8003cb8:	4601      	mov	r1, r0
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	d1d7      	bne.n	8003c76 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8003cc6:	e027      	b.n	8003d18 <Copy_upto+0xc0>
	{
		so_far++;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8003cce:	f7ff ff61 	bl	8003b94 <Uart_read>
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	613a      	str	r2, [r7, #16]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	b2ca      	uxtb	r2, r1
 8003ce2:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d101      	bne.n	8003cf0 <Copy_upto+0x98>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e02a      	b.n	8003d46 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8003cf0:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <Copy_upto+0xfc>)
 8003cf2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003cf6:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003cf8:	bf00      	nop
 8003cfa:	f7ff ff77 	bl	8003bec <IsDataAvailable>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <Copy_upto+0xb4>
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <Copy_upto+0xfc>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f6      	bne.n	8003cfa <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <Copy_upto+0xfc>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <Copy_upto+0xc0>
 8003d14:	2300      	movs	r3, #0
 8003d16:	e016      	b.n	8003d46 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8003d18:	f7ff ff82 	bl	8003c20 <Uart_peek>
 8003d1c:	4601      	mov	r1, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	4299      	cmp	r1, r3
 8003d28:	d0ce      	beq.n	8003cc8 <Copy_upto+0x70>
	}

	if (so_far != len)
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d002      	beq.n	8003d38 <Copy_upto+0xe0>
	{
		so_far = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
		goto again;
 8003d36:	e79d      	b.n	8003c74 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d101      	bne.n	8003d44 <Copy_upto+0xec>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <Copy_upto+0xee>
	else return 0;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000cf8 	.word	0x20000cf8
 8003d54:	200008e4 	.word	0x200008e4

08003d58 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fc f9f3 	bl	8000150 <strlen>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <Wait_for+0x108>)
 8003d70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d74:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8003d76:	bf00      	nop
 8003d78:	f7ff ff38 	bl	8003bec <IsDataAvailable>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <Wait_for+0x32>
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <Wait_for+0x108>)
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f6      	bne.n	8003d78 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8003d8a:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <Wait_for+0x108>)
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d119      	bne.n	8003dc6 <Wait_for+0x6e>
 8003d92:	2300      	movs	r3, #0
 8003d94:	e060      	b.n	8003e58 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8003d96:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <Wait_for+0x10c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d9e:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <Wait_for+0x10c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d00b      	beq.n	8003dc2 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003daa:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <Wait_for+0x10c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <Wait_for+0x10c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003dc0:	e001      	b.n	8003dc6 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e048      	b.n	8003e58 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8003dc6:	f7ff ff2b 	bl	8003c20 <Uart_peek>
 8003dca:	4601      	mov	r1, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	4299      	cmp	r1, r3
 8003dd6:	d1de      	bne.n	8003d96 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003dd8:	e027      	b.n	8003e2a <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003de0:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <Wait_for+0x10c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <Wait_for+0x10c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d101      	bne.n	8003e02 <Wait_for+0xaa>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e02a      	b.n	8003e58 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <Wait_for+0x108>)
 8003e04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e08:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003e0a:	bf00      	nop
 8003e0c:	f7ff feee 	bl	8003bec <IsDataAvailable>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <Wait_for+0xc6>
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <Wait_for+0x108>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f6      	bne.n	8003e0c <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <Wait_for+0x108>)
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <Wait_for+0xd2>
 8003e26:	2300      	movs	r3, #0
 8003e28:	e016      	b.n	8003e58 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003e2a:	f7ff fef9 	bl	8003c20 <Uart_peek>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	4299      	cmp	r1, r3
 8003e3a:	d0ce      	beq.n	8003dda <Wait_for+0x82>
	}

	if (so_far != len)
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d002      	beq.n	8003e4a <Wait_for+0xf2>
	{
		so_far = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
		goto again;
 8003e48:	e791      	b.n	8003d6e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d101      	bne.n	8003e56 <Wait_for+0xfe>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <Wait_for+0x100>
	else return 0;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	200008e4 	.word	0x200008e4
 8003e64:	20000cf8 	.word	0x20000cf8

08003e68 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d013      	beq.n	8003eb2 <Uart_isr+0x4a>
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00e      	beq.n	8003eb2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <Uart_isr+0xb4>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fe50 	bl	8003b50 <store_char>
        return;
 8003eb0:	e031      	b.n	8003f16 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d02c      	beq.n	8003f16 <Uart_isr+0xae>
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d027      	beq.n	8003f16 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <Uart_isr+0xb8>)
 8003ec8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <Uart_isr+0xb8>)
 8003ece:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d108      	bne.n	8003ee8 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8003ee6:	e015      	b.n	8003f14 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <Uart_isr+0xb8>)
 8003eea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003eee:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <Uart_isr+0xb8>)
 8003ef0:	5cd3      	ldrb	r3, [r2, r3]
 8003ef2:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <Uart_isr+0xb8>)
 8003ef6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f00:	4a07      	ldr	r2, [pc, #28]	; (8003f20 <Uart_isr+0xb8>)
 8003f02:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	7bba      	ldrb	r2, [r7, #14]
 8003f12:	605a      	str	r2, [r3, #4]
    	return;
 8003f14:	bf00      	nop
    }
}
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000cf8 	.word	0x20000cf8
 8003f20:	20000af0 	.word	0x20000af0

08003f24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f24:	f7ff fde8 	bl	8003af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f28:	480b      	ldr	r0, [pc, #44]	; (8003f58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003f2a:	490c      	ldr	r1, [pc, #48]	; (8003f5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003f2c:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f30:	e002      	b.n	8003f38 <LoopCopyDataInit>

08003f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f36:	3304      	adds	r3, #4

08003f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f3c:	d3f9      	bcc.n	8003f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f3e:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003f40:	4c09      	ldr	r4, [pc, #36]	; (8003f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f44:	e001      	b.n	8003f4a <LoopFillZerobss>

08003f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f48:	3204      	adds	r2, #4

08003f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f4c:	d3fb      	bcc.n	8003f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f4e:	f006 ff39 	bl	800adc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f52:	f7fe feaf 	bl	8002cb4 <main>
  bx lr
 8003f56:	4770      	bx	lr
  ldr r0, =_sdata
 8003f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f5c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003f60:	0800f8f8 	.word	0x0800f8f8
  ldr r2, =_sbss
 8003f64:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003f68:	20003f9c 	.word	0x20003f9c

08003f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f6c:	e7fe      	b.n	8003f6c <ADC1_2_IRQHandler>
	...

08003f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f74:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <HAL_Init+0x28>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_Init+0x28>)
 8003f7a:	f043 0310 	orr.w	r3, r3, #16
 8003f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f80:	2003      	movs	r0, #3
 8003f82:	f000 f8f5 	bl	8004170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f86:	200f      	movs	r0, #15
 8003f88:	f7ff fc1e 	bl	80037c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f8c:	f7ff fa6c 	bl	8003468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40022000 	.word	0x40022000

08003f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_IncTick+0x1c>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_IncTick+0x20>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	4a03      	ldr	r2, [pc, #12]	; (8003fbc <HAL_IncTick+0x20>)
 8003fae:	6013      	str	r3, [r2, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	2000000c 	.word	0x2000000c
 8003fbc:	20000d00 	.word	0x20000d00

08003fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc4:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <HAL_GetTick+0x10>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	20000d00 	.word	0x20000d00

08003fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7ff fff0 	bl	8003fc0 <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d005      	beq.n	8003ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <HAL_Delay+0x44>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ffa:	bf00      	nop
 8003ffc:	f7ff ffe0 	bl	8003fc0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d8f7      	bhi.n	8003ffc <HAL_Delay+0x28>
  {
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	2000000c 	.word	0x2000000c

0800401c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800404e:	4a04      	ldr	r2, [pc, #16]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	60d3      	str	r3, [r2, #12]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <__NVIC_GetPriorityGrouping+0x18>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0a1b      	lsrs	r3, r3, #8
 800406e:	f003 0307 	and.w	r3, r3, #7
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	2b00      	cmp	r3, #0
 8004090:	db0b      	blt.n	80040aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	4906      	ldr	r1, [pc, #24]	; (80040b4 <__NVIC_EnableIRQ+0x34>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2001      	movs	r0, #1
 80040a2:	fa00 f202 	lsl.w	r2, r0, r2
 80040a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	e000e100 	.word	0xe000e100

080040b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	6039      	str	r1, [r7, #0]
 80040c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	db0a      	blt.n	80040e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	490c      	ldr	r1, [pc, #48]	; (8004104 <__NVIC_SetPriority+0x4c>)
 80040d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d6:	0112      	lsls	r2, r2, #4
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	440b      	add	r3, r1
 80040dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e0:	e00a      	b.n	80040f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	4908      	ldr	r1, [pc, #32]	; (8004108 <__NVIC_SetPriority+0x50>)
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	3b04      	subs	r3, #4
 80040f0:	0112      	lsls	r2, r2, #4
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	440b      	add	r3, r1
 80040f6:	761a      	strb	r2, [r3, #24]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	e000e100 	.word	0xe000e100
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800410c:	b480      	push	{r7}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f1c3 0307 	rsb	r3, r3, #7
 8004126:	2b04      	cmp	r3, #4
 8004128:	bf28      	it	cs
 800412a:	2304      	movcs	r3, #4
 800412c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3304      	adds	r3, #4
 8004132:	2b06      	cmp	r3, #6
 8004134:	d902      	bls.n	800413c <NVIC_EncodePriority+0x30>
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3b03      	subs	r3, #3
 800413a:	e000      	b.n	800413e <NVIC_EncodePriority+0x32>
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004140:	f04f 32ff 	mov.w	r2, #4294967295
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	401a      	ands	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004154:	f04f 31ff 	mov.w	r1, #4294967295
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	fa01 f303 	lsl.w	r3, r1, r3
 800415e:	43d9      	mvns	r1, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	4313      	orrs	r3, r2
         );
}
 8004166:	4618      	mov	r0, r3
 8004168:	3724      	adds	r7, #36	; 0x24
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff4f 	bl	800401c <__NVIC_SetPriorityGrouping>
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004186:	b580      	push	{r7, lr}
 8004188:	b086      	sub	sp, #24
 800418a:	af00      	add	r7, sp, #0
 800418c:	4603      	mov	r3, r0
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004198:	f7ff ff64 	bl	8004064 <__NVIC_GetPriorityGrouping>
 800419c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	6978      	ldr	r0, [r7, #20]
 80041a4:	f7ff ffb2 	bl	800410c <NVIC_EncodePriority>
 80041a8:	4602      	mov	r2, r0
 80041aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff81 	bl	80040b8 <__NVIC_SetPriority>
}
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	4603      	mov	r3, r0
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ff57 	bl	8004080 <__NVIC_EnableIRQ>
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041da:	b480      	push	{r7}
 80041dc:	b085      	sub	sp, #20
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d008      	beq.n	8004204 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2204      	movs	r2, #4
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e020      	b.n	8004246 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 020e 	bic.w	r2, r2, #14
 8004212:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f202 	lsl.w	r2, r1, r2
 8004232:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d005      	beq.n	8004274 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2204      	movs	r2, #4
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	e051      	b.n	8004318 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 020e 	bic.w	r2, r2, #14
 8004282:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a22      	ldr	r2, [pc, #136]	; (8004324 <HAL_DMA_Abort_IT+0xd4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d029      	beq.n	80042f2 <HAL_DMA_Abort_IT+0xa2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <HAL_DMA_Abort_IT+0xd8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_Abort_IT+0x9e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_DMA_Abort_IT+0xdc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01a      	beq.n	80042e8 <HAL_DMA_Abort_IT+0x98>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_DMA_Abort_IT+0xe0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d012      	beq.n	80042e2 <HAL_DMA_Abort_IT+0x92>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_DMA_Abort_IT+0xe4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00a      	beq.n	80042dc <HAL_DMA_Abort_IT+0x8c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_DMA_Abort_IT+0xe8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d102      	bne.n	80042d6 <HAL_DMA_Abort_IT+0x86>
 80042d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80042d4:	e00e      	b.n	80042f4 <HAL_DMA_Abort_IT+0xa4>
 80042d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042da:	e00b      	b.n	80042f4 <HAL_DMA_Abort_IT+0xa4>
 80042dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042e0:	e008      	b.n	80042f4 <HAL_DMA_Abort_IT+0xa4>
 80042e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e6:	e005      	b.n	80042f4 <HAL_DMA_Abort_IT+0xa4>
 80042e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042ec:	e002      	b.n	80042f4 <HAL_DMA_Abort_IT+0xa4>
 80042ee:	2310      	movs	r3, #16
 80042f0:	e000      	b.n	80042f4 <HAL_DMA_Abort_IT+0xa4>
 80042f2:	2301      	movs	r3, #1
 80042f4:	4a11      	ldr	r2, [pc, #68]	; (800433c <HAL_DMA_Abort_IT+0xec>)
 80042f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
    } 
  }
  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40020008 	.word	0x40020008
 8004328:	4002001c 	.word	0x4002001c
 800432c:	40020030 	.word	0x40020030
 8004330:	40020044 	.word	0x40020044
 8004334:	40020058 	.word	0x40020058
 8004338:	4002006c 	.word	0x4002006c
 800433c:	40020000 	.word	0x40020000

08004340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004340:	b480      	push	{r7}
 8004342:	b08b      	sub	sp, #44	; 0x2c
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800434e:	2300      	movs	r3, #0
 8004350:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004352:	e169      	b.n	8004628 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004354:	2201      	movs	r2, #1
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	429a      	cmp	r2, r3
 800436e:	f040 8158 	bne.w	8004622 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4a9a      	ldr	r2, [pc, #616]	; (80045e0 <HAL_GPIO_Init+0x2a0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d05e      	beq.n	800443a <HAL_GPIO_Init+0xfa>
 800437c:	4a98      	ldr	r2, [pc, #608]	; (80045e0 <HAL_GPIO_Init+0x2a0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d875      	bhi.n	800446e <HAL_GPIO_Init+0x12e>
 8004382:	4a98      	ldr	r2, [pc, #608]	; (80045e4 <HAL_GPIO_Init+0x2a4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d058      	beq.n	800443a <HAL_GPIO_Init+0xfa>
 8004388:	4a96      	ldr	r2, [pc, #600]	; (80045e4 <HAL_GPIO_Init+0x2a4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d86f      	bhi.n	800446e <HAL_GPIO_Init+0x12e>
 800438e:	4a96      	ldr	r2, [pc, #600]	; (80045e8 <HAL_GPIO_Init+0x2a8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d052      	beq.n	800443a <HAL_GPIO_Init+0xfa>
 8004394:	4a94      	ldr	r2, [pc, #592]	; (80045e8 <HAL_GPIO_Init+0x2a8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d869      	bhi.n	800446e <HAL_GPIO_Init+0x12e>
 800439a:	4a94      	ldr	r2, [pc, #592]	; (80045ec <HAL_GPIO_Init+0x2ac>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d04c      	beq.n	800443a <HAL_GPIO_Init+0xfa>
 80043a0:	4a92      	ldr	r2, [pc, #584]	; (80045ec <HAL_GPIO_Init+0x2ac>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d863      	bhi.n	800446e <HAL_GPIO_Init+0x12e>
 80043a6:	4a92      	ldr	r2, [pc, #584]	; (80045f0 <HAL_GPIO_Init+0x2b0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d046      	beq.n	800443a <HAL_GPIO_Init+0xfa>
 80043ac:	4a90      	ldr	r2, [pc, #576]	; (80045f0 <HAL_GPIO_Init+0x2b0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d85d      	bhi.n	800446e <HAL_GPIO_Init+0x12e>
 80043b2:	2b12      	cmp	r3, #18
 80043b4:	d82a      	bhi.n	800440c <HAL_GPIO_Init+0xcc>
 80043b6:	2b12      	cmp	r3, #18
 80043b8:	d859      	bhi.n	800446e <HAL_GPIO_Init+0x12e>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_GPIO_Init+0x80>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	0800443b 	.word	0x0800443b
 80043c4:	08004415 	.word	0x08004415
 80043c8:	08004427 	.word	0x08004427
 80043cc:	08004469 	.word	0x08004469
 80043d0:	0800446f 	.word	0x0800446f
 80043d4:	0800446f 	.word	0x0800446f
 80043d8:	0800446f 	.word	0x0800446f
 80043dc:	0800446f 	.word	0x0800446f
 80043e0:	0800446f 	.word	0x0800446f
 80043e4:	0800446f 	.word	0x0800446f
 80043e8:	0800446f 	.word	0x0800446f
 80043ec:	0800446f 	.word	0x0800446f
 80043f0:	0800446f 	.word	0x0800446f
 80043f4:	0800446f 	.word	0x0800446f
 80043f8:	0800446f 	.word	0x0800446f
 80043fc:	0800446f 	.word	0x0800446f
 8004400:	0800446f 	.word	0x0800446f
 8004404:	0800441d 	.word	0x0800441d
 8004408:	08004431 	.word	0x08004431
 800440c:	4a79      	ldr	r2, [pc, #484]	; (80045f4 <HAL_GPIO_Init+0x2b4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004412:	e02c      	b.n	800446e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	623b      	str	r3, [r7, #32]
          break;
 800441a:	e029      	b.n	8004470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	3304      	adds	r3, #4
 8004422:	623b      	str	r3, [r7, #32]
          break;
 8004424:	e024      	b.n	8004470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	3308      	adds	r3, #8
 800442c:	623b      	str	r3, [r7, #32]
          break;
 800442e:	e01f      	b.n	8004470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	330c      	adds	r3, #12
 8004436:	623b      	str	r3, [r7, #32]
          break;
 8004438:	e01a      	b.n	8004470 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004442:	2304      	movs	r3, #4
 8004444:	623b      	str	r3, [r7, #32]
          break;
 8004446:	e013      	b.n	8004470 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004450:	2308      	movs	r3, #8
 8004452:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	611a      	str	r2, [r3, #16]
          break;
 800445a:	e009      	b.n	8004470 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800445c:	2308      	movs	r3, #8
 800445e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	615a      	str	r2, [r3, #20]
          break;
 8004466:	e003      	b.n	8004470 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]
          break;
 800446c:	e000      	b.n	8004470 <HAL_GPIO_Init+0x130>
          break;
 800446e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2bff      	cmp	r3, #255	; 0xff
 8004474:	d801      	bhi.n	800447a <HAL_GPIO_Init+0x13a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	e001      	b.n	800447e <HAL_GPIO_Init+0x13e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2bff      	cmp	r3, #255	; 0xff
 8004484:	d802      	bhi.n	800448c <HAL_GPIO_Init+0x14c>
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	e002      	b.n	8004492 <HAL_GPIO_Init+0x152>
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	3b08      	subs	r3, #8
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	210f      	movs	r1, #15
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	401a      	ands	r2, r3
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	431a      	orrs	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80b1 	beq.w	8004622 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044c0:	4b4d      	ldr	r3, [pc, #308]	; (80045f8 <HAL_GPIO_Init+0x2b8>)
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	4a4c      	ldr	r2, [pc, #304]	; (80045f8 <HAL_GPIO_Init+0x2b8>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6193      	str	r3, [r2, #24]
 80044cc:	4b4a      	ldr	r3, [pc, #296]	; (80045f8 <HAL_GPIO_Init+0x2b8>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044d8:	4a48      	ldr	r2, [pc, #288]	; (80045fc <HAL_GPIO_Init+0x2bc>)
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	3302      	adds	r3, #2
 80044e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	220f      	movs	r2, #15
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4013      	ands	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a40      	ldr	r2, [pc, #256]	; (8004600 <HAL_GPIO_Init+0x2c0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <HAL_GPIO_Init+0x1ec>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3f      	ldr	r2, [pc, #252]	; (8004604 <HAL_GPIO_Init+0x2c4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00d      	beq.n	8004528 <HAL_GPIO_Init+0x1e8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a3e      	ldr	r2, [pc, #248]	; (8004608 <HAL_GPIO_Init+0x2c8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <HAL_GPIO_Init+0x1e4>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a3d      	ldr	r2, [pc, #244]	; (800460c <HAL_GPIO_Init+0x2cc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <HAL_GPIO_Init+0x1e0>
 800451c:	2303      	movs	r3, #3
 800451e:	e006      	b.n	800452e <HAL_GPIO_Init+0x1ee>
 8004520:	2304      	movs	r3, #4
 8004522:	e004      	b.n	800452e <HAL_GPIO_Init+0x1ee>
 8004524:	2302      	movs	r3, #2
 8004526:	e002      	b.n	800452e <HAL_GPIO_Init+0x1ee>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_GPIO_Init+0x1ee>
 800452c:	2300      	movs	r3, #0
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	f002 0203 	and.w	r2, r2, #3
 8004534:	0092      	lsls	r2, r2, #2
 8004536:	4093      	lsls	r3, r2
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800453e:	492f      	ldr	r1, [pc, #188]	; (80045fc <HAL_GPIO_Init+0x2bc>)
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	3302      	adds	r3, #2
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d006      	beq.n	8004566 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	492c      	ldr	r1, [pc, #176]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004566:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	43db      	mvns	r3, r3
 800456e:	4928      	ldr	r1, [pc, #160]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 8004570:	4013      	ands	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d006      	beq.n	800458e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004580:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	4922      	ldr	r1, [pc, #136]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	60cb      	str	r3, [r1, #12]
 800458c:	e006      	b.n	800459c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	43db      	mvns	r3, r3
 8004596:	491e      	ldr	r1, [pc, #120]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 8004598:	4013      	ands	r3, r2
 800459a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d006      	beq.n	80045b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	4918      	ldr	r1, [pc, #96]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
 80045b4:	e006      	b.n	80045c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	43db      	mvns	r3, r3
 80045be:	4914      	ldr	r1, [pc, #80]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d021      	beq.n	8004614 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_GPIO_Init+0x2d0>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e021      	b.n	8004622 <HAL_GPIO_Init+0x2e2>
 80045de:	bf00      	nop
 80045e0:	10320000 	.word	0x10320000
 80045e4:	10310000 	.word	0x10310000
 80045e8:	10220000 	.word	0x10220000
 80045ec:	10210000 	.word	0x10210000
 80045f0:	10120000 	.word	0x10120000
 80045f4:	10110000 	.word	0x10110000
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40010000 	.word	0x40010000
 8004600:	40010800 	.word	0x40010800
 8004604:	40010c00 	.word	0x40010c00
 8004608:	40011000 	.word	0x40011000
 800460c:	40011400 	.word	0x40011400
 8004610:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_GPIO_Init+0x304>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	43db      	mvns	r3, r3
 800461c:	4909      	ldr	r1, [pc, #36]	; (8004644 <HAL_GPIO_Init+0x304>)
 800461e:	4013      	ands	r3, r2
 8004620:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	3301      	adds	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	fa22 f303 	lsr.w	r3, r2, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	f47f ae8e 	bne.w	8004354 <HAL_GPIO_Init+0x14>
  }
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	372c      	adds	r7, #44	; 0x2c
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	40010400 	.word	0x40010400

08004648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e001      	b.n	800466a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004666:	2300      	movs	r3, #0
 8004668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	807b      	strh	r3, [r7, #2]
 8004682:	4613      	mov	r3, r2
 8004684:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004686:	787b      	ldrb	r3, [r7, #1]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468c:	887a      	ldrh	r2, [r7, #2]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004692:	e003      	b.n	800469c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004694:	887b      	ldrh	r3, [r7, #2]
 8004696:	041a      	lsls	r2, r3, #16
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	611a      	str	r2, [r3, #16]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe f818 	bl	80026fc <HAL_GPIO_EXTI_Callback>
  }
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40010400 	.word	0x40010400

080046d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_PWR_EnableBkUpAccess+0x14>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	420e0020 	.word	0x420e0020

080046f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e272      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8087 	beq.w	800481e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004710:	4b92      	ldr	r3, [pc, #584]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b04      	cmp	r3, #4
 800471a:	d00c      	beq.n	8004736 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800471c:	4b8f      	ldr	r3, [pc, #572]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d112      	bne.n	800474e <HAL_RCC_OscConfig+0x5e>
 8004728:	4b8c      	ldr	r3, [pc, #560]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d10b      	bne.n	800474e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004736:	4b89      	ldr	r3, [pc, #548]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d06c      	beq.n	800481c <HAL_RCC_OscConfig+0x12c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d168      	bne.n	800481c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e24c      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x76>
 8004758:	4b80      	ldr	r3, [pc, #512]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a7f      	ldr	r2, [pc, #508]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 800475e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e02e      	b.n	80047c4 <HAL_RCC_OscConfig+0xd4>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x98>
 800476e:	4b7b      	ldr	r3, [pc, #492]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a7a      	ldr	r2, [pc, #488]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b78      	ldr	r3, [pc, #480]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a77      	ldr	r2, [pc, #476]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e01d      	b.n	80047c4 <HAL_RCC_OscConfig+0xd4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0xbc>
 8004792:	4b72      	ldr	r3, [pc, #456]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a71      	ldr	r2, [pc, #452]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b6f      	ldr	r3, [pc, #444]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a6e      	ldr	r2, [pc, #440]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0xd4>
 80047ac:	4b6b      	ldr	r3, [pc, #428]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6a      	ldr	r2, [pc, #424]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b68      	ldr	r3, [pc, #416]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a67      	ldr	r2, [pc, #412]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80047be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7ff fbf8 	bl	8003fc0 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d4:	f7ff fbf4 	bl	8003fc0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e200      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b5d      	ldr	r3, [pc, #372]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0xe4>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7ff fbe4 	bl	8003fc0 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047fc:	f7ff fbe0 	bl	8003fc0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	; 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e1ec      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	4b53      	ldr	r3, [pc, #332]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x10c>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800482a:	4b4c      	ldr	r3, [pc, #304]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004836:	4b49      	ldr	r3, [pc, #292]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b08      	cmp	r3, #8
 8004840:	d11c      	bne.n	800487c <HAL_RCC_OscConfig+0x18c>
 8004842:	4b46      	ldr	r3, [pc, #280]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d116      	bne.n	800487c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	4b43      	ldr	r3, [pc, #268]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_RCC_OscConfig+0x176>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e1c0      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004866:	4b3d      	ldr	r3, [pc, #244]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4939      	ldr	r1, [pc, #228]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487a:	e03a      	b.n	80048f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004884:	4b36      	ldr	r3, [pc, #216]	; (8004960 <HAL_RCC_OscConfig+0x270>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488a:	f7ff fb99 	bl	8003fc0 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004892:	f7ff fb95 	bl	8003fc0 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e1a1      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	4b2d      	ldr	r3, [pc, #180]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b0:	4b2a      	ldr	r3, [pc, #168]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4927      	ldr	r1, [pc, #156]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
 80048c4:	e015      	b.n	80048f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c6:	4b26      	ldr	r3, [pc, #152]	; (8004960 <HAL_RCC_OscConfig+0x270>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7ff fb78 	bl	8003fc0 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d4:	f7ff fb74 	bl	8003fc0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e180      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d03a      	beq.n	8004974 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d019      	beq.n	800493a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004906:	4b17      	ldr	r3, [pc, #92]	; (8004964 <HAL_RCC_OscConfig+0x274>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490c:	f7ff fb58 	bl	8003fc0 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004914:	f7ff fb54 	bl	8003fc0 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e160      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <HAL_RCC_OscConfig+0x26c>)
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004932:	2001      	movs	r0, #1
 8004934:	f000 fafe 	bl	8004f34 <RCC_Delay>
 8004938:	e01c      	b.n	8004974 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <HAL_RCC_OscConfig+0x274>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004940:	f7ff fb3e 	bl	8003fc0 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004946:	e00f      	b.n	8004968 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004948:	f7ff fb3a 	bl	8003fc0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d908      	bls.n	8004968 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e146      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000
 8004960:	42420000 	.word	0x42420000
 8004964:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	4b92      	ldr	r3, [pc, #584]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e9      	bne.n	8004948 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80a6 	beq.w	8004ace <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b8b      	ldr	r3, [pc, #556]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10d      	bne.n	80049ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	4b88      	ldr	r3, [pc, #544]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	4a87      	ldr	r2, [pc, #540]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499c:	61d3      	str	r3, [r2, #28]
 800499e:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ae:	4b82      	ldr	r3, [pc, #520]	; (8004bb8 <HAL_RCC_OscConfig+0x4c8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d118      	bne.n	80049ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ba:	4b7f      	ldr	r3, [pc, #508]	; (8004bb8 <HAL_RCC_OscConfig+0x4c8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a7e      	ldr	r2, [pc, #504]	; (8004bb8 <HAL_RCC_OscConfig+0x4c8>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c6:	f7ff fafb 	bl	8003fc0 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ce:	f7ff faf7 	bl	8003fc0 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b64      	cmp	r3, #100	; 0x64
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e103      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <HAL_RCC_OscConfig+0x4c8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d106      	bne.n	8004a02 <HAL_RCC_OscConfig+0x312>
 80049f4:	4b6f      	ldr	r3, [pc, #444]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	4a6e      	ldr	r2, [pc, #440]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6213      	str	r3, [r2, #32]
 8004a00:	e02d      	b.n	8004a5e <HAL_RCC_OscConfig+0x36e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x334>
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4a69      	ldr	r2, [pc, #420]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	6213      	str	r3, [r2, #32]
 8004a16:	4b67      	ldr	r3, [pc, #412]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4a66      	ldr	r2, [pc, #408]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	f023 0304 	bic.w	r3, r3, #4
 8004a20:	6213      	str	r3, [r2, #32]
 8004a22:	e01c      	b.n	8004a5e <HAL_RCC_OscConfig+0x36e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d10c      	bne.n	8004a46 <HAL_RCC_OscConfig+0x356>
 8004a2c:	4b61      	ldr	r3, [pc, #388]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4a60      	ldr	r2, [pc, #384]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	f043 0304 	orr.w	r3, r3, #4
 8004a36:	6213      	str	r3, [r2, #32]
 8004a38:	4b5e      	ldr	r3, [pc, #376]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4a5d      	ldr	r2, [pc, #372]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	6213      	str	r3, [r2, #32]
 8004a44:	e00b      	b.n	8004a5e <HAL_RCC_OscConfig+0x36e>
 8004a46:	4b5b      	ldr	r3, [pc, #364]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	4a5a      	ldr	r2, [pc, #360]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6213      	str	r3, [r2, #32]
 8004a52:	4b58      	ldr	r3, [pc, #352]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4a57      	ldr	r2, [pc, #348]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d015      	beq.n	8004a92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a66:	f7ff faab 	bl	8003fc0 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7ff faa7 	bl	8003fc0 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e0b1      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a84:	4b4b      	ldr	r3, [pc, #300]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ee      	beq.n	8004a6e <HAL_RCC_OscConfig+0x37e>
 8004a90:	e014      	b.n	8004abc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a92:	f7ff fa95 	bl	8003fc0 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7ff fa91 	bl	8003fc0 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e09b      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab0:	4b40      	ldr	r3, [pc, #256]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ee      	bne.n	8004a9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d105      	bne.n	8004ace <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac2:	4b3c      	ldr	r3, [pc, #240]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004acc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8087 	beq.w	8004be6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad8:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 030c 	and.w	r3, r3, #12
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d061      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d146      	bne.n	8004b7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aec:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <HAL_RCC_OscConfig+0x4cc>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af2:	f7ff fa65 	bl	8003fc0 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afa:	f7ff fa61 	bl	8003fc0 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e06d      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0c:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f0      	bne.n	8004afa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d108      	bne.n	8004b34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	4921      	ldr	r1, [pc, #132]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b34:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a19      	ldr	r1, [r3, #32]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	430b      	orrs	r3, r1
 8004b46:	491b      	ldr	r1, [pc, #108]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b4c:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <HAL_RCC_OscConfig+0x4cc>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b52:	f7ff fa35 	bl	8003fc0 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5a:	f7ff fa31 	bl	8003fc0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e03d      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b6c:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x46a>
 8004b78:	e035      	b.n	8004be6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_RCC_OscConfig+0x4cc>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7ff fa1e 	bl	8003fc0 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b88:	f7ff fa1a 	bl	8003fc0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e026      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x498>
 8004ba6:	e01e      	b.n	8004be6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e019      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40007000 	.word	0x40007000
 8004bbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_OscConfig+0x500>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d001      	beq.n	8004be6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0d0      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c08:	4b6a      	ldr	r3, [pc, #424]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d910      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b67      	ldr	r3, [pc, #412]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 0207 	bic.w	r2, r3, #7
 8004c1e:	4965      	ldr	r1, [pc, #404]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	4b63      	ldr	r3, [pc, #396]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0b8      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c50:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c68:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4a52      	ldr	r2, [pc, #328]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c74:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	494d      	ldr	r1, [pc, #308]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d040      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d115      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e07f      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e073      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc2:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06b      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd2:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f023 0203 	bic.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4936      	ldr	r1, [pc, #216]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce4:	f7ff f96c 	bl	8003fc0 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7ff f968 	bl	8003fc0 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e053      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 020c 	and.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d1eb      	bne.n	8004cec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d14:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d210      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 0207 	bic.w	r2, r3, #7
 8004d2a:	4922      	ldr	r1, [pc, #136]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e032      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4916      	ldr	r1, [pc, #88]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d6e:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	490e      	ldr	r1, [pc, #56]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d82:	f000 f821 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	490a      	ldr	r1, [pc, #40]	; (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	5ccb      	ldrb	r3, [r1, r3]
 8004d96:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9a:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fd10 	bl	80037c8 <HAL_InitTick>

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800f458 	.word	0x0800f458
 8004dc0:	20000004 	.word	0x20000004
 8004dc4:	20000008 	.word	0x20000008

08004dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004de2:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d002      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x30>
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d003      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0x36>
 8004df6:	e027      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dfa:	613b      	str	r3, [r7, #16]
      break;
 8004dfc:	e027      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	0c9b      	lsrs	r3, r3, #18
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e08:	5cd3      	ldrb	r3, [r2, r3]
 8004e0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e16:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	0c5b      	lsrs	r3, r3, #17
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e22:	5cd3      	ldrb	r3, [r2, r3]
 8004e24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a0d      	ldr	r2, [pc, #52]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e2a:	fb03 f202 	mul.w	r2, r3, r2
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e004      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	613b      	str	r3, [r7, #16]
      break;
 8004e46:	e002      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e4a:	613b      	str	r3, [r7, #16]
      break;
 8004e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e4e:	693b      	ldr	r3, [r7, #16]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	007a1200 	.word	0x007a1200
 8004e64:	0800f470 	.word	0x0800f470
 8004e68:	0800f480 	.word	0x0800f480
 8004e6c:	003d0900 	.word	0x003d0900

08004e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e74:	4b02      	ldr	r3, [pc, #8]	; (8004e80 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e76:	681b      	ldr	r3, [r3, #0]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr
 8004e80:	20000004 	.word	0x20000004

08004e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e88:	f7ff fff2 	bl	8004e70 <HAL_RCC_GetHCLKFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	4903      	ldr	r1, [pc, #12]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	0800f468 	.word	0x0800f468

08004eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004eb0:	f7ff ffde 	bl	8004e70 <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	0adb      	lsrs	r3, r3, #11
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4903      	ldr	r1, [pc, #12]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	0800f468 	.word	0x0800f468

08004ed4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	220f      	movs	r2, #15
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <HAL_RCC_GetClockConfig+0x58>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0203 	and.w	r2, r3, #3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ef0:	4b0e      	ldr	r3, [pc, #56]	; (8004f2c <HAL_RCC_GetClockConfig+0x58>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_GetClockConfig+0x58>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004f08:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_RCC_GetClockConfig+0x58>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	08db      	lsrs	r3, r3, #3
 8004f0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0207 	and.w	r2, r3, #7
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40022000 	.word	0x40022000

08004f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <RCC_Delay+0x34>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <RCC_Delay+0x38>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	0a5b      	lsrs	r3, r3, #9
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f50:	bf00      	nop
  }
  while (Delay --);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	60fa      	str	r2, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f9      	bne.n	8004f50 <RCC_Delay+0x1c>
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr
 8004f68:	20000004 	.word	0x20000004
 8004f6c:	10624dd3 	.word	0x10624dd3

08004f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d07d      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f90:	4b4f      	ldr	r3, [pc, #316]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4a4b      	ldr	r2, [pc, #300]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	61d3      	str	r3, [r2, #28]
 8004fa8:	4b49      	ldr	r3, [pc, #292]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb8:	4b46      	ldr	r3, [pc, #280]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d118      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a42      	ldr	r2, [pc, #264]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd0:	f7fe fff6 	bl	8003fc0 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd6:	e008      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd8:	f7fe fff2 	bl	8003fc0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	; 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e06d      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fea:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d027      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005014:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005024:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800502a:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d014      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fe ffc1 	bl	8003fc0 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005040:	e00a      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fe ffbd 	bl	8003fc0 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e036      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0ee      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005064:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4917      	ldr	r1, [pc, #92]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	4313      	orrs	r3, r2
 8005074:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507c:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005086:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	490b      	ldr	r1, [pc, #44]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	4904      	ldr	r1, [pc, #16]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40007000 	.word	0x40007000
 80050d8:	42420440 	.word	0x42420440

080050dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d00a      	beq.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b10      	cmp	r3, #16
 8005102:	f200 808a 	bhi.w	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d045      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d075      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005112:	e082      	b.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005114:	4b46      	ldr	r3, [pc, #280]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800511a:	4b45      	ldr	r3, [pc, #276]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d07b      	beq.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	0c9b      	lsrs	r3, r3, #18
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	4a41      	ldr	r2, [pc, #260]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005130:	5cd3      	ldrb	r3, [r2, r3]
 8005132:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d015      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800513e:	4b3c      	ldr	r3, [pc, #240]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	0c5b      	lsrs	r3, r3, #17
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	4a3b      	ldr	r2, [pc, #236]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00d      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005158:	4a38      	ldr	r2, [pc, #224]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	e004      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4a34      	ldr	r2, [pc, #208]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005174:	4b2e      	ldr	r3, [pc, #184]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800517c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005180:	d102      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	61bb      	str	r3, [r7, #24]
      break;
 8005186:	e04a      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
      break;
 8005196:	e042      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005198:	4b25      	ldr	r3, [pc, #148]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	d108      	bne.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80051b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	e01f      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c6:	d109      	bne.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80051d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	e00f      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051e6:	d11c      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d016      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80051f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80051f8:	61bb      	str	r3, [r7, #24]
      break;
 80051fa:	e012      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80051fc:	e011      	b.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80051fe:	f7ff fe55 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8005202:	4602      	mov	r2, r0
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	0b9b      	lsrs	r3, r3, #14
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	3301      	adds	r3, #1
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	fbb2 f3f3 	udiv	r3, r2, r3
 8005216:	61bb      	str	r3, [r7, #24]
      break;
 8005218:	e004      	b.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800521a:	bf00      	nop
 800521c:	e002      	b.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005222:	bf00      	nop
    }
  }
  return (frequency);
 8005224:	69bb      	ldr	r3, [r7, #24]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	0800f484 	.word	0x0800f484
 8005238:	0800f494 	.word	0x0800f494
 800523c:	007a1200 	.word	0x007a1200
 8005240:	003d0900 	.word	0x003d0900
 8005244:	aaaaaaab 	.word	0xaaaaaaab

08005248 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e07a      	b.n	8005354 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7c5b      	ldrb	r3, [r3, #17]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fe f932 	bl	80034d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 faea 	bl	8005854 <HAL_RTC_WaitForSynchro>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2204      	movs	r2, #4
 800528a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e061      	b.n	8005354 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fba3 	bl	80059dc <RTC_EnterInitMode>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2204      	movs	r2, #4
 80052a0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e056      	b.n	8005354 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0207 	bic.w	r2, r2, #7
 80052b4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80052be:	4b27      	ldr	r3, [pc, #156]	; (800535c <HAL_RTC_Init+0x114>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4a26      	ldr	r2, [pc, #152]	; (800535c <HAL_RTC_Init+0x114>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <HAL_RTC_Init+0x114>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	4921      	ldr	r1, [pc, #132]	; (800535c <HAL_RTC_Init+0x114>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d003      	beq.n	80052ee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e00e      	b.n	800530c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80052ee:	2001      	movs	r0, #1
 80052f0:	f7ff fef4 	bl	80050dc <HAL_RCCEx_GetPeriphCLKFreq>
 80052f4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2204      	movs	r2, #4
 8005300:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e026      	b.n	8005354 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b01      	subs	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	0c1a      	lsrs	r2, r3, #16
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f002 020f 	and.w	r2, r2, #15
 8005318:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	b292      	uxth	r2, r2
 8005322:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb81 	bl	8005a2c <RTC_ExitInitMode>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2204      	movs	r2, #4
 8005334:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e00c      	b.n	8005354 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005352:	2300      	movs	r3, #0
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40006c00 	.word	0x40006c00

08005360 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_RTC_SetTime+0x20>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e080      	b.n	8005486 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	7c1b      	ldrb	r3, [r3, #16]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_RTC_SetTime+0x30>
 800538c:	2302      	movs	r3, #2
 800538e:	e07a      	b.n	8005486 <HAL_RTC_SetTime+0x126>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2202      	movs	r2, #2
 800539a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d113      	bne.n	80053ca <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80053ac:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	4619      	mov	r1, r3
 80053b6:	460b      	mov	r3, r1
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a5b      	subs	r3, r3, r1
 80053bc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80053be:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80053c4:	4413      	add	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e01e      	b.n	8005408 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fb71 	bl	8005ab6 <RTC_Bcd2ToByte>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80053dc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	785b      	ldrb	r3, [r3, #1]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fb66 	bl	8005ab6 <RTC_Bcd2ToByte>
 80053ea:	4603      	mov	r3, r0
 80053ec:	461a      	mov	r2, r3
 80053ee:	4613      	mov	r3, r2
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80053f6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	789b      	ldrb	r3, [r3, #2]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fb5a 	bl	8005ab6 <RTC_Bcd2ToByte>
 8005402:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005404:	4423      	add	r3, r4
 8005406:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005408:	6979      	ldr	r1, [r7, #20]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fa7f 	bl	800590e <RTC_WriteTimeCounter>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2204      	movs	r2, #4
 800541a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e02f      	b.n	8005486 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0205 	bic.w	r2, r2, #5
 8005434:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fa90 	bl	800595c <RTC_ReadAlarmCounter>
 800543c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d018      	beq.n	8005478 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	429a      	cmp	r2, r3
 800544c:	d214      	bcs.n	8005478 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005454:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005458:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800545a:	6939      	ldr	r1, [r7, #16]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fa96 	bl	800598e <RTC_WriteAlarmCounter>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2204      	movs	r2, #4
 800546c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e006      	b.n	8005486 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	bd90      	pop	{r4, r7, pc}
	...

08005490 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_RTC_GetTime+0x28>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0b5      	b.n	8005628 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e0ac      	b.n	8005628 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f9ed 	bl	80058ae <RTC_ReadTimeCounter>
 80054d4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	4a55      	ldr	r2, [pc, #340]	; (8005630 <HAL_RTC_GetTime+0x1a0>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0adb      	lsrs	r3, r3, #11
 80054e0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4b52      	ldr	r3, [pc, #328]	; (8005630 <HAL_RTC_GetTime+0x1a0>)
 80054e6:	fba3 1302 	umull	r1, r3, r3, r2
 80054ea:	0adb      	lsrs	r3, r3, #11
 80054ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	4a4f      	ldr	r2, [pc, #316]	; (8005634 <HAL_RTC_GetTime+0x1a4>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	4a4a      	ldr	r2, [pc, #296]	; (8005630 <HAL_RTC_GetTime+0x1a0>)
 8005508:	fba2 1203 	umull	r1, r2, r2, r3
 800550c:	0ad2      	lsrs	r2, r2, #11
 800550e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005512:	fb01 f202 	mul.w	r2, r1, r2
 8005516:	1a9a      	subs	r2, r3, r2
 8005518:	4b46      	ldr	r3, [pc, #280]	; (8005634 <HAL_RTC_GetTime+0x1a4>)
 800551a:	fba3 1302 	umull	r1, r3, r3, r2
 800551e:	0959      	lsrs	r1, r3, #5
 8005520:	460b      	mov	r3, r1
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	1a5b      	subs	r3, r3, r1
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	1ad1      	subs	r1, r2, r3
 800552a:	b2ca      	uxtb	r2, r1
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b17      	cmp	r3, #23
 8005534:	d955      	bls.n	80055e2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4a3f      	ldr	r2, [pc, #252]	; (8005638 <HAL_RTC_GetTime+0x1a8>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005542:	6939      	ldr	r1, [r7, #16]
 8005544:	4b3c      	ldr	r3, [pc, #240]	; (8005638 <HAL_RTC_GetTime+0x1a8>)
 8005546:	fba3 2301 	umull	r2, r3, r3, r1
 800554a:	091a      	lsrs	r2, r3, #4
 800554c:	4613      	mov	r3, r2
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	4413      	add	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	1aca      	subs	r2, r1, r3
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f9fd 	bl	800595c <RTC_ReadAlarmCounter>
 8005562:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d008      	beq.n	800557e <HAL_RTC_GetTime+0xee>
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	429a      	cmp	r2, r3
 8005572:	d904      	bls.n	800557e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e002      	b.n	8005584 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4a2d      	ldr	r2, [pc, #180]	; (800563c <HAL_RTC_GetTime+0x1ac>)
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f9ba 	bl	800590e <RTC_WriteTimeCounter>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e041      	b.n	8005628 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d00c      	beq.n	80055c6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	4413      	add	r3, r2
 80055b2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80055b4:	69f9      	ldr	r1, [r7, #28]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 f9e9 	bl	800598e <RTC_WriteAlarmCounter>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e030      	b.n	8005628 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80055c6:	69f9      	ldr	r1, [r7, #28]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f9e0 	bl	800598e <RTC_WriteAlarmCounter>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e027      	b.n	8005628 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80055d8:	6979      	ldr	r1, [r7, #20]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fa88 	bl	8005af0 <RTC_DateUpdate>
 80055e0:	e003      	b.n	80055ea <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01a      	beq.n	8005626 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fa41 	bl	8005a7c <RTC_ByteToBcd2>
 80055fa:	4603      	mov	r3, r0
 80055fc:	461a      	mov	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fa38 	bl	8005a7c <RTC_ByteToBcd2>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	789b      	ldrb	r3, [r3, #2]
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fa2f 	bl	8005a7c <RTC_ByteToBcd2>
 800561e:	4603      	mov	r3, r0
 8005620:	461a      	mov	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	91a2b3c5 	.word	0x91a2b3c5
 8005634:	88888889 	.word	0x88888889
 8005638:	aaaaaaab 	.word	0xaaaaaaab
 800563c:	00015180 	.word	0x00015180

08005640 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_RTC_SetDate+0x24>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e097      	b.n	8005798 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	7c1b      	ldrb	r3, [r3, #16]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_RTC_SetDate+0x34>
 8005670:	2302      	movs	r3, #2
 8005672:	e091      	b.n	8005798 <HAL_RTC_SetDate+0x158>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2202      	movs	r2, #2
 800567e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10c      	bne.n	80056a0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	78da      	ldrb	r2, [r3, #3]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	785a      	ldrb	r2, [r3, #1]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	789a      	ldrb	r2, [r3, #2]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	739a      	strb	r2, [r3, #14]
 800569e:	e01a      	b.n	80056d6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	78db      	ldrb	r3, [r3, #3]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fa06 	bl	8005ab6 <RTC_Bcd2ToByte>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f9fd 	bl	8005ab6 <RTC_Bcd2ToByte>
 80056bc:	4603      	mov	r3, r0
 80056be:	461a      	mov	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	789b      	ldrb	r3, [r3, #2]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 f9f4 	bl	8005ab6 <RTC_Bcd2ToByte>
 80056ce:	4603      	mov	r3, r0
 80056d0:	461a      	mov	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	7bdb      	ldrb	r3, [r3, #15]
 80056da:	4618      	mov	r0, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	7b59      	ldrb	r1, [r3, #13]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	7b9b      	ldrb	r3, [r3, #14]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f000 fadf 	bl	8005ca8 <RTC_WeekDayNum>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	7b1a      	ldrb	r2, [r3, #12]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f8d7 	bl	80058ae <RTC_ReadTimeCounter>
 8005700:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4a26      	ldr	r2, [pc, #152]	; (80057a0 <HAL_RTC_SetDate+0x160>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	0adb      	lsrs	r3, r3, #11
 800570c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b18      	cmp	r3, #24
 8005712:	d93a      	bls.n	800578a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <HAL_RTC_SetDate+0x164>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <HAL_RTC_SetDate+0x168>)
 8005720:	fb02 f303 	mul.w	r3, r2, r3
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800572a:	69f9      	ldr	r1, [r7, #28]
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f8ee 	bl	800590e <RTC_WriteTimeCounter>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2204      	movs	r2, #4
 800573c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e027      	b.n	8005798 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f907 	bl	800595c <RTC_ReadAlarmCounter>
 800574e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d018      	beq.n	800578a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	429a      	cmp	r2, r3
 800575e:	d214      	bcs.n	800578a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005766:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800576a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f90d 	bl	800598e <RTC_WriteAlarmCounter>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2204      	movs	r2, #4
 800577e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e006      	b.n	8005798 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	91a2b3c5 	.word	0x91a2b3c5
 80057a4:	aaaaaaab 	.word	0xaaaaaaab
 80057a8:	00015180 	.word	0x00015180

080057ac <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	2100      	movs	r1, #0
 80057be:	460a      	mov	r2, r1
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	460a      	mov	r2, r1
 80057c4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_RTC_GetDate+0x26>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e03a      	b.n	800584c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80057d6:	f107 0314 	add.w	r3, r7, #20
 80057da:	2200      	movs	r2, #0
 80057dc:	4619      	mov	r1, r3
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff fe56 	bl	8005490 <HAL_RTC_GetTime>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e02e      	b.n	800584c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	7b1a      	ldrb	r2, [r3, #12]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	7bda      	ldrb	r2, [r3, #15]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	7b5a      	ldrb	r2, [r3, #13]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	7b9a      	ldrb	r2, [r3, #14]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01a      	beq.n	800584a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	78db      	ldrb	r3, [r3, #3]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 f92f 	bl	8005a7c <RTC_ByteToBcd2>
 800581e:	4603      	mov	r3, r0
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f926 	bl	8005a7c <RTC_ByteToBcd2>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	789b      	ldrb	r3, [r3, #2]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f91d 	bl	8005a7c <RTC_ByteToBcd2>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e01d      	b.n	80058a6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0208 	bic.w	r2, r2, #8
 8005878:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800587a:	f7fe fba1 	bl	8003fc0 <HAL_GetTick>
 800587e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005880:	e009      	b.n	8005896 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005882:	f7fe fb9d 	bl	8003fc0 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005890:	d901      	bls.n	8005896 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e007      	b.n	80058a6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0ee      	beq.n	8005882 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b087      	sub	sp, #28
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	827b      	strh	r3, [r7, #18]
 80058ba:	2300      	movs	r3, #0
 80058bc:	823b      	strh	r3, [r7, #16]
 80058be:	2300      	movs	r3, #0
 80058c0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80058de:	8a7a      	ldrh	r2, [r7, #18]
 80058e0:	8a3b      	ldrh	r3, [r7, #16]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d008      	beq.n	80058f8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80058e6:	8a3b      	ldrh	r3, [r7, #16]
 80058e8:	041a      	lsls	r2, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e004      	b.n	8005902 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80058f8:	8a7b      	ldrh	r3, [r7, #18]
 80058fa:	041a      	lsls	r2, r3, #16
 80058fc:	89fb      	ldrh	r3, [r7, #14]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005902:	697b      	ldr	r3, [r7, #20]
}
 8005904:	4618      	mov	r0, r3
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr

0800590e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f85d 	bl	80059dc <RTC_EnterInitMode>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
 800592c:	e011      	b.n	8005952 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	0c12      	lsrs	r2, r2, #16
 8005936:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	b292      	uxth	r2, r2
 8005940:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f872 	bl	8005a2c <RTC_ExitInitMode>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	81fb      	strh	r3, [r7, #14]
 8005968:	2300      	movs	r3, #0
 800596a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800597c:	89fb      	ldrh	r3, [r7, #14]
 800597e:	041a      	lsls	r2, r3, #16
 8005980:	89bb      	ldrh	r3, [r7, #12]
 8005982:	4313      	orrs	r3, r2
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr

0800598e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f81d 	bl	80059dc <RTC_EnterInitMode>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	e011      	b.n	80059d2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	0c12      	lsrs	r2, r2, #16
 80059b6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	b292      	uxth	r2, r2
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f832 	bl	8005a2c <RTC_ExitInitMode>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80059e8:	f7fe faea 	bl	8003fc0 <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059ee:	e009      	b.n	8005a04 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059f0:	f7fe fae6 	bl	8003fc0 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059fe:	d901      	bls.n	8005a04 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e00f      	b.n	8005a24 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0ee      	beq.n	80059f0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0210 	orr.w	r2, r2, #16
 8005a20:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0210 	bic.w	r2, r2, #16
 8005a46:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a48:	f7fe faba 	bl	8003fc0 <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a4e:	e009      	b.n	8005a64 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a50:	f7fe fab6 	bl	8003fc0 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a5e:	d901      	bls.n	8005a64 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e007      	b.n	8005a74 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0ee      	beq.n	8005a50 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005a8a:	e005      	b.n	8005a98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	3b0a      	subs	r3, #10
 8005a96:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d8f6      	bhi.n	8005a8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	b2db      	uxtb	r3, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr

08005ab6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	091b      	lsrs	r3, r3, #4
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	b2db      	uxtb	r3, r3
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr

08005af0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7bdb      	ldrb	r3, [r3, #15]
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	7b5b      	ldrb	r3, [r3, #13]
 8005b14:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7b9b      	ldrb	r3, [r3, #14]
 8005b1a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	e06f      	b.n	8005c02 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d011      	beq.n	8005b4c <RTC_DateUpdate+0x5c>
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d00e      	beq.n	8005b4c <RTC_DateUpdate+0x5c>
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d00b      	beq.n	8005b4c <RTC_DateUpdate+0x5c>
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b07      	cmp	r3, #7
 8005b38:	d008      	beq.n	8005b4c <RTC_DateUpdate+0x5c>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d005      	beq.n	8005b4c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b0a      	cmp	r3, #10
 8005b44:	d002      	beq.n	8005b4c <RTC_DateUpdate+0x5c>
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b0c      	cmp	r3, #12
 8005b4a:	d117      	bne.n	8005b7c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b1e      	cmp	r3, #30
 8005b50:	d803      	bhi.n	8005b5a <RTC_DateUpdate+0x6a>
      {
        day++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b58:	e050      	b.n	8005bfc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	d005      	beq.n	8005b6c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	3301      	adds	r3, #1
 8005b64:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b66:	2301      	movs	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b6a:	e047      	b.n	8005bfc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b70:	2301      	movs	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]
          year++;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	3301      	adds	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005b7a:	e03f      	b.n	8005bfc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d008      	beq.n	8005b94 <RTC_DateUpdate+0xa4>
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b06      	cmp	r3, #6
 8005b86:	d005      	beq.n	8005b94 <RTC_DateUpdate+0xa4>
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b09      	cmp	r3, #9
 8005b8c:	d002      	beq.n	8005b94 <RTC_DateUpdate+0xa4>
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b0b      	cmp	r3, #11
 8005b92:	d10c      	bne.n	8005bae <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b1d      	cmp	r3, #29
 8005b98:	d803      	bhi.n	8005ba2 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005ba0:	e02c      	b.n	8005bfc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005bac:	e026      	b.n	8005bfc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d123      	bne.n	8005bfc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b1b      	cmp	r3, #27
 8005bb8:	d803      	bhi.n	8005bc2 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e01c      	b.n	8005bfc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b1c      	cmp	r3, #28
 8005bc6:	d111      	bne.n	8005bec <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 f839 	bl	8005c44 <RTC_IsLeapYear>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e00d      	b.n	8005bfc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	3301      	adds	r3, #1
 8005be4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005be6:	2301      	movs	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e007      	b.n	8005bfc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b1d      	cmp	r3, #29
 8005bf0:	d104      	bne.n	8005bfc <RTC_DateUpdate+0x10c>
      {
        month++;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d38b      	bcc.n	8005b22 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6978      	ldr	r0, [r7, #20]
 8005c2e:	f000 f83b 	bl	8005ca8 <RTC_WeekDayNum>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	731a      	strb	r2, [r3, #12]
}
 8005c3a:	bf00      	nop
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e01d      	b.n	8005c9a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <RTC_IsLeapYear+0x60>)
 8005c62:	fba2 1203 	umull	r1, r2, r2, r3
 8005c66:	0952      	lsrs	r2, r2, #5
 8005c68:	2164      	movs	r1, #100	; 0x64
 8005c6a:	fb01 f202 	mul.w	r2, r1, r2
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e00f      	b.n	8005c9a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <RTC_IsLeapYear+0x60>)
 8005c7e:	fba2 1203 	umull	r1, r2, r2, r3
 8005c82:	09d2      	lsrs	r2, r2, #7
 8005c84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c88:	fb01 f202 	mul.w	r2, r1, r2
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005c98:	2300      	movs	r3, #0
  }
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr
 8005ca4:	51eb851f 	.word	0x51eb851f

08005ca8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70fb      	strb	r3, [r7, #3]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005cc6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d82d      	bhi.n	8005d2a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	4413      	add	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <RTC_WeekDayNum+0xe4>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	085a      	lsrs	r2, r3, #1
 8005ce2:	78bb      	ldrb	r3, [r7, #2]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	441a      	add	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4926      	ldr	r1, [pc, #152]	; (8005d90 <RTC_WeekDayNum+0xe8>)
 8005cf8:	fba1 1303 	umull	r1, r3, r1, r3
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	4922      	ldr	r1, [pc, #136]	; (8005d90 <RTC_WeekDayNum+0xe8>)
 8005d06:	fba1 1303 	umull	r1, r3, r1, r3
 8005d0a:	09db      	lsrs	r3, r3, #7
 8005d0c:	4413      	add	r3, r2
 8005d0e:	1d1a      	adds	r2, r3, #4
 8005d10:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <RTC_WeekDayNum+0xec>)
 8005d12:	fba3 1302 	umull	r1, r3, r3, r2
 8005d16:	1ad1      	subs	r1, r2, r3
 8005d18:	0849      	lsrs	r1, r1, #1
 8005d1a:	440b      	add	r3, r1
 8005d1c:	0899      	lsrs	r1, r3, #2
 8005d1e:	460b      	mov	r3, r1
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	1a5b      	subs	r3, r3, r1
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e029      	b.n	8005d7e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <RTC_WeekDayNum+0xe4>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	085a      	lsrs	r2, r3, #1
 8005d3e:	78bb      	ldrb	r3, [r7, #2]
 8005d40:	441a      	add	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	441a      	add	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	089b      	lsrs	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4910      	ldr	r1, [pc, #64]	; (8005d90 <RTC_WeekDayNum+0xe8>)
 8005d50:	fba1 1303 	umull	r1, r3, r1, r3
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	1ad2      	subs	r2, r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	490d      	ldr	r1, [pc, #52]	; (8005d90 <RTC_WeekDayNum+0xe8>)
 8005d5c:	fba1 1303 	umull	r1, r3, r1, r3
 8005d60:	09db      	lsrs	r3, r3, #7
 8005d62:	4413      	add	r3, r2
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <RTC_WeekDayNum+0xec>)
 8005d68:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6c:	1ad1      	subs	r1, r2, r3
 8005d6e:	0849      	lsrs	r1, r1, #1
 8005d70:	440b      	add	r3, r1
 8005d72:	0899      	lsrs	r1, r3, #2
 8005d74:	460b      	mov	r3, r1
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	1a5b      	subs	r3, r3, r1
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	b2db      	uxtb	r3, r3
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	38e38e39 	.word	0x38e38e39
 8005d90:	51eb851f 	.word	0x51eb851f
 8005d94:	24924925 	.word	0x24924925

08005d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e076      	b.n	8005e98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dba:	d009      	beq.n	8005dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	61da      	str	r2, [r3, #28]
 8005dc2:	e005      	b.n	8005dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fd fb98 	bl	8003520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e54:	ea42 0103 	orr.w	r1, r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	0c1a      	lsrs	r2, r3, #16
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f002 0204 	and.w	r2, r2, #4
 8005e76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69da      	ldr	r2, [r3, #28]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SPI_Transmit+0x22>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e12d      	b.n	800611e <HAL_SPI_Transmit+0x27e>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eca:	f7fe f879 	bl	8003fc0 <HAL_GetTick>
 8005ece:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d002      	beq.n	8005ee6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ee4:	e116      	b.n	8006114 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <HAL_SPI_Transmit+0x52>
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ef6:	e10d      	b.n	8006114 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2203      	movs	r2, #3
 8005efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3e:	d10f      	bne.n	8005f60 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d007      	beq.n	8005f7e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f86:	d14f      	bne.n	8006028 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <HAL_SPI_Transmit+0xf6>
 8005f90:	8afb      	ldrh	r3, [r7, #22]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d142      	bne.n	800601c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	881a      	ldrh	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	1c9a      	adds	r2, r3, #2
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fba:	e02f      	b.n	800601c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d112      	bne.n	8005ff0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	881a      	ldrh	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	1c9a      	adds	r2, r3, #2
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fee:	e015      	b.n	800601c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff0:	f7fd ffe6 	bl	8003fc0 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d803      	bhi.n	8006008 <HAL_SPI_Transmit+0x168>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d102      	bne.n	800600e <HAL_SPI_Transmit+0x16e>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800601a:	e07b      	b.n	8006114 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ca      	bne.n	8005fbc <HAL_SPI_Transmit+0x11c>
 8006026:	e050      	b.n	80060ca <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_SPI_Transmit+0x196>
 8006030:	8afb      	ldrh	r3, [r7, #22]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d144      	bne.n	80060c0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800605c:	e030      	b.n	80060c0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b02      	cmp	r3, #2
 800606a:	d113      	bne.n	8006094 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	7812      	ldrb	r2, [r2, #0]
 8006078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	86da      	strh	r2, [r3, #54]	; 0x36
 8006092:	e015      	b.n	80060c0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006094:	f7fd ff94 	bl	8003fc0 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d803      	bhi.n	80060ac <HAL_SPI_Transmit+0x20c>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d102      	bne.n	80060b2 <HAL_SPI_Transmit+0x212>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80060be:	e029      	b.n	8006114 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1c9      	bne.n	800605e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 fbd8 	bl	8006884 <SPI_EndRxTxTransaction>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060e8:	2300      	movs	r3, #0
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	e003      	b.n	8006114 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800611c:	7ffb      	ldrb	r3, [r7, #31]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b088      	sub	sp, #32
 800612a:	af02      	add	r7, sp, #8
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b01      	cmp	r3, #1
 8006144:	d002      	beq.n	800614c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006146:	2302      	movs	r3, #2
 8006148:	75fb      	strb	r3, [r7, #23]
    goto error;
 800614a:	e0fb      	b.n	8006344 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006154:	d112      	bne.n	800617c <HAL_SPI_Receive+0x56>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10e      	bne.n	800617c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2204      	movs	r2, #4
 8006162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f8ef 	bl	8006356 <HAL_SPI_TransmitReceive>
 8006178:	4603      	mov	r3, r0
 800617a:	e0e8      	b.n	800634e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_SPI_Receive+0x64>
 8006186:	2302      	movs	r3, #2
 8006188:	e0e1      	b.n	800634e <HAL_SPI_Receive+0x228>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006192:	f7fd ff15 	bl	8003fc0 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_SPI_Receive+0x7e>
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061a8:	e0cc      	b.n	8006344 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2204      	movs	r2, #4
 80061ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f0:	d10f      	bne.n	8006212 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006210:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d007      	beq.n	8006230 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d16a      	bne.n	800630e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006238:	e032      	b.n	80062a0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d115      	bne.n	8006274 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f103 020c 	add.w	r2, r3, #12
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	7812      	ldrb	r2, [r2, #0]
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006272:	e015      	b.n	80062a0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006274:	f7fd fea4 	bl	8003fc0 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d803      	bhi.n	800628c <HAL_SPI_Receive+0x166>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d102      	bne.n	8006292 <HAL_SPI_Receive+0x16c>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800629e:	e051      	b.n	8006344 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1c7      	bne.n	800623a <HAL_SPI_Receive+0x114>
 80062aa:	e035      	b.n	8006318 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d113      	bne.n	80062e2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	b292      	uxth	r2, r2
 80062c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	1c9a      	adds	r2, r3, #2
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062e0:	e015      	b.n	800630e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062e2:	f7fd fe6d 	bl	8003fc0 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d803      	bhi.n	80062fa <HAL_SPI_Receive+0x1d4>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d102      	bne.n	8006300 <HAL_SPI_Receive+0x1da>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800630c:	e01a      	b.n	8006344 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1c9      	bne.n	80062ac <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fa5f 	bl	80067e0 <SPI_EndRxTransaction>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	75fb      	strb	r3, [r7, #23]
 800633a:	e003      	b.n	8006344 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b08c      	sub	sp, #48	; 0x30
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006364:	2301      	movs	r3, #1
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_SPI_TransmitReceive+0x26>
 8006378:	2302      	movs	r3, #2
 800637a:	e198      	b.n	80066ae <HAL_SPI_TransmitReceive+0x358>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006384:	f7fd fe1c 	bl	8003fc0 <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800639a:	887b      	ldrh	r3, [r7, #2]
 800639c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800639e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d00f      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0x70>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ac:	d107      	bne.n	80063be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <HAL_SPI_TransmitReceive+0x68>
 80063b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d003      	beq.n	80063c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80063be:	2302      	movs	r3, #2
 80063c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063c4:	e16d      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x82>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x82>
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d103      	bne.n	80063e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063de:	e160      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d003      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2205      	movs	r2, #5
 80063f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	887a      	ldrh	r2, [r7, #2]
 8006404:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	887a      	ldrh	r2, [r7, #2]
 800640a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	887a      	ldrh	r2, [r7, #2]
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d007      	beq.n	8006448 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006450:	d17c      	bne.n	800654c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_SPI_TransmitReceive+0x10a>
 800645a:	8b7b      	ldrh	r3, [r7, #26]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d16a      	bne.n	8006536 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	881a      	ldrh	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	1c9a      	adds	r2, r3, #2
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006484:	e057      	b.n	8006536 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d11b      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x176>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <HAL_SPI_TransmitReceive+0x176>
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d113      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	881a      	ldrh	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	1c9a      	adds	r2, r3, #2
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d119      	bne.n	800650e <HAL_SPI_TransmitReceive+0x1b8>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d014      	beq.n	800650e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	b292      	uxth	r2, r2
 80064f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800650a:	2301      	movs	r3, #1
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800650e:	f7fd fd57 	bl	8003fc0 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651a:	429a      	cmp	r2, r3
 800651c:	d80b      	bhi.n	8006536 <HAL_SPI_TransmitReceive+0x1e0>
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d007      	beq.n	8006536 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006534:	e0b5      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1a2      	bne.n	8006486 <HAL_SPI_TransmitReceive+0x130>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d19d      	bne.n	8006486 <HAL_SPI_TransmitReceive+0x130>
 800654a:	e080      	b.n	800664e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_TransmitReceive+0x204>
 8006554:	8b7b      	ldrh	r3, [r7, #26]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d16f      	bne.n	800663a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006580:	e05b      	b.n	800663a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b02      	cmp	r3, #2
 800658e:	d11c      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x274>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d017      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x274>
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d114      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d119      	bne.n	800660c <HAL_SPI_TransmitReceive+0x2b6>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d014      	beq.n	800660c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006608:	2301      	movs	r3, #1
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800660c:	f7fd fcd8 	bl	8003fc0 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006618:	429a      	cmp	r2, r3
 800661a:	d803      	bhi.n	8006624 <HAL_SPI_TransmitReceive+0x2ce>
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d102      	bne.n	800662a <HAL_SPI_TransmitReceive+0x2d4>
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	2b00      	cmp	r3, #0
 8006628:	d107      	bne.n	800663a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006638:	e033      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d19e      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x22c>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d199      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800664e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f916 	bl	8006884 <SPI_EndRxTxTransaction>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800666a:	e01a      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006698:	e003      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3730      	adds	r7, #48	; 0x30
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c4:	b2db      	uxtb	r3, r3
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066e0:	f7fd fc6e 	bl	8003fc0 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066f0:	f7fd fc66 	bl	8003fc0 <HAL_GetTick>
 80066f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	015b      	lsls	r3, r3, #5
 80066fc:	0d1b      	lsrs	r3, r3, #20
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	fb02 f303 	mul.w	r3, r2, r3
 8006704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006706:	e054      	b.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670e:	d050      	beq.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006710:	f7fd fc56 	bl	8003fc0 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	429a      	cmp	r2, r3
 800671e:	d902      	bls.n	8006726 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d13d      	bne.n	80067a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800673e:	d111      	bne.n	8006764 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006748:	d004      	beq.n	8006754 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006752:	d107      	bne.n	8006764 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676c:	d10f      	bne.n	800678e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800678c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e017      	b.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4013      	ands	r3, r2
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	429a      	cmp	r2, r3
 80067c0:	bf0c      	ite	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	2300      	movne	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d19b      	bne.n	8006708 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000004 	.word	0x20000004

080067e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f4:	d111      	bne.n	800681a <SPI_EndRxTransaction+0x3a>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fe:	d004      	beq.n	800680a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006808:	d107      	bne.n	800681a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006818:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006822:	d117      	bne.n	8006854 <SPI_EndRxTransaction+0x74>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682c:	d112      	bne.n	8006854 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2200      	movs	r2, #0
 8006836:	2101      	movs	r1, #1
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff ff49 	bl	80066d0 <SPI_WaitFlagStateUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01a      	beq.n	800687a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	f043 0220 	orr.w	r2, r3, #32
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e013      	b.n	800687c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	2180      	movs	r1, #128	; 0x80
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff ff36 	bl	80066d0 <SPI_WaitFlagStateUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d007      	beq.n	800687a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e000      	b.n	800687c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	2180      	movs	r1, #128	; 0x80
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff ff18 	bl	80066d0 <SPI_WaitFlagStateUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	f043 0220 	orr.w	r2, r3, #32
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e000      	b.n	80068b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e041      	b.n	8006956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fc fe64 	bl	80035b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f000 fabe 	bl	8006e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	d001      	beq.n	8006978 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e032      	b.n	80069de <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <HAL_TIM_Base_Start+0x88>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00e      	beq.n	80069a8 <HAL_TIM_Base_Start+0x48>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006992:	d009      	beq.n	80069a8 <HAL_TIM_Base_Start+0x48>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a14      	ldr	r2, [pc, #80]	; (80069ec <HAL_TIM_Base_Start+0x8c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <HAL_TIM_Base_Start+0x48>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <HAL_TIM_Base_Start+0x90>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d111      	bne.n	80069cc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b06      	cmp	r3, #6
 80069b8:	d010      	beq.n	80069dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ca:	e007      	b.n	80069dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800

080069f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e03a      	b.n	8006a82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a18      	ldr	r2, [pc, #96]	; (8006a8c <HAL_TIM_Base_Start_IT+0x98>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x58>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a36:	d009      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x58>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a14      	ldr	r2, [pc, #80]	; (8006a90 <HAL_TIM_Base_Start_IT+0x9c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x58>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <HAL_TIM_Base_Start_IT+0xa0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d111      	bne.n	8006a70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d010      	beq.n	8006a80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6e:	e007      	b.n	8006a80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	40012c00 	.word	0x40012c00
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800

08006a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d122      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d11b      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0202 	mvn.w	r2, #2
 8006ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9b4 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006ae0:	e005      	b.n	8006aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f9a7 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f9b6 	bl	8006e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d122      	bne.n	8006b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d11b      	bne.n	8006b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0204 	mvn.w	r2, #4
 8006b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f98a 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006b34:	e005      	b.n	8006b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f97d 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f98c 	bl	8006e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d122      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d11b      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0208 	mvn.w	r2, #8
 8006b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2204      	movs	r2, #4
 8006b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f960 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f953 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f962 	bl	8006e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d122      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0210 	mvn.w	r2, #16
 8006bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f936 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f929 	bl	8006e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f938 	bl	8006e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d10e      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d107      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0201 	mvn.w	r2, #1
 8006c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fc fbee 	bl	80033f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d10e      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c34:	2b80      	cmp	r3, #128	; 0x80
 8006c36:	d107      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa7b 	bl	800713e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c52:	2b40      	cmp	r3, #64	; 0x40
 8006c54:	d10e      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d107      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f8fc 	bl	8006e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d10e      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d107      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0220 	mvn.w	r2, #32
 8006c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa46 	bl	800712c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0b4      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x186>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfc:	d03e      	beq.n	8006d7c <HAL_TIM_ConfigClockSource+0xd4>
 8006cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d02:	f200 8087 	bhi.w	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0a:	f000 8086 	beq.w	8006e1a <HAL_TIM_ConfigClockSource+0x172>
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d12:	d87f      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b70      	cmp	r3, #112	; 0x70
 8006d16:	d01a      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0xa6>
 8006d18:	2b70      	cmp	r3, #112	; 0x70
 8006d1a:	d87b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b60      	cmp	r3, #96	; 0x60
 8006d1e:	d050      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8006d20:	2b60      	cmp	r3, #96	; 0x60
 8006d22:	d877      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b50      	cmp	r3, #80	; 0x50
 8006d26:	d03c      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0xfa>
 8006d28:	2b50      	cmp	r3, #80	; 0x50
 8006d2a:	d873      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d058      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x13a>
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d86f      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b30      	cmp	r3, #48	; 0x30
 8006d36:	d064      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d38:	2b30      	cmp	r3, #48	; 0x30
 8006d3a:	d86b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d060      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d867      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d05c      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d05a      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x15a>
 8006d4c:	e062      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d5e:	f000 f968 	bl	8007032 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	609a      	str	r2, [r3, #8]
      break;
 8006d7a:	e04f      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d8c:	f000 f951 	bl	8007032 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d9e:	609a      	str	r2, [r3, #8]
      break;
 8006da0:	e03c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 f8c8 	bl	8006f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2150      	movs	r1, #80	; 0x50
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f91f 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e02c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f000 f8e6 	bl	8006fa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2160      	movs	r1, #96	; 0x60
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f90f 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006de0:	e01c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dee:	461a      	mov	r2, r3
 8006df0:	f000 f8a8 	bl	8006f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2140      	movs	r1, #64	; 0x40
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 f8ff 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006e00:	e00c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f000 f8f6 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006e12:	e003      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
      break;
 8006e18:	e000      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bc80      	pop	{r7}
 8006e58:	4770      	bx	lr

08006e5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
	...

08006e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a29      	ldr	r2, [pc, #164]	; (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00b      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9e:	d007      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <TIM_Base_SetConfig+0xbc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_Base_SetConfig+0x30>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <TIM_Base_SetConfig+0xc0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d108      	bne.n	8006ec2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	; (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00b      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d007      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <TIM_Base_SetConfig+0xbc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d003      	beq.n	8006ee2 <TIM_Base_SetConfig+0x62>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a18      	ldr	r2, [pc, #96]	; (8006f40 <TIM_Base_SetConfig+0xc0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d108      	bne.n	8006ef4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a07      	ldr	r2, [pc, #28]	; (8006f38 <TIM_Base_SetConfig+0xb8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800

08006f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	f023 0201 	bic.w	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f023 030a 	bic.w	r3, r3, #10
 8006f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f023 0210 	bic.w	r2, r3, #16
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	031b      	lsls	r3, r3, #12
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	621a      	str	r2, [r3, #32]
}
 8006ff4:	bf00      	nop
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	f043 0307 	orr.w	r3, r3, #7
 8007020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	609a      	str	r2, [r3, #8]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007032:	b480      	push	{r7}
 8007034:	b087      	sub	sp, #28
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800704c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	021a      	lsls	r2, r3, #8
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	431a      	orrs	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4313      	orrs	r3, r2
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	609a      	str	r2, [r3, #8]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr

08007070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007084:	2302      	movs	r3, #2
 8007086:	e046      	b.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a16      	ldr	r2, [pc, #88]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d4:	d009      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a12      	ldr	r2, [pc, #72]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d004      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a10      	ldr	r2, [pc, #64]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d10c      	bne.n	8007104 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800

0800712c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr

0800713e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e042      	b.n	80071e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fc fa56 	bl	8003628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2224      	movs	r2, #36	; 0x24
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fdc5 	bl	8007d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695a      	ldr	r2, [r3, #20]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	4613      	mov	r3, r2
 80071fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b20      	cmp	r3, #32
 800720e:	d16d      	bne.n	80072ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Transmit+0x2c>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e066      	b.n	80072ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2221      	movs	r2, #33	; 0x21
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722e:	f7fc fec7 	bl	8003fc0 <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	88fa      	ldrh	r2, [r7, #6]
 800723e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007248:	d108      	bne.n	800725c <HAL_UART_Transmit+0x6c>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	e003      	b.n	8007264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007260:	2300      	movs	r3, #0
 8007262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007264:	e02a      	b.n	80072bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2200      	movs	r2, #0
 800726e:	2180      	movs	r1, #128	; 0x80
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fb14 	bl	800789e <UART_WaitOnFlagUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e036      	b.n	80072ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10b      	bne.n	800729e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	3302      	adds	r3, #2
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	e007      	b.n	80072ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3301      	adds	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1cf      	bne.n	8007266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2140      	movs	r1, #64	; 0x40
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fae4 	bl	800789e <UART_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e006      	b.n	80072ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e000      	b.n	80072ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80072ec:	2302      	movs	r3, #2
  }
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	4613      	mov	r3, r2
 8007302:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b20      	cmp	r3, #32
 800730e:	d112      	bne.n	8007336 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_UART_Receive_IT+0x26>
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e00b      	b.n	8007338 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	461a      	mov	r2, r3
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fb24 	bl	800797a <UART_Start_Receive_IT>
 8007332:	4603      	mov	r3, r0
 8007334:	e000      	b.n	8007338 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007336:	2302      	movs	r3, #2
  }
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b0ba      	sub	sp, #232	; 0xe8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007366:	2300      	movs	r3, #0
 8007368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800736c:	2300      	movs	r3, #0
 800736e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800737e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10f      	bne.n	80073a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_UART_IRQHandler+0x66>
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fc01 	bl	8007ba6 <UART_Receive_IT>
      return;
 80073a4:	e25b      	b.n	800785e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 80de 	beq.w	800756c <HAL_UART_IRQHandler+0x22c>
 80073b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 80d1 	beq.w	800756c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <HAL_UART_IRQHandler+0xae>
 80073d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e6:	f043 0201 	orr.w	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <HAL_UART_IRQHandler+0xd2>
 80073fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	f043 0202 	orr.w	r2, r3, #2
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00b      	beq.n	8007436 <HAL_UART_IRQHandler+0xf6>
 800741e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	f043 0204 	orr.w	r2, r3, #4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d011      	beq.n	8007466 <HAL_UART_IRQHandler+0x126>
 8007442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d105      	bne.n	800745a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800744e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745e:	f043 0208 	orr.w	r2, r3, #8
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 81f2 	beq.w	8007854 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d008      	beq.n	800748e <HAL_UART_IRQHandler+0x14e>
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb8c 	bl	8007ba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d103      	bne.n	80074ba <HAL_UART_IRQHandler+0x17a>
 80074b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d04f      	beq.n	800755a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa96 	bl	80079ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d041      	beq.n	8007552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3314      	adds	r3, #20
 80074d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3314      	adds	r3, #20
 80074f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1d9      	bne.n	80074ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d013      	beq.n	800754a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	4a7e      	ldr	r2, [pc, #504]	; (8007720 <HAL_UART_IRQHandler+0x3e0>)
 8007528:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	4618      	mov	r0, r3
 8007530:	f7fc fe8e 	bl	8004250 <HAL_DMA_Abort_IT>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d016      	beq.n	8007568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007548:	e00e      	b.n	8007568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f993 	bl	8007876 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007550:	e00a      	b.n	8007568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f98f 	bl	8007876 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	e006      	b.n	8007568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f98b 	bl	8007876 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007566:	e175      	b.n	8007854 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007568:	bf00      	nop
    return;
 800756a:	e173      	b.n	8007854 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	2b01      	cmp	r3, #1
 8007572:	f040 814f 	bne.w	8007814 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757a:	f003 0310 	and.w	r3, r3, #16
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 8148 	beq.w	8007814 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007588:	f003 0310 	and.w	r3, r3, #16
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8141 	beq.w	8007814 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007592:	2300      	movs	r3, #0
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60bb      	str	r3, [r7, #8]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	60bb      	str	r3, [r7, #8]
 80075a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80b6 	beq.w	8007724 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 8145 	beq.w	8007858 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075d6:	429a      	cmp	r2, r3
 80075d8:	f080 813e 	bcs.w	8007858 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	f000 8088 	beq.w	8007700 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	330c      	adds	r3, #12
 80075f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007606:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800760a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800760e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	330c      	adds	r3, #12
 8007618:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800761c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007628:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1d9      	bne.n	80075f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3314      	adds	r3, #20
 8007642:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800764c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800764e:	f023 0301 	bic.w	r3, r3, #1
 8007652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3314      	adds	r3, #20
 800765c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007660:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007664:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007668:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e1      	bne.n	800763c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3314      	adds	r3, #20
 800767e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3314      	adds	r3, #20
 8007698:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800769c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800769e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e3      	bne.n	8007678 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	330c      	adds	r3, #12
 80076c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d0:	f023 0310 	bic.w	r3, r3, #16
 80076d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	330c      	adds	r3, #12
 80076de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80076e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e3      	bne.n	80076be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fc fd6d 	bl	80041da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800770e:	b29b      	uxth	r3, r3
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	b29b      	uxth	r3, r3
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f8b6 	bl	8007888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800771c:	e09c      	b.n	8007858 <HAL_UART_IRQHandler+0x518>
 800771e:	bf00      	nop
 8007720:	08007ab1 	.word	0x08007ab1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800772c:	b29b      	uxth	r3, r3
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 808e 	beq.w	800785c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8089 	beq.w	800785c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	330c      	adds	r3, #12
 8007750:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800775a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007760:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	330c      	adds	r3, #12
 800776a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800776e:	647a      	str	r2, [r7, #68]	; 0x44
 8007770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800777c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e3      	bne.n	800774a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3314      	adds	r3, #20
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	623b      	str	r3, [r7, #32]
   return(result);
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077a6:	633a      	str	r2, [r7, #48]	; 0x30
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1e3      	bne.n	8007782 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2220      	movs	r2, #32
 80077be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0310 	bic.w	r3, r3, #16
 80077de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	330c      	adds	r3, #12
 80077e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077ec:	61fa      	str	r2, [r7, #28]
 80077ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	69b9      	ldr	r1, [r7, #24]
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	617b      	str	r3, [r7, #20]
   return(result);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e3      	bne.n	80077c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f83b 	bl	8007888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007812:	e023      	b.n	800785c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <HAL_UART_IRQHandler+0x4f4>
 8007820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f953 	bl	8007ad8 <UART_Transmit_IT>
    return;
 8007832:	e014      	b.n	800785e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00e      	beq.n	800785e <HAL_UART_IRQHandler+0x51e>
 8007840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d008      	beq.n	800785e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f992 	bl	8007b76 <UART_EndTransmit_IT>
    return;
 8007852:	e004      	b.n	800785e <HAL_UART_IRQHandler+0x51e>
    return;
 8007854:	bf00      	nop
 8007856:	e002      	b.n	800785e <HAL_UART_IRQHandler+0x51e>
      return;
 8007858:	bf00      	nop
 800785a:	e000      	b.n	800785e <HAL_UART_IRQHandler+0x51e>
      return;
 800785c:	bf00      	nop
  }
}
 800785e:	37e8      	adds	r7, #232	; 0xe8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr

08007876 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr

08007888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b090      	sub	sp, #64	; 0x40
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	603b      	str	r3, [r7, #0]
 80078aa:	4613      	mov	r3, r2
 80078ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ae:	e050      	b.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b6:	d04c      	beq.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0x30>
 80078be:	f7fc fb7f 	bl	8003fc0 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d241      	bcs.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	330c      	adds	r3, #12
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	330c      	adds	r3, #12
 80078ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078ee:	637a      	str	r2, [r7, #52]	; 0x34
 80078f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e5      	bne.n	80078ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3314      	adds	r3, #20
 8007908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	613b      	str	r3, [r7, #16]
   return(result);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3314      	adds	r3, #20
 8007920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007922:	623a      	str	r2, [r7, #32]
 8007924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	69f9      	ldr	r1, [r7, #28]
 8007928:	6a3a      	ldr	r2, [r7, #32]
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e5      	bne.n	8007902 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2220      	movs	r2, #32
 800793a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e00f      	b.n	8007972 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4013      	ands	r3, r2
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	429a      	cmp	r2, r3
 8007960:	bf0c      	ite	eq
 8007962:	2301      	moveq	r3, #1
 8007964:	2300      	movne	r3, #0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	429a      	cmp	r2, r3
 800796e:	d09f      	beq.n	80078b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3740      	adds	r7, #64	; 0x40
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	4613      	mov	r3, r2
 8007986:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	88fa      	ldrh	r2, [r7, #6]
 8007992:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	88fa      	ldrh	r2, [r7, #6]
 8007998:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2222      	movs	r2, #34	; 0x22
 80079a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695a      	ldr	r2, [r3, #20]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0220 	orr.w	r2, r2, #32
 80079de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bc80      	pop	{r7}
 80079ea:	4770      	bx	lr

080079ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b095      	sub	sp, #84	; 0x54
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	330c      	adds	r3, #12
 8007a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a14:	643a      	str	r2, [r7, #64]	; 0x40
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e5      	bne.n	80079f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3314      	adds	r3, #20
 8007a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e5      	bne.n	8007a28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d119      	bne.n	8007a98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	330c      	adds	r3, #12
 8007a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f023 0310 	bic.w	r3, r3, #16
 8007a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a84:	61ba      	str	r2, [r7, #24]
 8007a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6979      	ldr	r1, [r7, #20]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	613b      	str	r3, [r7, #16]
   return(result);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e5      	bne.n	8007a64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007aa6:	bf00      	nop
 8007aa8:	3754      	adds	r7, #84	; 0x54
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bc80      	pop	{r7}
 8007aae:	4770      	bx	lr

08007ab0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7ff fed3 	bl	8007876 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b21      	cmp	r3, #33	; 0x21
 8007aea:	d13e      	bne.n	8007b6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af4:	d114      	bne.n	8007b20 <UART_Transmit_IT+0x48>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d110      	bne.n	8007b20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	1c9a      	adds	r2, r3, #2
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	621a      	str	r2, [r3, #32]
 8007b1e:	e008      	b.n	8007b32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	1c59      	adds	r1, r3, #1
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	6211      	str	r1, [r2, #32]
 8007b2a:	781a      	ldrb	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10f      	bne.n	8007b66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e000      	b.n	8007b6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b6a:	2302      	movs	r3, #2
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff fe64 	bl	8007864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b08c      	sub	sp, #48	; 0x30
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b22      	cmp	r3, #34	; 0x22
 8007bb8:	f040 80ae 	bne.w	8007d18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc4:	d117      	bne.n	8007bf6 <UART_Receive_IT+0x50>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d113      	bne.n	8007bf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	1c9a      	adds	r2, r3, #2
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8007bf4:	e026      	b.n	8007c44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c08:	d007      	beq.n	8007c1a <UART_Receive_IT+0x74>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <UART_Receive_IT+0x82>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	e008      	b.n	8007c3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	4619      	mov	r1, r3
 8007c52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d15d      	bne.n	8007d14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0220 	bic.w	r2, r2, #32
 8007c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695a      	ldr	r2, [r3, #20]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0201 	bic.w	r2, r2, #1
 8007c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d135      	bne.n	8007d0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f023 0310 	bic.w	r3, r3, #16
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc4:	623a      	str	r2, [r7, #32]
 8007cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	69f9      	ldr	r1, [r7, #28]
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d10a      	bne.n	8007cfc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fdc0 	bl	8007888 <HAL_UARTEx_RxEventCallback>
 8007d08:	e002      	b.n	8007d10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7fa fcba 	bl	8002684 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e002      	b.n	8007d1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e000      	b.n	8007d1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3730      	adds	r7, #48	; 0x30
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689a      	ldr	r2, [r3, #8]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007d5e:	f023 030c 	bic.w	r3, r3, #12
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a2c      	ldr	r2, [pc, #176]	; (8007e38 <UART_SetConfig+0x114>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d103      	bne.n	8007d94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007d8c:	f7fd f88e 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	e002      	b.n	8007d9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007d94:	f7fd f876 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8007d98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009a      	lsls	r2, r3, #2
 8007da4:	441a      	add	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db0:	4a22      	ldr	r2, [pc, #136]	; (8007e3c <UART_SetConfig+0x118>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	0119      	lsls	r1, r3, #4
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009a      	lsls	r2, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007dd0:	4b1a      	ldr	r3, [pc, #104]	; (8007e3c <UART_SetConfig+0x118>)
 8007dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	2064      	movs	r0, #100	; 0x64
 8007dda:	fb00 f303 	mul.w	r3, r0, r3
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	3332      	adds	r3, #50	; 0x32
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <UART_SetConfig+0x118>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007df0:	4419      	add	r1, r3
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009a      	lsls	r2, r3, #2
 8007dfc:	441a      	add	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e08:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <UART_SetConfig+0x118>)
 8007e0a:	fba3 0302 	umull	r0, r3, r3, r2
 8007e0e:	095b      	lsrs	r3, r3, #5
 8007e10:	2064      	movs	r0, #100	; 0x64
 8007e12:	fb00 f303 	mul.w	r3, r0, r3
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	011b      	lsls	r3, r3, #4
 8007e1a:	3332      	adds	r3, #50	; 0x32
 8007e1c:	4a07      	ldr	r2, [pc, #28]	; (8007e3c <UART_SetConfig+0x118>)
 8007e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	f003 020f 	and.w	r2, r3, #15
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40013800 	.word	0x40013800
 8007e3c:	51eb851f 	.word	0x51eb851f

08007e40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f103 0208 	add.w	r2, r3, #8
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f103 0208 	add.w	r2, r3, #8
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f103 0208 	add.w	r2, r3, #8
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr

08007e7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bc80      	pop	{r7}
 8007e94:	4770      	bx	lr

08007e96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e96:	b480      	push	{r7}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bc80      	pop	{r7}
 8007eda:	4770      	bx	lr

08007edc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d103      	bne.n	8007efc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e00c      	b.n	8007f16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3308      	adds	r3, #8
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	e002      	b.n	8007f0a <vListInsert+0x2e>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d2f6      	bcs.n	8007f04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	601a      	str	r2, [r3, #0]
}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6892      	ldr	r2, [r2, #8]
 8007f62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	6852      	ldr	r2, [r2, #4]
 8007f6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d103      	bne.n	8007f80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	1e5a      	subs	r2, r3, #1
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr
	...

08007fa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fca:	f001 fb67 	bl	800969c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd6:	68f9      	ldr	r1, [r7, #12]
 8007fd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fda:	fb01 f303 	mul.w	r3, r1, r3
 8007fde:	441a      	add	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	68f9      	ldr	r1, [r7, #12]
 8007ffe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008000:	fb01 f303 	mul.w	r3, r1, r3
 8008004:	441a      	add	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	22ff      	movs	r2, #255	; 0xff
 800800e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	22ff      	movs	r2, #255	; 0xff
 8008016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d114      	bne.n	800804a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01a      	beq.n	800805e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3310      	adds	r3, #16
 800802c:	4618      	mov	r0, r3
 800802e:	f000 fec1 	bl	8008db4 <xTaskRemoveFromEventList>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d012      	beq.n	800805e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <xQueueGenericReset+0xcc>)
 800803a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	e009      	b.n	800805e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3310      	adds	r3, #16
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fef6 	bl	8007e40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3324      	adds	r3, #36	; 0x24
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fef1 	bl	8007e40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800805e:	f001 fb4d 	bl	80096fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008062:	2301      	movs	r3, #1
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	e000ed04 	.word	0xe000ed04

08008070 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008070:	b580      	push	{r7, lr}
 8008072:	b08a      	sub	sp, #40	; 0x28
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	613b      	str	r3, [r7, #16]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	e004      	b.n	80080b0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	3348      	adds	r3, #72	; 0x48
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 fbf1 	bl	800989c <pvPortMalloc>
 80080ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00f      	beq.n	80080e2 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	3348      	adds	r3, #72	; 0x48
 80080c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080d0:	79fa      	ldrb	r2, [r7, #7]
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	4613      	mov	r3, r2
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 f805 	bl	80080ec <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80080e2:	69bb      	ldr	r3, [r7, #24]
	}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3720      	adds	r7, #32
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d103      	bne.n	8008108 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	e002      	b.n	800810e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800811a:	2101      	movs	r1, #1
 800811c:	69b8      	ldr	r0, [r7, #24]
 800811e:	f7ff ff3f 	bl	8007fa0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b08e      	sub	sp, #56	; 0x38
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	623b      	str	r3, [r7, #32]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <xQueueGiveFromISR+0x48>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	61fb      	str	r3, [r7, #28]
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d103      	bne.n	8008182 <xQueueGiveFromISR+0x58>
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <xQueueGiveFromISR+0x5c>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <xQueueGiveFromISR+0x5e>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10a      	bne.n	80081a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	61bb      	str	r3, [r7, #24]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a2:	f001 fb3d 	bl	8009820 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081a6:	f3ef 8211 	mrs	r2, BASEPRI
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	617a      	str	r2, [r7, #20]
 80081bc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d22b      	bcs.n	800822a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d112      	bne.n	8008214 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d016      	beq.n	8008224 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	3324      	adds	r3, #36	; 0x24
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fdda 	bl	8008db4 <xTaskRemoveFromEventList>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00e      	beq.n	8008224 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2201      	movs	r2, #1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e007      	b.n	8008224 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008218:	3301      	adds	r3, #1
 800821a:	b2db      	uxtb	r3, r3
 800821c:	b25a      	sxtb	r2, r3
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008224:	2301      	movs	r3, #1
 8008226:	637b      	str	r3, [r7, #52]	; 0x34
 8008228:	e001      	b.n	800822e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800822a:	2300      	movs	r3, #0
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800823c:	4618      	mov	r0, r3
 800823e:	3738      	adds	r7, #56	; 0x38
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08e      	sub	sp, #56	; 0x38
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800824e:	2300      	movs	r3, #0
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008256:	2300      	movs	r3, #0
 8008258:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10a      	bne.n	8008276 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	623b      	str	r3, [r7, #32]
}
 8008272:	bf00      	nop
 8008274:	e7fe      	b.n	8008274 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	61fb      	str	r3, [r7, #28]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008294:	f000 ff52 	bl	800913c <xTaskGetSchedulerState>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <xQueueSemaphoreTake+0x60>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <xQueueSemaphoreTake+0x64>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <xQueueSemaphoreTake+0x66>
 80082a8:	2300      	movs	r3, #0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	61bb      	str	r3, [r7, #24]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80082c4:	f001 f9ea 	bl	800969c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d024      	beq.n	800831e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	1e5a      	subs	r2, r3, #1
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80082e4:	f001 f86e 	bl	80093c4 <pvTaskIncrementMutexHeldCount>
 80082e8:	4602      	mov	r2, r0
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00f      	beq.n	8008316 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	3310      	adds	r3, #16
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fd5a 	bl	8008db4 <xTaskRemoveFromEventList>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008306:	4b54      	ldr	r3, [pc, #336]	; (8008458 <xQueueSemaphoreTake+0x214>)
 8008308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008316:	f001 f9f1 	bl	80096fc <vPortExitCritical>
				return pdPASS;
 800831a:	2301      	movs	r3, #1
 800831c:	e097      	b.n	800844e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d111      	bne.n	8008348 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	617b      	str	r3, [r7, #20]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008340:	f001 f9dc 	bl	80096fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008344:	2300      	movs	r3, #0
 8008346:	e082      	b.n	800844e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800834e:	f107 030c 	add.w	r3, r7, #12
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fd90 	bl	8008e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008358:	2301      	movs	r3, #1
 800835a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800835c:	f001 f9ce 	bl	80096fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008360:	f000 fb3a 	bl	80089d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008364:	f001 f99a 	bl	800969c <vPortEnterCritical>
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800836e:	b25b      	sxtb	r3, r3
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d103      	bne.n	800837e <xQueueSemaphoreTake+0x13a>
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008384:	b25b      	sxtb	r3, r3
 8008386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838a:	d103      	bne.n	8008394 <xQueueSemaphoreTake+0x150>
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008394:	f001 f9b2 	bl	80096fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008398:	463a      	mov	r2, r7
 800839a:	f107 030c 	add.w	r3, r7, #12
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fd7f 	bl	8008ea4 <xTaskCheckForTimeOut>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d132      	bne.n	8008412 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083ae:	f000 f8be 	bl	800852e <prvIsQueueEmpty>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d026      	beq.n	8008406 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d109      	bne.n	80083d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80083c0:	f001 f96c 	bl	800969c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fed5 	bl	8009178 <xTaskPriorityInherit>
 80083ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80083d0:	f001 f994 	bl	80096fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	3324      	adds	r3, #36	; 0x24
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fcc5 	bl	8008d6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e4:	f000 f851 	bl	800848a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083e8:	f000 fb04 	bl	80089f4 <xTaskResumeAll>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f47f af68 	bne.w	80082c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80083f4:	4b18      	ldr	r3, [pc, #96]	; (8008458 <xQueueSemaphoreTake+0x214>)
 80083f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	e75e      	b.n	80082c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008408:	f000 f83f 	bl	800848a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800840c:	f000 faf2 	bl	80089f4 <xTaskResumeAll>
 8008410:	e758      	b.n	80082c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008414:	f000 f839 	bl	800848a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008418:	f000 faec 	bl	80089f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800841c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800841e:	f000 f886 	bl	800852e <prvIsQueueEmpty>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	f43f af4d 	beq.w	80082c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00d      	beq.n	800844c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008430:	f001 f934 	bl	800969c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008436:	f000 f811 	bl	800845c <prvGetDisinheritPriorityAfterTimeout>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008442:	4618      	mov	r0, r3
 8008444:	f000 ff1e 	bl	8009284 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008448:	f001 f958 	bl	80096fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800844c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800844e:	4618      	mov	r0, r3
 8008450:	3738      	adds	r7, #56	; 0x38
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	e000ed04 	.word	0xe000ed04

0800845c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f1c3 0307 	rsb	r3, r3, #7
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e001      	b.n	800847e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800847e:	68fb      	ldr	r3, [r7, #12]
	}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr

0800848a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008492:	f001 f903 	bl	800969c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800849c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800849e:	e011      	b.n	80084c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d012      	beq.n	80084ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fc81 	bl	8008db4 <xTaskRemoveFromEventList>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084b8:	f000 fd56 	bl	8008f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	3b01      	subs	r3, #1
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dce9      	bgt.n	80084a0 <prvUnlockQueue+0x16>
 80084cc:	e000      	b.n	80084d0 <prvUnlockQueue+0x46>
					break;
 80084ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	22ff      	movs	r2, #255	; 0xff
 80084d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80084d8:	f001 f910 	bl	80096fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084dc:	f001 f8de 	bl	800969c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084e8:	e011      	b.n	800850e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d012      	beq.n	8008518 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3310      	adds	r3, #16
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 fc5c 	bl	8008db4 <xTaskRemoveFromEventList>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008502:	f000 fd31 	bl	8008f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008506:	7bbb      	ldrb	r3, [r7, #14]
 8008508:	3b01      	subs	r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800850e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008512:	2b00      	cmp	r3, #0
 8008514:	dce9      	bgt.n	80084ea <prvUnlockQueue+0x60>
 8008516:	e000      	b.n	800851a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008518:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	22ff      	movs	r2, #255	; 0xff
 800851e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008522:	f001 f8eb 	bl	80096fc <vPortExitCritical>
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008536:	f001 f8b1 	bl	800969c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008542:	2301      	movs	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	e001      	b.n	800854c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800854c:	f001 f8d6 	bl	80096fc <vPortExitCritical>

	return xReturn;
 8008550:	68fb      	ldr	r3, [r7, #12]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800855a:	b580      	push	{r7, lr}
 800855c:	b08e      	sub	sp, #56	; 0x38
 800855e:	af04      	add	r7, sp, #16
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
 8008566:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <xTaskCreateStatic+0x2a>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	623b      	str	r3, [r7, #32]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10a      	bne.n	80085a0 <xTaskCreateStatic+0x46>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	61fb      	str	r3, [r7, #28]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085a0:	23a0      	movs	r3, #160	; 0xa0
 80085a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2ba0      	cmp	r3, #160	; 0xa0
 80085a8:	d00a      	beq.n	80085c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	61bb      	str	r3, [r7, #24]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d01e      	beq.n	8008604 <xTaskCreateStatic+0xaa>
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01b      	beq.n	8008604 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085de:	2300      	movs	r3, #0
 80085e0:	9303      	str	r3, [sp, #12]
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	9302      	str	r3, [sp, #8]
 80085e6:	f107 0314 	add.w	r3, r7, #20
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 f850 	bl	800869c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085fe:	f000 f8e3 	bl	80087c8 <prvAddNewTaskToReadyList>
 8008602:	e001      	b.n	8008608 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008604:	2300      	movs	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008608:	697b      	ldr	r3, [r7, #20]
	}
 800860a:	4618      	mov	r0, r3
 800860c:	3728      	adds	r7, #40	; 0x28
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008612:	b580      	push	{r7, lr}
 8008614:	b08c      	sub	sp, #48	; 0x30
 8008616:	af04      	add	r7, sp, #16
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f001 f938 	bl	800989c <pvPortMalloc>
 800862c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00e      	beq.n	8008652 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008634:	20a0      	movs	r0, #160	; 0xa0
 8008636:	f001 f931 	bl	800989c <pvPortMalloc>
 800863a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	631a      	str	r2, [r3, #48]	; 0x30
 8008648:	e005      	b.n	8008656 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800864a:	6978      	ldr	r0, [r7, #20]
 800864c:	f001 f9ea 	bl	8009a24 <vPortFree>
 8008650:	e001      	b.n	8008656 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d017      	beq.n	800868c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008664:	88fa      	ldrh	r2, [r7, #6]
 8008666:	2300      	movs	r3, #0
 8008668:	9303      	str	r3, [sp, #12]
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	9302      	str	r3, [sp, #8]
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f80e 	bl	800869c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008680:	69f8      	ldr	r0, [r7, #28]
 8008682:	f000 f8a1 	bl	80087c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008686:	2301      	movs	r3, #1
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e002      	b.n	8008692 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800868c:	f04f 33ff 	mov.w	r3, #4294967295
 8008690:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008692:	69bb      	ldr	r3, [r7, #24]
	}
 8008694:	4618      	mov	r0, r3
 8008696:	3720      	adds	r7, #32
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086b4:	3b01      	subs	r3, #1
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	f023 0307 	bic.w	r3, r3, #7
 80086c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	617b      	str	r3, [r7, #20]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086e4:	2300      	movs	r3, #0
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	e012      	b.n	8008710 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	4413      	add	r3, r2
 80086f0:	7819      	ldrb	r1, [r3, #0]
 80086f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	3334      	adds	r3, #52	; 0x34
 80086fa:	460a      	mov	r2, r1
 80086fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d006      	beq.n	8008718 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	3301      	adds	r3, #1
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	2b0f      	cmp	r3, #15
 8008714:	d9e9      	bls.n	80086ea <prvInitialiseNewTask+0x4e>
 8008716:	e000      	b.n	800871a <prvInitialiseNewTask+0x7e>
		{
			break;
 8008718:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	2b06      	cmp	r3, #6
 8008726:	d901      	bls.n	800872c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008728:	2306      	movs	r3, #6
 800872a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008730:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008736:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	2200      	movs	r2, #0
 800873c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	3304      	adds	r3, #4
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fb9b 	bl	8007e7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	3318      	adds	r3, #24
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fb96 	bl	8007e7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008756:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	f1c3 0207 	rsb	r2, r3, #7
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008766:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	2200      	movs	r2, #0
 8008774:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	334c      	adds	r3, #76	; 0x4c
 800877c:	224c      	movs	r2, #76	; 0x4c
 800877e:	2100      	movs	r1, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f002 fa70 	bl	800ac66 <memset>
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	4a0c      	ldr	r2, [pc, #48]	; (80087bc <prvInitialiseNewTask+0x120>)
 800878a:	651a      	str	r2, [r3, #80]	; 0x50
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	4a0c      	ldr	r2, [pc, #48]	; (80087c0 <prvInitialiseNewTask+0x124>)
 8008790:	655a      	str	r2, [r3, #84]	; 0x54
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	4a0b      	ldr	r2, [pc, #44]	; (80087c4 <prvInitialiseNewTask+0x128>)
 8008796:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	68f9      	ldr	r1, [r7, #12]
 800879c:	69b8      	ldr	r0, [r7, #24]
 800879e:	f000 fe8b 	bl	80094b8 <pxPortInitialiseStack>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b4:	bf00      	nop
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20003e50 	.word	0x20003e50
 80087c0:	20003eb8 	.word	0x20003eb8
 80087c4:	20003f20 	.word	0x20003f20

080087c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087d0:	f000 ff64 	bl	800969c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087d4:	4b2a      	ldr	r3, [pc, #168]	; (8008880 <prvAddNewTaskToReadyList+0xb8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3301      	adds	r3, #1
 80087da:	4a29      	ldr	r2, [pc, #164]	; (8008880 <prvAddNewTaskToReadyList+0xb8>)
 80087dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087de:	4b29      	ldr	r3, [pc, #164]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087e6:	4a27      	ldr	r2, [pc, #156]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087ec:	4b24      	ldr	r3, [pc, #144]	; (8008880 <prvAddNewTaskToReadyList+0xb8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d110      	bne.n	8008816 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087f4:	f000 fbdc 	bl	8008fb0 <prvInitialiseTaskLists>
 80087f8:	e00d      	b.n	8008816 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087fa:	4b23      	ldr	r3, [pc, #140]	; (8008888 <prvAddNewTaskToReadyList+0xc0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008802:	4b20      	ldr	r3, [pc, #128]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d802      	bhi.n	8008816 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008810:	4a1c      	ldr	r2, [pc, #112]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <prvAddNewTaskToReadyList+0xc4>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3301      	adds	r3, #1
 800881c:	4a1b      	ldr	r2, [pc, #108]	; (800888c <prvAddNewTaskToReadyList+0xc4>)
 800881e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	2201      	movs	r2, #1
 8008826:	409a      	lsls	r2, r3
 8008828:	4b19      	ldr	r3, [pc, #100]	; (8008890 <prvAddNewTaskToReadyList+0xc8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4313      	orrs	r3, r2
 800882e:	4a18      	ldr	r2, [pc, #96]	; (8008890 <prvAddNewTaskToReadyList+0xc8>)
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4a15      	ldr	r2, [pc, #84]	; (8008894 <prvAddNewTaskToReadyList+0xcc>)
 8008840:	441a      	add	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3304      	adds	r3, #4
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f7ff fb24 	bl	8007e96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800884e:	f000 ff55 	bl	80096fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008852:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <prvAddNewTaskToReadyList+0xc0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00e      	beq.n	8008878 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	429a      	cmp	r2, r3
 8008866:	d207      	bcs.n	8008878 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <prvAddNewTaskToReadyList+0xd0>)
 800886a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000e04 	.word	0x20000e04
 8008884:	20000d04 	.word	0x20000d04
 8008888:	20000e10 	.word	0x20000e10
 800888c:	20000e20 	.word	0x20000e20
 8008890:	20000e0c 	.word	0x20000e0c
 8008894:	20000d08 	.word	0x20000d08
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d017      	beq.n	80088de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088ae:	4b13      	ldr	r3, [pc, #76]	; (80088fc <vTaskDelay+0x60>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <vTaskDelay+0x30>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60bb      	str	r3, [r7, #8]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088cc:	f000 f884 	bl	80089d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fd8a 	bl	80093ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088d8:	f000 f88c 	bl	80089f4 <xTaskResumeAll>
 80088dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d107      	bne.n	80088f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80088e4:	4b06      	ldr	r3, [pc, #24]	; (8008900 <vTaskDelay+0x64>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088f4:	bf00      	nop
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000e2c 	.word	0x20000e2c
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008912:	463a      	mov	r2, r7
 8008914:	1d39      	adds	r1, r7, #4
 8008916:	f107 0308 	add.w	r3, r7, #8
 800891a:	4618      	mov	r0, r3
 800891c:	f7f9 fe9a 	bl	8002654 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	9202      	str	r2, [sp, #8]
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	2300      	movs	r3, #0
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	2300      	movs	r3, #0
 8008930:	460a      	mov	r2, r1
 8008932:	4921      	ldr	r1, [pc, #132]	; (80089b8 <vTaskStartScheduler+0xb4>)
 8008934:	4821      	ldr	r0, [pc, #132]	; (80089bc <vTaskStartScheduler+0xb8>)
 8008936:	f7ff fe10 	bl	800855a <xTaskCreateStatic>
 800893a:	4603      	mov	r3, r0
 800893c:	4a20      	ldr	r2, [pc, #128]	; (80089c0 <vTaskStartScheduler+0xbc>)
 800893e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008940:	4b1f      	ldr	r3, [pc, #124]	; (80089c0 <vTaskStartScheduler+0xbc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008948:	2301      	movs	r3, #1
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	e001      	b.n	8008952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d11b      	bne.n	8008990 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	613b      	str	r3, [r7, #16]
}
 800896a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800896c:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <vTaskStartScheduler+0xc0>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	334c      	adds	r3, #76	; 0x4c
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <vTaskStartScheduler+0xc4>)
 8008974:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008976:	4b15      	ldr	r3, [pc, #84]	; (80089cc <vTaskStartScheduler+0xc8>)
 8008978:	f04f 32ff 	mov.w	r2, #4294967295
 800897c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800897e:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <vTaskStartScheduler+0xcc>)
 8008980:	2201      	movs	r2, #1
 8008982:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008984:	4b13      	ldr	r3, [pc, #76]	; (80089d4 <vTaskStartScheduler+0xd0>)
 8008986:	2200      	movs	r2, #0
 8008988:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800898a:	f000 fe15 	bl	80095b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800898e:	e00e      	b.n	80089ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d10a      	bne.n	80089ae <vTaskStartScheduler+0xaa>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	60fb      	str	r3, [r7, #12]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <vTaskStartScheduler+0xa8>
}
 80089ae:	bf00      	nop
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	0800f450 	.word	0x0800f450
 80089bc:	08008f81 	.word	0x08008f81
 80089c0:	20000e28 	.word	0x20000e28
 80089c4:	20000d04 	.word	0x20000d04
 80089c8:	2000006c 	.word	0x2000006c
 80089cc:	20000e24 	.word	0x20000e24
 80089d0:	20000e10 	.word	0x20000e10
 80089d4:	20000e08 	.word	0x20000e08

080089d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80089dc:	4b04      	ldr	r3, [pc, #16]	; (80089f0 <vTaskSuspendAll+0x18>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	4a03      	ldr	r2, [pc, #12]	; (80089f0 <vTaskSuspendAll+0x18>)
 80089e4:	6013      	str	r3, [r2, #0]
}
 80089e6:	bf00      	nop
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000e2c 	.word	0x20000e2c

080089f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a02:	4b41      	ldr	r3, [pc, #260]	; (8008b08 <xTaskResumeAll+0x114>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10a      	bne.n	8008a20 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	603b      	str	r3, [r7, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a20:	f000 fe3c 	bl	800969c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a24:	4b38      	ldr	r3, [pc, #224]	; (8008b08 <xTaskResumeAll+0x114>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	4a37      	ldr	r2, [pc, #220]	; (8008b08 <xTaskResumeAll+0x114>)
 8008a2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a2e:	4b36      	ldr	r3, [pc, #216]	; (8008b08 <xTaskResumeAll+0x114>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d161      	bne.n	8008afa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a36:	4b35      	ldr	r3, [pc, #212]	; (8008b0c <xTaskResumeAll+0x118>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d05d      	beq.n	8008afa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a3e:	e02e      	b.n	8008a9e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008a40:	4b33      	ldr	r3, [pc, #204]	; (8008b10 <xTaskResumeAll+0x11c>)
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3318      	adds	r3, #24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fa7d 	bl	8007f4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fa78 	bl	8007f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	2201      	movs	r2, #1
 8008a62:	409a      	lsls	r2, r3
 8008a64:	4b2b      	ldr	r3, [pc, #172]	; (8008b14 <xTaskResumeAll+0x120>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <xTaskResumeAll+0x120>)
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4a27      	ldr	r2, [pc, #156]	; (8008b18 <xTaskResumeAll+0x124>)
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7ff fa06 	bl	8007e96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8e:	4b23      	ldr	r3, [pc, #140]	; (8008b1c <xTaskResumeAll+0x128>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d302      	bcc.n	8008a9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008a98:	4b21      	ldr	r3, [pc, #132]	; (8008b20 <xTaskResumeAll+0x12c>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <xTaskResumeAll+0x11c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1cc      	bne.n	8008a40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008aac:	f000 fb22 	bl	80090f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008ab0:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <xTaskResumeAll+0x130>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d010      	beq.n	8008ade <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008abc:	f000 f836 	bl	8008b2c <xTaskIncrementTick>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008ac6:	4b16      	ldr	r3, [pc, #88]	; (8008b20 <xTaskResumeAll+0x12c>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1f1      	bne.n	8008abc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008ad8:	4b12      	ldr	r3, [pc, #72]	; (8008b24 <xTaskResumeAll+0x130>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ade:	4b10      	ldr	r3, [pc, #64]	; (8008b20 <xTaskResumeAll+0x12c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d009      	beq.n	8008afa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008aea:	4b0f      	ldr	r3, [pc, #60]	; (8008b28 <xTaskResumeAll+0x134>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008afa:	f000 fdff 	bl	80096fc <vPortExitCritical>

	return xAlreadyYielded;
 8008afe:	68bb      	ldr	r3, [r7, #8]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000e2c 	.word	0x20000e2c
 8008b0c:	20000e04 	.word	0x20000e04
 8008b10:	20000dc4 	.word	0x20000dc4
 8008b14:	20000e0c 	.word	0x20000e0c
 8008b18:	20000d08 	.word	0x20000d08
 8008b1c:	20000d04 	.word	0x20000d04
 8008b20:	20000e18 	.word	0x20000e18
 8008b24:	20000e14 	.word	0x20000e14
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b36:	4b51      	ldr	r3, [pc, #324]	; (8008c7c <xTaskIncrementTick+0x150>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f040 808d 	bne.w	8008c5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b40:	4b4f      	ldr	r3, [pc, #316]	; (8008c80 <xTaskIncrementTick+0x154>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3301      	adds	r3, #1
 8008b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b48:	4a4d      	ldr	r2, [pc, #308]	; (8008c80 <xTaskIncrementTick+0x154>)
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d120      	bne.n	8008b96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b54:	4b4b      	ldr	r3, [pc, #300]	; (8008c84 <xTaskIncrementTick+0x158>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <xTaskIncrementTick+0x48>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	603b      	str	r3, [r7, #0]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <xTaskIncrementTick+0x46>
 8008b74:	4b43      	ldr	r3, [pc, #268]	; (8008c84 <xTaskIncrementTick+0x158>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	4b43      	ldr	r3, [pc, #268]	; (8008c88 <xTaskIncrementTick+0x15c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a41      	ldr	r2, [pc, #260]	; (8008c84 <xTaskIncrementTick+0x158>)
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	4a41      	ldr	r2, [pc, #260]	; (8008c88 <xTaskIncrementTick+0x15c>)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	4b40      	ldr	r3, [pc, #256]	; (8008c8c <xTaskIncrementTick+0x160>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	4a3f      	ldr	r2, [pc, #252]	; (8008c8c <xTaskIncrementTick+0x160>)
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	f000 faaf 	bl	80090f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b96:	4b3e      	ldr	r3, [pc, #248]	; (8008c90 <xTaskIncrementTick+0x164>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d34d      	bcc.n	8008c3c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba0:	4b38      	ldr	r3, [pc, #224]	; (8008c84 <xTaskIncrementTick+0x158>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <xTaskIncrementTick+0x82>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <xTaskIncrementTick+0x84>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bb4:	4b36      	ldr	r3, [pc, #216]	; (8008c90 <xTaskIncrementTick+0x164>)
 8008bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bba:	601a      	str	r2, [r3, #0]
					break;
 8008bbc:	e03e      	b.n	8008c3c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008bbe:	4b31      	ldr	r3, [pc, #196]	; (8008c84 <xTaskIncrementTick+0x158>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d203      	bcs.n	8008bde <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008bd6:	4a2e      	ldr	r2, [pc, #184]	; (8008c90 <xTaskIncrementTick+0x164>)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6013      	str	r3, [r2, #0]
						break;
 8008bdc:	e02e      	b.n	8008c3c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	3304      	adds	r3, #4
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff f9b2 	bl	8007f4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	3318      	adds	r3, #24
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff f9a9 	bl	8007f4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	2201      	movs	r2, #1
 8008c00:	409a      	lsls	r2, r3
 8008c02:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <xTaskIncrementTick+0x168>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	4a22      	ldr	r2, [pc, #136]	; (8008c94 <xTaskIncrementTick+0x168>)
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4a1f      	ldr	r2, [pc, #124]	; (8008c98 <xTaskIncrementTick+0x16c>)
 8008c1a:	441a      	add	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7ff f937 	bl	8007e96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <xTaskIncrementTick+0x170>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d3b4      	bcc.n	8008ba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c36:	2301      	movs	r3, #1
 8008c38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c3a:	e7b1      	b.n	8008ba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c3c:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <xTaskIncrementTick+0x170>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c42:	4915      	ldr	r1, [pc, #84]	; (8008c98 <xTaskIncrementTick+0x16c>)
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d907      	bls.n	8008c64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008c54:	2301      	movs	r3, #1
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e004      	b.n	8008c64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008c5a:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <xTaskIncrementTick+0x174>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	4a0f      	ldr	r2, [pc, #60]	; (8008ca0 <xTaskIncrementTick+0x174>)
 8008c62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008c64:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <xTaskIncrementTick+0x178>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c70:	697b      	ldr	r3, [r7, #20]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000e2c 	.word	0x20000e2c
 8008c80:	20000e08 	.word	0x20000e08
 8008c84:	20000dbc 	.word	0x20000dbc
 8008c88:	20000dc0 	.word	0x20000dc0
 8008c8c:	20000e1c 	.word	0x20000e1c
 8008c90:	20000e24 	.word	0x20000e24
 8008c94:	20000e0c 	.word	0x20000e0c
 8008c98:	20000d08 	.word	0x20000d08
 8008c9c:	20000d04 	.word	0x20000d04
 8008ca0:	20000e14 	.word	0x20000e14
 8008ca4:	20000e18 	.word	0x20000e18

08008ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <vTaskSwitchContext+0xac>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008cb6:	4b28      	ldr	r3, [pc, #160]	; (8008d58 <vTaskSwitchContext+0xb0>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cbc:	e044      	b.n	8008d48 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008cbe:	4b26      	ldr	r3, [pc, #152]	; (8008d58 <vTaskSwitchContext+0xb0>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008cc4:	4b25      	ldr	r3, [pc, #148]	; (8008d5c <vTaskSwitchContext+0xb4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	fab3 f383 	clz	r3, r3
 8008cd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008cd2:	7afb      	ldrb	r3, [r7, #11]
 8008cd4:	f1c3 031f 	rsb	r3, r3, #31
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	4921      	ldr	r1, [pc, #132]	; (8008d60 <vTaskSwitchContext+0xb8>)
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <vTaskSwitchContext+0x5a>
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4a14      	ldr	r2, [pc, #80]	; (8008d60 <vTaskSwitchContext+0xb8>)
 8008d10:	4413      	add	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	605a      	str	r2, [r3, #4]
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3308      	adds	r3, #8
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d104      	bne.n	8008d34 <vTaskSwitchContext+0x8c>
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	605a      	str	r2, [r3, #4]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	4a0a      	ldr	r2, [pc, #40]	; (8008d64 <vTaskSwitchContext+0xbc>)
 8008d3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d3e:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <vTaskSwitchContext+0xbc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	334c      	adds	r3, #76	; 0x4c
 8008d44:	4a08      	ldr	r2, [pc, #32]	; (8008d68 <vTaskSwitchContext+0xc0>)
 8008d46:	6013      	str	r3, [r2, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	371c      	adds	r7, #28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000e2c 	.word	0x20000e2c
 8008d58:	20000e18 	.word	0x20000e18
 8008d5c:	20000e0c 	.word	0x20000e0c
 8008d60:	20000d08 	.word	0x20000d08
 8008d64:	20000d04 	.word	0x20000d04
 8008d68:	2000006c 	.word	0x2000006c

08008d6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	60fb      	str	r3, [r7, #12]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d92:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <vTaskPlaceOnEventList+0x44>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3318      	adds	r3, #24
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff f89e 	bl	8007edc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008da0:	2101      	movs	r1, #1
 8008da2:	6838      	ldr	r0, [r7, #0]
 8008da4:	f000 fb22 	bl	80093ec <prvAddCurrentTaskToDelayedList>
}
 8008da8:	bf00      	nop
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000d04 	.word	0x20000d04

08008db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10a      	bne.n	8008de0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	60fb      	str	r3, [r7, #12]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	3318      	adds	r3, #24
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff f8b1 	bl	8007f4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dea:	4b1d      	ldr	r3, [pc, #116]	; (8008e60 <xTaskRemoveFromEventList+0xac>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d11c      	bne.n	8008e2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	3304      	adds	r3, #4
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff f8a8 	bl	8007f4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	2201      	movs	r2, #1
 8008e02:	409a      	lsls	r2, r3
 8008e04:	4b17      	ldr	r3, [pc, #92]	; (8008e64 <xTaskRemoveFromEventList+0xb0>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	4a16      	ldr	r2, [pc, #88]	; (8008e64 <xTaskRemoveFromEventList+0xb0>)
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4a13      	ldr	r2, [pc, #76]	; (8008e68 <xTaskRemoveFromEventList+0xb4>)
 8008e1c:	441a      	add	r2, r3
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3304      	adds	r3, #4
 8008e22:	4619      	mov	r1, r3
 8008e24:	4610      	mov	r0, r2
 8008e26:	f7ff f836 	bl	8007e96 <vListInsertEnd>
 8008e2a:	e005      	b.n	8008e38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	3318      	adds	r3, #24
 8008e30:	4619      	mov	r1, r3
 8008e32:	480e      	ldr	r0, [pc, #56]	; (8008e6c <xTaskRemoveFromEventList+0xb8>)
 8008e34:	f7ff f82f 	bl	8007e96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <xTaskRemoveFromEventList+0xbc>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d905      	bls.n	8008e52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e46:	2301      	movs	r3, #1
 8008e48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e4a:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <xTaskRemoveFromEventList+0xc0>)
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	e001      	b.n	8008e56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008e56:	697b      	ldr	r3, [r7, #20]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000e2c 	.word	0x20000e2c
 8008e64:	20000e0c 	.word	0x20000e0c
 8008e68:	20000d08 	.word	0x20000d08
 8008e6c:	20000dc4 	.word	0x20000dc4
 8008e70:	20000d04 	.word	0x20000d04
 8008e74:	20000e18 	.word	0x20000e18

08008e78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <vTaskInternalSetTimeOutState+0x24>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e88:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <vTaskInternalSetTimeOutState+0x28>)
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	605a      	str	r2, [r3, #4]
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bc80      	pop	{r7}
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20000e1c 	.word	0x20000e1c
 8008ea0:	20000e08 	.word	0x20000e08

08008ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	613b      	str	r3, [r7, #16]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ee6:	f000 fbd9 	bl	800969c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eea:	4b1d      	ldr	r3, [pc, #116]	; (8008f60 <xTaskCheckForTimeOut+0xbc>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d102      	bne.n	8008f0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61fb      	str	r3, [r7, #28]
 8008f08:	e023      	b.n	8008f52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <xTaskCheckForTimeOut+0xc0>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d007      	beq.n	8008f26 <xTaskCheckForTimeOut+0x82>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d302      	bcc.n	8008f26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f20:	2301      	movs	r3, #1
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	e015      	b.n	8008f52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d20b      	bcs.n	8008f48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff ff9b 	bl	8008e78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61fb      	str	r3, [r7, #28]
 8008f46:	e004      	b.n	8008f52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f52:	f000 fbd3 	bl	80096fc <vPortExitCritical>

	return xReturn;
 8008f56:	69fb      	ldr	r3, [r7, #28]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000e08 	.word	0x20000e08
 8008f64:	20000e1c 	.word	0x20000e1c

08008f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f6c:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <vTaskMissedYield+0x14>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
}
 8008f72:	bf00      	nop
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bc80      	pop	{r7}
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	20000e18 	.word	0x20000e18

08008f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f88:	f000 f852 	bl	8009030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <prvIdleTask+0x28>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d9f9      	bls.n	8008f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <prvIdleTask+0x2c>)
 8008f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fa4:	e7f0      	b.n	8008f88 <prvIdleTask+0x8>
 8008fa6:	bf00      	nop
 8008fa8:	20000d08 	.word	0x20000d08
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]
 8008fba:	e00c      	b.n	8008fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4a12      	ldr	r2, [pc, #72]	; (8009010 <prvInitialiseTaskLists+0x60>)
 8008fc8:	4413      	add	r3, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe ff38 	bl	8007e40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	607b      	str	r3, [r7, #4]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b06      	cmp	r3, #6
 8008fda:	d9ef      	bls.n	8008fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fdc:	480d      	ldr	r0, [pc, #52]	; (8009014 <prvInitialiseTaskLists+0x64>)
 8008fde:	f7fe ff2f 	bl	8007e40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fe2:	480d      	ldr	r0, [pc, #52]	; (8009018 <prvInitialiseTaskLists+0x68>)
 8008fe4:	f7fe ff2c 	bl	8007e40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fe8:	480c      	ldr	r0, [pc, #48]	; (800901c <prvInitialiseTaskLists+0x6c>)
 8008fea:	f7fe ff29 	bl	8007e40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fee:	480c      	ldr	r0, [pc, #48]	; (8009020 <prvInitialiseTaskLists+0x70>)
 8008ff0:	f7fe ff26 	bl	8007e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ff4:	480b      	ldr	r0, [pc, #44]	; (8009024 <prvInitialiseTaskLists+0x74>)
 8008ff6:	f7fe ff23 	bl	8007e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <prvInitialiseTaskLists+0x78>)
 8008ffc:	4a05      	ldr	r2, [pc, #20]	; (8009014 <prvInitialiseTaskLists+0x64>)
 8008ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009000:	4b0a      	ldr	r3, [pc, #40]	; (800902c <prvInitialiseTaskLists+0x7c>)
 8009002:	4a05      	ldr	r2, [pc, #20]	; (8009018 <prvInitialiseTaskLists+0x68>)
 8009004:	601a      	str	r2, [r3, #0]
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20000d08 	.word	0x20000d08
 8009014:	20000d94 	.word	0x20000d94
 8009018:	20000da8 	.word	0x20000da8
 800901c:	20000dc4 	.word	0x20000dc4
 8009020:	20000dd8 	.word	0x20000dd8
 8009024:	20000df0 	.word	0x20000df0
 8009028:	20000dbc 	.word	0x20000dbc
 800902c:	20000dc0 	.word	0x20000dc0

08009030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009036:	e019      	b.n	800906c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009038:	f000 fb30 	bl	800969c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800903c:	4b10      	ldr	r3, [pc, #64]	; (8009080 <prvCheckTasksWaitingTermination+0x50>)
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe ff7f 	bl	8007f4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800904e:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <prvCheckTasksWaitingTermination+0x54>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3b01      	subs	r3, #1
 8009054:	4a0b      	ldr	r2, [pc, #44]	; (8009084 <prvCheckTasksWaitingTermination+0x54>)
 8009056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009058:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <prvCheckTasksWaitingTermination+0x58>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3b01      	subs	r3, #1
 800905e:	4a0a      	ldr	r2, [pc, #40]	; (8009088 <prvCheckTasksWaitingTermination+0x58>)
 8009060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009062:	f000 fb4b 	bl	80096fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f810 	bl	800908c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <prvCheckTasksWaitingTermination+0x58>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e1      	bne.n	8009038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20000dd8 	.word	0x20000dd8
 8009084:	20000e04 	.word	0x20000e04
 8009088:	20000dec 	.word	0x20000dec

0800908c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	334c      	adds	r3, #76	; 0x4c
 8009098:	4618      	mov	r0, r3
 800909a:	f001 fe01 	bl	800aca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d108      	bne.n	80090ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fcb9 	bl	8009a24 <vPortFree>
				vPortFree( pxTCB );
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fcb6 	bl	8009a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090b8:	e018      	b.n	80090ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d103      	bne.n	80090cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fcad 	bl	8009a24 <vPortFree>
	}
 80090ca:	e00f      	b.n	80090ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d00a      	beq.n	80090ec <prvDeleteTCB+0x60>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	60fb      	str	r3, [r7, #12]
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <prvDeleteTCB+0x5e>
	}
 80090ec:	bf00      	nop
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090fa:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <prvResetNextTaskUnblockTime+0x40>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <prvResetNextTaskUnblockTime+0x14>
 8009104:	2301      	movs	r3, #1
 8009106:	e000      	b.n	800910a <prvResetNextTaskUnblockTime+0x16>
 8009108:	2300      	movs	r3, #0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d004      	beq.n	8009118 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <prvResetNextTaskUnblockTime+0x44>)
 8009110:	f04f 32ff 	mov.w	r2, #4294967295
 8009114:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009116:	e008      	b.n	800912a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009118:	4b06      	ldr	r3, [pc, #24]	; (8009134 <prvResetNextTaskUnblockTime+0x40>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	4a04      	ldr	r2, [pc, #16]	; (8009138 <prvResetNextTaskUnblockTime+0x44>)
 8009128:	6013      	str	r3, [r2, #0]
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	bc80      	pop	{r7}
 8009132:	4770      	bx	lr
 8009134:	20000dbc 	.word	0x20000dbc
 8009138:	20000e24 	.word	0x20000e24

0800913c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009142:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <xTaskGetSchedulerState+0x34>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800914a:	2301      	movs	r3, #1
 800914c:	607b      	str	r3, [r7, #4]
 800914e:	e008      	b.n	8009162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009150:	4b08      	ldr	r3, [pc, #32]	; (8009174 <xTaskGetSchedulerState+0x38>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d102      	bne.n	800915e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009158:	2302      	movs	r3, #2
 800915a:	607b      	str	r3, [r7, #4]
 800915c:	e001      	b.n	8009162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800915e:	2300      	movs	r3, #0
 8009160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009162:	687b      	ldr	r3, [r7, #4]
	}
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	bc80      	pop	{r7}
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20000e10 	.word	0x20000e10
 8009174:	20000e2c 	.word	0x20000e2c

08009178 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d06e      	beq.n	800926c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009192:	4b39      	ldr	r3, [pc, #228]	; (8009278 <xTaskPriorityInherit+0x100>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009198:	429a      	cmp	r2, r3
 800919a:	d25e      	bcs.n	800925a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	db06      	blt.n	80091b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a4:	4b34      	ldr	r3, [pc, #208]	; (8009278 <xTaskPriorityInherit+0x100>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	f1c3 0207 	rsb	r2, r3, #7
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6959      	ldr	r1, [r3, #20]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4a2e      	ldr	r2, [pc, #184]	; (800927c <xTaskPriorityInherit+0x104>)
 80091c4:	4413      	add	r3, r2
 80091c6:	4299      	cmp	r1, r3
 80091c8:	d101      	bne.n	80091ce <xTaskPriorityInherit+0x56>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e000      	b.n	80091d0 <xTaskPriorityInherit+0x58>
 80091ce:	2300      	movs	r3, #0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d03a      	beq.n	800924a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	3304      	adds	r3, #4
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe feb7 	bl	8007f4c <uxListRemove>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d115      	bne.n	8009210 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e8:	4924      	ldr	r1, [pc, #144]	; (800927c <xTaskPriorityInherit+0x104>)
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <xTaskPriorityInherit+0x98>
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fe:	2201      	movs	r2, #1
 8009200:	fa02 f303 	lsl.w	r3, r2, r3
 8009204:	43da      	mvns	r2, r3
 8009206:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <xTaskPriorityInherit+0x108>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4013      	ands	r3, r2
 800920c:	4a1c      	ldr	r2, [pc, #112]	; (8009280 <xTaskPriorityInherit+0x108>)
 800920e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <xTaskPriorityInherit+0x100>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	2201      	movs	r2, #1
 8009220:	409a      	lsls	r2, r3
 8009222:	4b17      	ldr	r3, [pc, #92]	; (8009280 <xTaskPriorityInherit+0x108>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4313      	orrs	r3, r2
 8009228:	4a15      	ldr	r2, [pc, #84]	; (8009280 <xTaskPriorityInherit+0x108>)
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009230:	4613      	mov	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4a10      	ldr	r2, [pc, #64]	; (800927c <xTaskPriorityInherit+0x104>)
 800923a:	441a      	add	r2, r3
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	3304      	adds	r3, #4
 8009240:	4619      	mov	r1, r3
 8009242:	4610      	mov	r0, r2
 8009244:	f7fe fe27 	bl	8007e96 <vListInsertEnd>
 8009248:	e004      	b.n	8009254 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800924a:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <xTaskPriorityInherit+0x100>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009254:	2301      	movs	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	e008      	b.n	800926c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <xTaskPriorityInherit+0x100>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	429a      	cmp	r2, r3
 8009266:	d201      	bcs.n	800926c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009268:	2301      	movs	r3, #1
 800926a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800926c:	68fb      	ldr	r3, [r7, #12]
	}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000d04 	.word	0x20000d04
 800927c:	20000d08 	.word	0x20000d08
 8009280:	20000e0c 	.word	0x20000e0c

08009284 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009292:	2301      	movs	r3, #1
 8009294:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 8088 	beq.w	80093ae <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	60fb      	str	r3, [r7, #12]
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d902      	bls.n	80092cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	e002      	b.n	80092d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d068      	beq.n	80093ae <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d163      	bne.n	80093ae <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092e6:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d10a      	bne.n	8009306 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60bb      	str	r3, [r7, #8]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	db04      	blt.n	8009324 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	f1c3 0207 	rsb	r2, r3, #7
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	6959      	ldr	r1, [r3, #20]
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a22      	ldr	r2, [pc, #136]	; (80093bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009334:	4413      	add	r3, r2
 8009336:	4299      	cmp	r1, r3
 8009338:	d101      	bne.n	800933e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800933e:	2300      	movs	r3, #0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d034      	beq.n	80093ae <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	3304      	adds	r3, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fdff 	bl	8007f4c <uxListRemove>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d115      	bne.n	8009380 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009358:	4918      	ldr	r1, [pc, #96]	; (80093bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	440b      	add	r3, r1
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	2201      	movs	r2, #1
 8009370:	fa02 f303 	lsl.w	r3, r2, r3
 8009374:	43da      	mvns	r2, r3
 8009376:	4b12      	ldr	r3, [pc, #72]	; (80093c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4013      	ands	r3, r2
 800937c:	4a10      	ldr	r2, [pc, #64]	; (80093c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800937e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	2201      	movs	r2, #1
 8009386:	409a      	lsls	r2, r3
 8009388:	4b0d      	ldr	r3, [pc, #52]	; (80093c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4313      	orrs	r3, r2
 800938e:	4a0c      	ldr	r2, [pc, #48]	; (80093c0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4a07      	ldr	r2, [pc, #28]	; (80093bc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80093a0:	441a      	add	r2, r3
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fe fd74 	bl	8007e96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093ae:	bf00      	nop
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000d04 	.word	0x20000d04
 80093bc:	20000d08 	.word	0x20000d08
 80093c0:	20000e0c 	.word	0x20000e0c

080093c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80093c4:	b480      	push	{r7}
 80093c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093d6:	3201      	adds	r2, #1
 80093d8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80093da:	4b03      	ldr	r3, [pc, #12]	; (80093e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80093dc:	681b      	ldr	r3, [r3, #0]
	}
 80093de:	4618      	mov	r0, r3
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	20000d04 	.word	0x20000d04

080093ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093f6:	4b29      	ldr	r3, [pc, #164]	; (800949c <prvAddCurrentTaskToDelayedList+0xb0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093fc:	4b28      	ldr	r3, [pc, #160]	; (80094a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3304      	adds	r3, #4
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fda2 	bl	8007f4c <uxListRemove>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10b      	bne.n	8009426 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800940e:	4b24      	ldr	r3, [pc, #144]	; (80094a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	2201      	movs	r2, #1
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	43da      	mvns	r2, r3
 800941c:	4b21      	ldr	r3, [pc, #132]	; (80094a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4013      	ands	r3, r2
 8009422:	4a20      	ldr	r2, [pc, #128]	; (80094a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009424:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942c:	d10a      	bne.n	8009444 <prvAddCurrentTaskToDelayedList+0x58>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d007      	beq.n	8009444 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009434:	4b1a      	ldr	r3, [pc, #104]	; (80094a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3304      	adds	r3, #4
 800943a:	4619      	mov	r1, r3
 800943c:	481a      	ldr	r0, [pc, #104]	; (80094a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800943e:	f7fe fd2a 	bl	8007e96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009442:	e026      	b.n	8009492 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4413      	add	r3, r2
 800944a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800944c:	4b14      	ldr	r3, [pc, #80]	; (80094a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	429a      	cmp	r2, r3
 800945a:	d209      	bcs.n	8009470 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800945c:	4b13      	ldr	r3, [pc, #76]	; (80094ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3304      	adds	r3, #4
 8009466:	4619      	mov	r1, r3
 8009468:	4610      	mov	r0, r2
 800946a:	f7fe fd37 	bl	8007edc <vListInsert>
}
 800946e:	e010      	b.n	8009492 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009470:	4b0f      	ldr	r3, [pc, #60]	; (80094b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3304      	adds	r3, #4
 800947a:	4619      	mov	r1, r3
 800947c:	4610      	mov	r0, r2
 800947e:	f7fe fd2d 	bl	8007edc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009482:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	d202      	bcs.n	8009492 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800948c:	4a09      	ldr	r2, [pc, #36]	; (80094b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	6013      	str	r3, [r2, #0]
}
 8009492:	bf00      	nop
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000e08 	.word	0x20000e08
 80094a0:	20000d04 	.word	0x20000d04
 80094a4:	20000e0c 	.word	0x20000e0c
 80094a8:	20000df0 	.word	0x20000df0
 80094ac:	20000dc0 	.word	0x20000dc0
 80094b0:	20000dbc 	.word	0x20000dbc
 80094b4:	20000e24 	.word	0x20000e24

080094b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3b04      	subs	r3, #4
 80094c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3b04      	subs	r3, #4
 80094d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f023 0201 	bic.w	r2, r3, #1
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3b04      	subs	r3, #4
 80094e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094e8:	4a08      	ldr	r2, [pc, #32]	; (800950c <pxPortInitialiseStack+0x54>)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3b14      	subs	r3, #20
 80094f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3b20      	subs	r3, #32
 80094fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009500:	68fb      	ldr	r3, [r7, #12]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	bc80      	pop	{r7}
 800950a:	4770      	bx	lr
 800950c:	08009511 	.word	0x08009511

08009510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009516:	2300      	movs	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800951a:	4b12      	ldr	r3, [pc, #72]	; (8009564 <prvTaskExitError+0x54>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009522:	d00a      	beq.n	800953a <prvTaskExitError+0x2a>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	60fb      	str	r3, [r7, #12]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <prvTaskExitError+0x28>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	60bb      	str	r3, [r7, #8]
}
 800954c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800954e:	bf00      	nop
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0fc      	beq.n	8009550 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009556:	bf00      	nop
 8009558:	bf00      	nop
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	20000010 	.word	0x20000010
	...

08009570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <pxCurrentTCBConst2>)
 8009572:	6819      	ldr	r1, [r3, #0]
 8009574:	6808      	ldr	r0, [r1, #0]
 8009576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800957a:	f380 8809 	msr	PSP, r0
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8811 	msr	BASEPRI, r0
 800958a:	f04e 0e0d 	orr.w	lr, lr, #13
 800958e:	4770      	bx	lr

08009590 <pxCurrentTCBConst2>:
 8009590:	20000d04 	.word	0x20000d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop

08009598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009598:	4806      	ldr	r0, [pc, #24]	; (80095b4 <prvPortStartFirstTask+0x1c>)
 800959a:	6800      	ldr	r0, [r0, #0]
 800959c:	6800      	ldr	r0, [r0, #0]
 800959e:	f380 8808 	msr	MSP, r0
 80095a2:	b662      	cpsie	i
 80095a4:	b661      	cpsie	f
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	df00      	svc	0
 80095b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095b2:	bf00      	nop
 80095b4:	e000ed08 	.word	0xe000ed08

080095b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095be:	4b32      	ldr	r3, [pc, #200]	; (8009688 <xPortStartScheduler+0xd0>)
 80095c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	22ff      	movs	r2, #255	; 0xff
 80095ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	4b2a      	ldr	r3, [pc, #168]	; (800968c <xPortStartScheduler+0xd4>)
 80095e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095e6:	4b2a      	ldr	r3, [pc, #168]	; (8009690 <xPortStartScheduler+0xd8>)
 80095e8:	2207      	movs	r2, #7
 80095ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ec:	e009      	b.n	8009602 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80095ee:	4b28      	ldr	r3, [pc, #160]	; (8009690 <xPortStartScheduler+0xd8>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	4a26      	ldr	r2, [pc, #152]	; (8009690 <xPortStartScheduler+0xd8>)
 80095f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009602:	78fb      	ldrb	r3, [r7, #3]
 8009604:	b2db      	uxtb	r3, r3
 8009606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960a:	2b80      	cmp	r3, #128	; 0x80
 800960c:	d0ef      	beq.n	80095ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800960e:	4b20      	ldr	r3, [pc, #128]	; (8009690 <xPortStartScheduler+0xd8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f1c3 0307 	rsb	r3, r3, #7
 8009616:	2b04      	cmp	r3, #4
 8009618:	d00a      	beq.n	8009630 <xPortStartScheduler+0x78>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	60bb      	str	r3, [r7, #8]
}
 800962c:	bf00      	nop
 800962e:	e7fe      	b.n	800962e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009630:	4b17      	ldr	r3, [pc, #92]	; (8009690 <xPortStartScheduler+0xd8>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	4a16      	ldr	r2, [pc, #88]	; (8009690 <xPortStartScheduler+0xd8>)
 8009638:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800963a:	4b15      	ldr	r3, [pc, #84]	; (8009690 <xPortStartScheduler+0xd8>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009642:	4a13      	ldr	r2, [pc, #76]	; (8009690 <xPortStartScheduler+0xd8>)
 8009644:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	b2da      	uxtb	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <xPortStartScheduler+0xdc>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a10      	ldr	r2, [pc, #64]	; (8009694 <xPortStartScheduler+0xdc>)
 8009654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800965a:	4b0e      	ldr	r3, [pc, #56]	; (8009694 <xPortStartScheduler+0xdc>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a0d      	ldr	r2, [pc, #52]	; (8009694 <xPortStartScheduler+0xdc>)
 8009660:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009664:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009666:	f000 f8b9 	bl	80097dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800966a:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <xPortStartScheduler+0xe0>)
 800966c:	2200      	movs	r2, #0
 800966e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009670:	f7ff ff92 	bl	8009598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009674:	f7ff fb18 	bl	8008ca8 <vTaskSwitchContext>
	prvTaskExitError();
 8009678:	f7ff ff4a 	bl	8009510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	e000e400 	.word	0xe000e400
 800968c:	20000e30 	.word	0x20000e30
 8009690:	20000e34 	.word	0x20000e34
 8009694:	e000ed20 	.word	0xe000ed20
 8009698:	20000010 	.word	0x20000010

0800969c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	607b      	str	r3, [r7, #4]
}
 80096b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096b6:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <vPortEnterCritical+0x58>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3301      	adds	r3, #1
 80096bc:	4a0d      	ldr	r2, [pc, #52]	; (80096f4 <vPortEnterCritical+0x58>)
 80096be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096c0:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <vPortEnterCritical+0x58>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d10f      	bne.n	80096e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096c8:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <vPortEnterCritical+0x5c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	603b      	str	r3, [r7, #0]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <vPortEnterCritical+0x4a>
	}
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20000010 	.word	0x20000010
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009702:	4b11      	ldr	r3, [pc, #68]	; (8009748 <vPortExitCritical+0x4c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <vPortExitCritical+0x24>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	607b      	str	r3, [r7, #4]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009720:	4b09      	ldr	r3, [pc, #36]	; (8009748 <vPortExitCritical+0x4c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3b01      	subs	r3, #1
 8009726:	4a08      	ldr	r2, [pc, #32]	; (8009748 <vPortExitCritical+0x4c>)
 8009728:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800972a:	4b07      	ldr	r3, [pc, #28]	; (8009748 <vPortExitCritical+0x4c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d105      	bne.n	800973e <vPortExitCritical+0x42>
 8009732:	2300      	movs	r3, #0
 8009734:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	f383 8811 	msr	BASEPRI, r3
}
 800973c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800973e:	bf00      	nop
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	bc80      	pop	{r7}
 8009746:	4770      	bx	lr
 8009748:	20000010 	.word	0x20000010
 800974c:	00000000 	.word	0x00000000

08009750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009750:	f3ef 8009 	mrs	r0, PSP
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <pxCurrentTCBConst>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009760:	6010      	str	r0, [r2, #0]
 8009762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800976a:	f380 8811 	msr	BASEPRI, r0
 800976e:	f7ff fa9b 	bl	8008ca8 <vTaskSwitchContext>
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8811 	msr	BASEPRI, r0
 800977a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800977e:	6819      	ldr	r1, [r3, #0]
 8009780:	6808      	ldr	r0, [r1, #0]
 8009782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009786:	f380 8809 	msr	PSP, r0
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	4770      	bx	lr

08009790 <pxCurrentTCBConst>:
 8009790:	20000d04 	.word	0x20000d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop

08009798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	607b      	str	r3, [r7, #4]
}
 80097b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097b2:	f7ff f9bb 	bl	8008b2c <xTaskIncrementTick>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097bc:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <SysTick_Handler+0x40>)
 80097be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	2300      	movs	r3, #0
 80097c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f383 8811 	msr	BASEPRI, r3
}
 80097ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	e000ed04 	.word	0xe000ed04

080097dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097e0:	4b0a      	ldr	r3, [pc, #40]	; (800980c <vPortSetupTimerInterrupt+0x30>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097e6:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <vPortSetupTimerInterrupt+0x34>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ec:	4b09      	ldr	r3, [pc, #36]	; (8009814 <vPortSetupTimerInterrupt+0x38>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a09      	ldr	r2, [pc, #36]	; (8009818 <vPortSetupTimerInterrupt+0x3c>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	099b      	lsrs	r3, r3, #6
 80097f8:	4a08      	ldr	r2, [pc, #32]	; (800981c <vPortSetupTimerInterrupt+0x40>)
 80097fa:	3b01      	subs	r3, #1
 80097fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097fe:	4b03      	ldr	r3, [pc, #12]	; (800980c <vPortSetupTimerInterrupt+0x30>)
 8009800:	2207      	movs	r2, #7
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr
 800980c:	e000e010 	.word	0xe000e010
 8009810:	e000e018 	.word	0xe000e018
 8009814:	20000004 	.word	0x20000004
 8009818:	10624dd3 	.word	0x10624dd3
 800981c:	e000e014 	.word	0xe000e014

08009820 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009826:	f3ef 8305 	mrs	r3, IPSR
 800982a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b0f      	cmp	r3, #15
 8009830:	d914      	bls.n	800985c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009832:	4a16      	ldr	r2, [pc, #88]	; (800988c <vPortValidateInterruptPriority+0x6c>)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4413      	add	r3, r2
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800983c:	4b14      	ldr	r3, [pc, #80]	; (8009890 <vPortValidateInterruptPriority+0x70>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	7afa      	ldrb	r2, [r7, #11]
 8009842:	429a      	cmp	r2, r3
 8009844:	d20a      	bcs.n	800985c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	607b      	str	r3, [r7, #4]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800985c:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <vPortValidateInterruptPriority+0x74>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009864:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <vPortValidateInterruptPriority+0x78>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d90a      	bls.n	8009882 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	603b      	str	r3, [r7, #0]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <vPortValidateInterruptPriority+0x60>
	}
 8009882:	bf00      	nop
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	bc80      	pop	{r7}
 800988a:	4770      	bx	lr
 800988c:	e000e3f0 	.word	0xe000e3f0
 8009890:	20000e30 	.word	0x20000e30
 8009894:	e000ed0c 	.word	0xe000ed0c
 8009898:	20000e34 	.word	0x20000e34

0800989c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08a      	sub	sp, #40	; 0x28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098a8:	f7ff f896 	bl	80089d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098ac:	4b58      	ldr	r3, [pc, #352]	; (8009a10 <pvPortMalloc+0x174>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098b4:	f000 f910 	bl	8009ad8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098b8:	4b56      	ldr	r3, [pc, #344]	; (8009a14 <pvPortMalloc+0x178>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4013      	ands	r3, r2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 808e 	bne.w	80099e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01d      	beq.n	8009908 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098cc:	2208      	movs	r2, #8
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d014      	beq.n	8009908 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f023 0307 	bic.w	r3, r3, #7
 80098e4:	3308      	adds	r3, #8
 80098e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <pvPortMalloc+0x6c>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	617b      	str	r3, [r7, #20]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d069      	beq.n	80099e2 <pvPortMalloc+0x146>
 800990e:	4b42      	ldr	r3, [pc, #264]	; (8009a18 <pvPortMalloc+0x17c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	429a      	cmp	r2, r3
 8009916:	d864      	bhi.n	80099e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009918:	4b40      	ldr	r3, [pc, #256]	; (8009a1c <pvPortMalloc+0x180>)
 800991a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800991c:	4b3f      	ldr	r3, [pc, #252]	; (8009a1c <pvPortMalloc+0x180>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009922:	e004      	b.n	800992e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	429a      	cmp	r2, r3
 8009936:	d903      	bls.n	8009940 <pvPortMalloc+0xa4>
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1f1      	bne.n	8009924 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009940:	4b33      	ldr	r3, [pc, #204]	; (8009a10 <pvPortMalloc+0x174>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009946:	429a      	cmp	r2, r3
 8009948:	d04b      	beq.n	80099e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2208      	movs	r2, #8
 8009950:	4413      	add	r3, r2
 8009952:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	1ad2      	subs	r2, r2, r3
 8009964:	2308      	movs	r3, #8
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	429a      	cmp	r2, r3
 800996a:	d91f      	bls.n	80099ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800996c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4413      	add	r3, r2
 8009972:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <pvPortMalloc+0xf8>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	613b      	str	r3, [r7, #16]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	1ad2      	subs	r2, r2, r3
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099a6:	69b8      	ldr	r0, [r7, #24]
 80099a8:	f000 f8f8 	bl	8009b9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099ac:	4b1a      	ldr	r3, [pc, #104]	; (8009a18 <pvPortMalloc+0x17c>)
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	4a18      	ldr	r2, [pc, #96]	; (8009a18 <pvPortMalloc+0x17c>)
 80099b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099ba:	4b17      	ldr	r3, [pc, #92]	; (8009a18 <pvPortMalloc+0x17c>)
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	4b18      	ldr	r3, [pc, #96]	; (8009a20 <pvPortMalloc+0x184>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d203      	bcs.n	80099ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099c6:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <pvPortMalloc+0x17c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a15      	ldr	r2, [pc, #84]	; (8009a20 <pvPortMalloc+0x184>)
 80099cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	4b10      	ldr	r3, [pc, #64]	; (8009a14 <pvPortMalloc+0x178>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099e2:	f7ff f807 	bl	80089f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <pvPortMalloc+0x16a>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60fb      	str	r3, [r7, #12]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <pvPortMalloc+0x168>
	return pvReturn;
 8009a06:	69fb      	ldr	r3, [r7, #28]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3728      	adds	r7, #40	; 0x28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20003e40 	.word	0x20003e40
 8009a14:	20003e4c 	.word	0x20003e4c
 8009a18:	20003e44 	.word	0x20003e44
 8009a1c:	20003e38 	.word	0x20003e38
 8009a20:	20003e48 	.word	0x20003e48

08009a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d048      	beq.n	8009ac8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a36:	2308      	movs	r3, #8
 8009a38:	425b      	negs	r3, r3
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	4b21      	ldr	r3, [pc, #132]	; (8009ad0 <vPortFree+0xac>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <vPortFree+0x44>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60fb      	str	r3, [r7, #12]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <vPortFree+0x62>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	60bb      	str	r3, [r7, #8]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	4b11      	ldr	r3, [pc, #68]	; (8009ad0 <vPortFree+0xac>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d019      	beq.n	8009ac8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d115      	bne.n	8009ac8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <vPortFree+0xac>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	43db      	mvns	r3, r3
 8009aa6:	401a      	ands	r2, r3
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009aac:	f7fe ff94 	bl	80089d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	4b07      	ldr	r3, [pc, #28]	; (8009ad4 <vPortFree+0xb0>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4413      	add	r3, r2
 8009aba:	4a06      	ldr	r2, [pc, #24]	; (8009ad4 <vPortFree+0xb0>)
 8009abc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009abe:	6938      	ldr	r0, [r7, #16]
 8009ac0:	f000 f86c 	bl	8009b9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ac4:	f7fe ff96 	bl	80089f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ac8:	bf00      	nop
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	20003e4c 	.word	0x20003e4c
 8009ad4:	20003e44 	.word	0x20003e44

08009ad8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ade:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009ae2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ae4:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <prvHeapInit+0xac>)
 8009ae6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00c      	beq.n	8009b0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3307      	adds	r3, #7
 8009af6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	4a1f      	ldr	r2, [pc, #124]	; (8009b84 <prvHeapInit+0xac>)
 8009b08:	4413      	add	r3, r2
 8009b0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b10:	4a1d      	ldr	r2, [pc, #116]	; (8009b88 <prvHeapInit+0xb0>)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b16:	4b1c      	ldr	r3, [pc, #112]	; (8009b88 <prvHeapInit+0xb0>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	4413      	add	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b24:	2208      	movs	r2, #8
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	1a9b      	subs	r3, r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f023 0307 	bic.w	r3, r3, #7
 8009b32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	4a15      	ldr	r2, [pc, #84]	; (8009b8c <prvHeapInit+0xb4>)
 8009b38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b3a:	4b14      	ldr	r3, [pc, #80]	; (8009b8c <prvHeapInit+0xb4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <prvHeapInit+0xb4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b58:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <prvHeapInit+0xb4>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	4a0a      	ldr	r2, [pc, #40]	; (8009b90 <prvHeapInit+0xb8>)
 8009b66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <prvHeapInit+0xbc>)
 8009b6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b70:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <prvHeapInit+0xc0>)
 8009b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b76:	601a      	str	r2, [r3, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bc80      	pop	{r7}
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20000e38 	.word	0x20000e38
 8009b88:	20003e38 	.word	0x20003e38
 8009b8c:	20003e40 	.word	0x20003e40
 8009b90:	20003e48 	.word	0x20003e48
 8009b94:	20003e44 	.word	0x20003e44
 8009b98:	20003e4c 	.word	0x20003e4c

08009b9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ba4:	4b27      	ldr	r3, [pc, #156]	; (8009c44 <prvInsertBlockIntoFreeList+0xa8>)
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	e002      	b.n	8009bb0 <prvInsertBlockIntoFreeList+0x14>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d8f7      	bhi.n	8009baa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d108      	bne.n	8009bde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	441a      	add	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	441a      	add	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d118      	bne.n	8009c24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <prvInsertBlockIntoFreeList+0xac>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d00d      	beq.n	8009c1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	441a      	add	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	e008      	b.n	8009c2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c1a:	4b0b      	ldr	r3, [pc, #44]	; (8009c48 <prvInsertBlockIntoFreeList+0xac>)
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	e003      	b.n	8009c2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d002      	beq.n	8009c3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c3a:	bf00      	nop
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr
 8009c44:	20003e38 	.word	0x20003e38
 8009c48:	20003e40 	.word	0x20003e40

08009c4c <atoi>:
 8009c4c:	220a      	movs	r2, #10
 8009c4e:	2100      	movs	r1, #0
 8009c50:	f000 b880 	b.w	8009d54 <strtol>

08009c54 <_strtol_l.constprop.0>:
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5a:	4686      	mov	lr, r0
 8009c5c:	4690      	mov	r8, r2
 8009c5e:	d001      	beq.n	8009c64 <_strtol_l.constprop.0+0x10>
 8009c60:	2b24      	cmp	r3, #36	; 0x24
 8009c62:	d906      	bls.n	8009c72 <_strtol_l.constprop.0+0x1e>
 8009c64:	f001 f8a8 	bl	800adb8 <__errno>
 8009c68:	2316      	movs	r3, #22
 8009c6a:	6003      	str	r3, [r0, #0]
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c72:	460d      	mov	r5, r1
 8009c74:	4835      	ldr	r0, [pc, #212]	; (8009d4c <_strtol_l.constprop.0+0xf8>)
 8009c76:	462a      	mov	r2, r5
 8009c78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c7c:	5d06      	ldrb	r6, [r0, r4]
 8009c7e:	f016 0608 	ands.w	r6, r6, #8
 8009c82:	d1f8      	bne.n	8009c76 <_strtol_l.constprop.0+0x22>
 8009c84:	2c2d      	cmp	r4, #45	; 0x2d
 8009c86:	d12e      	bne.n	8009ce6 <_strtol_l.constprop.0+0x92>
 8009c88:	2601      	movs	r6, #1
 8009c8a:	782c      	ldrb	r4, [r5, #0]
 8009c8c:	1c95      	adds	r5, r2, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d057      	beq.n	8009d42 <_strtol_l.constprop.0+0xee>
 8009c92:	2b10      	cmp	r3, #16
 8009c94:	d109      	bne.n	8009caa <_strtol_l.constprop.0+0x56>
 8009c96:	2c30      	cmp	r4, #48	; 0x30
 8009c98:	d107      	bne.n	8009caa <_strtol_l.constprop.0+0x56>
 8009c9a:	782a      	ldrb	r2, [r5, #0]
 8009c9c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009ca0:	2a58      	cmp	r2, #88	; 0x58
 8009ca2:	d149      	bne.n	8009d38 <_strtol_l.constprop.0+0xe4>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	786c      	ldrb	r4, [r5, #1]
 8009ca8:	3502      	adds	r5, #2
 8009caa:	2200      	movs	r2, #0
 8009cac:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009cb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009cb4:	fbbc f9f3 	udiv	r9, ip, r3
 8009cb8:	4610      	mov	r0, r2
 8009cba:	fb03 ca19 	mls	sl, r3, r9, ip
 8009cbe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009cc2:	2f09      	cmp	r7, #9
 8009cc4:	d814      	bhi.n	8009cf0 <_strtol_l.constprop.0+0x9c>
 8009cc6:	463c      	mov	r4, r7
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	dd20      	ble.n	8009d0e <_strtol_l.constprop.0+0xba>
 8009ccc:	1c57      	adds	r7, r2, #1
 8009cce:	d007      	beq.n	8009ce0 <_strtol_l.constprop.0+0x8c>
 8009cd0:	4581      	cmp	r9, r0
 8009cd2:	d319      	bcc.n	8009d08 <_strtol_l.constprop.0+0xb4>
 8009cd4:	d101      	bne.n	8009cda <_strtol_l.constprop.0+0x86>
 8009cd6:	45a2      	cmp	sl, r4
 8009cd8:	db16      	blt.n	8009d08 <_strtol_l.constprop.0+0xb4>
 8009cda:	2201      	movs	r2, #1
 8009cdc:	fb00 4003 	mla	r0, r0, r3, r4
 8009ce0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ce4:	e7eb      	b.n	8009cbe <_strtol_l.constprop.0+0x6a>
 8009ce6:	2c2b      	cmp	r4, #43	; 0x2b
 8009ce8:	bf04      	itt	eq
 8009cea:	782c      	ldrbeq	r4, [r5, #0]
 8009cec:	1c95      	addeq	r5, r2, #2
 8009cee:	e7ce      	b.n	8009c8e <_strtol_l.constprop.0+0x3a>
 8009cf0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009cf4:	2f19      	cmp	r7, #25
 8009cf6:	d801      	bhi.n	8009cfc <_strtol_l.constprop.0+0xa8>
 8009cf8:	3c37      	subs	r4, #55	; 0x37
 8009cfa:	e7e5      	b.n	8009cc8 <_strtol_l.constprop.0+0x74>
 8009cfc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009d00:	2f19      	cmp	r7, #25
 8009d02:	d804      	bhi.n	8009d0e <_strtol_l.constprop.0+0xba>
 8009d04:	3c57      	subs	r4, #87	; 0x57
 8009d06:	e7df      	b.n	8009cc8 <_strtol_l.constprop.0+0x74>
 8009d08:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0c:	e7e8      	b.n	8009ce0 <_strtol_l.constprop.0+0x8c>
 8009d0e:	1c53      	adds	r3, r2, #1
 8009d10:	d108      	bne.n	8009d24 <_strtol_l.constprop.0+0xd0>
 8009d12:	2322      	movs	r3, #34	; 0x22
 8009d14:	4660      	mov	r0, ip
 8009d16:	f8ce 3000 	str.w	r3, [lr]
 8009d1a:	f1b8 0f00 	cmp.w	r8, #0
 8009d1e:	d0a6      	beq.n	8009c6e <_strtol_l.constprop.0+0x1a>
 8009d20:	1e69      	subs	r1, r5, #1
 8009d22:	e006      	b.n	8009d32 <_strtol_l.constprop.0+0xde>
 8009d24:	b106      	cbz	r6, 8009d28 <_strtol_l.constprop.0+0xd4>
 8009d26:	4240      	negs	r0, r0
 8009d28:	f1b8 0f00 	cmp.w	r8, #0
 8009d2c:	d09f      	beq.n	8009c6e <_strtol_l.constprop.0+0x1a>
 8009d2e:	2a00      	cmp	r2, #0
 8009d30:	d1f6      	bne.n	8009d20 <_strtol_l.constprop.0+0xcc>
 8009d32:	f8c8 1000 	str.w	r1, [r8]
 8009d36:	e79a      	b.n	8009c6e <_strtol_l.constprop.0+0x1a>
 8009d38:	2430      	movs	r4, #48	; 0x30
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1b5      	bne.n	8009caa <_strtol_l.constprop.0+0x56>
 8009d3e:	2308      	movs	r3, #8
 8009d40:	e7b3      	b.n	8009caa <_strtol_l.constprop.0+0x56>
 8009d42:	2c30      	cmp	r4, #48	; 0x30
 8009d44:	d0a9      	beq.n	8009c9a <_strtol_l.constprop.0+0x46>
 8009d46:	230a      	movs	r3, #10
 8009d48:	e7af      	b.n	8009caa <_strtol_l.constprop.0+0x56>
 8009d4a:	bf00      	nop
 8009d4c:	0800f497 	.word	0x0800f497

08009d50 <_strtol_r>:
 8009d50:	f7ff bf80 	b.w	8009c54 <_strtol_l.constprop.0>

08009d54 <strtol>:
 8009d54:	4613      	mov	r3, r2
 8009d56:	460a      	mov	r2, r1
 8009d58:	4601      	mov	r1, r0
 8009d5a:	4802      	ldr	r0, [pc, #8]	; (8009d64 <strtol+0x10>)
 8009d5c:	6800      	ldr	r0, [r0, #0]
 8009d5e:	f7ff bf79 	b.w	8009c54 <_strtol_l.constprop.0>
 8009d62:	bf00      	nop
 8009d64:	2000006c 	.word	0x2000006c

08009d68 <__cvt>:
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6e:	461f      	mov	r7, r3
 8009d70:	bfbb      	ittet	lt
 8009d72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009d76:	461f      	movlt	r7, r3
 8009d78:	2300      	movge	r3, #0
 8009d7a:	232d      	movlt	r3, #45	; 0x2d
 8009d7c:	b088      	sub	sp, #32
 8009d7e:	4614      	mov	r4, r2
 8009d80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009d84:	7013      	strb	r3, [r2, #0]
 8009d86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009d8c:	f023 0820 	bic.w	r8, r3, #32
 8009d90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d94:	d005      	beq.n	8009da2 <__cvt+0x3a>
 8009d96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d9a:	d100      	bne.n	8009d9e <__cvt+0x36>
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e000      	b.n	8009da4 <__cvt+0x3c>
 8009da2:	2303      	movs	r3, #3
 8009da4:	aa07      	add	r2, sp, #28
 8009da6:	9204      	str	r2, [sp, #16]
 8009da8:	aa06      	add	r2, sp, #24
 8009daa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009dae:	e9cd 3500 	strd	r3, r5, [sp]
 8009db2:	4622      	mov	r2, r4
 8009db4:	463b      	mov	r3, r7
 8009db6:	f001 f8d7 	bl	800af68 <_dtoa_r>
 8009dba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	d102      	bne.n	8009dc8 <__cvt+0x60>
 8009dc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dc4:	07db      	lsls	r3, r3, #31
 8009dc6:	d522      	bpl.n	8009e0e <__cvt+0xa6>
 8009dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dcc:	eb06 0905 	add.w	r9, r6, r5
 8009dd0:	d110      	bne.n	8009df4 <__cvt+0x8c>
 8009dd2:	7833      	ldrb	r3, [r6, #0]
 8009dd4:	2b30      	cmp	r3, #48	; 0x30
 8009dd6:	d10a      	bne.n	8009dee <__cvt+0x86>
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4639      	mov	r1, r7
 8009de0:	f7f6 fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8009de4:	b918      	cbnz	r0, 8009dee <__cvt+0x86>
 8009de6:	f1c5 0501 	rsb	r5, r5, #1
 8009dea:	f8ca 5000 	str.w	r5, [sl]
 8009dee:	f8da 3000 	ldr.w	r3, [sl]
 8009df2:	4499      	add	r9, r3
 8009df4:	2200      	movs	r2, #0
 8009df6:	2300      	movs	r3, #0
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8009e00:	b108      	cbz	r0, 8009e06 <__cvt+0x9e>
 8009e02:	f8cd 901c 	str.w	r9, [sp, #28]
 8009e06:	2230      	movs	r2, #48	; 0x30
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	454b      	cmp	r3, r9
 8009e0c:	d307      	bcc.n	8009e1e <__cvt+0xb6>
 8009e0e:	4630      	mov	r0, r6
 8009e10:	9b07      	ldr	r3, [sp, #28]
 8009e12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e14:	1b9b      	subs	r3, r3, r6
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	b008      	add	sp, #32
 8009e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1e:	1c59      	adds	r1, r3, #1
 8009e20:	9107      	str	r1, [sp, #28]
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e7f0      	b.n	8009e08 <__cvt+0xa0>

08009e26 <__exponent>:
 8009e26:	4603      	mov	r3, r0
 8009e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e2a:	2900      	cmp	r1, #0
 8009e2c:	f803 2b02 	strb.w	r2, [r3], #2
 8009e30:	bfb6      	itet	lt
 8009e32:	222d      	movlt	r2, #45	; 0x2d
 8009e34:	222b      	movge	r2, #43	; 0x2b
 8009e36:	4249      	neglt	r1, r1
 8009e38:	2909      	cmp	r1, #9
 8009e3a:	7042      	strb	r2, [r0, #1]
 8009e3c:	dd2a      	ble.n	8009e94 <__exponent+0x6e>
 8009e3e:	f10d 0207 	add.w	r2, sp, #7
 8009e42:	4617      	mov	r7, r2
 8009e44:	260a      	movs	r6, #10
 8009e46:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e4a:	4694      	mov	ip, r2
 8009e4c:	fb06 1415 	mls	r4, r6, r5, r1
 8009e50:	3430      	adds	r4, #48	; 0x30
 8009e52:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009e56:	460c      	mov	r4, r1
 8009e58:	2c63      	cmp	r4, #99	; 0x63
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f102 32ff 	add.w	r2, r2, #4294967295
 8009e60:	dcf1      	bgt.n	8009e46 <__exponent+0x20>
 8009e62:	3130      	adds	r1, #48	; 0x30
 8009e64:	f1ac 0402 	sub.w	r4, ip, #2
 8009e68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	1c41      	adds	r1, r0, #1
 8009e70:	42ba      	cmp	r2, r7
 8009e72:	d30a      	bcc.n	8009e8a <__exponent+0x64>
 8009e74:	f10d 0209 	add.w	r2, sp, #9
 8009e78:	eba2 020c 	sub.w	r2, r2, ip
 8009e7c:	42bc      	cmp	r4, r7
 8009e7e:	bf88      	it	hi
 8009e80:	2200      	movhi	r2, #0
 8009e82:	4413      	add	r3, r2
 8009e84:	1a18      	subs	r0, r3, r0
 8009e86:	b003      	add	sp, #12
 8009e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e8a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009e8e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009e92:	e7ed      	b.n	8009e70 <__exponent+0x4a>
 8009e94:	2330      	movs	r3, #48	; 0x30
 8009e96:	3130      	adds	r1, #48	; 0x30
 8009e98:	7083      	strb	r3, [r0, #2]
 8009e9a:	70c1      	strb	r1, [r0, #3]
 8009e9c:	1d03      	adds	r3, r0, #4
 8009e9e:	e7f1      	b.n	8009e84 <__exponent+0x5e>

08009ea0 <_printf_float>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	b091      	sub	sp, #68	; 0x44
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009eac:	4616      	mov	r6, r2
 8009eae:	461f      	mov	r7, r3
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	f000 fee1 	bl	800ac78 <_localeconv_r>
 8009eb6:	6803      	ldr	r3, [r0, #0]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	9309      	str	r3, [sp, #36]	; 0x24
 8009ebc:	f7f6 f948 	bl	8000150 <strlen>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8009ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ec8:	900a      	str	r0, [sp, #40]	; 0x28
 8009eca:	3307      	adds	r3, #7
 8009ecc:	f023 0307 	bic.w	r3, r3, #7
 8009ed0:	f103 0208 	add.w	r2, r3, #8
 8009ed4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009ed8:	f8d4 b000 	ldr.w	fp, [r4]
 8009edc:	f8c8 2000 	str.w	r2, [r8]
 8009ee0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	4643      	mov	r3, r8
 8009ee8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009eec:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	4b9c      	ldr	r3, [pc, #624]	; (800a16c <_printf_float+0x2cc>)
 8009efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009efc:	f7f6 fd86 	bl	8000a0c <__aeabi_dcmpun>
 8009f00:	bb70      	cbnz	r0, 8009f60 <_printf_float+0xc0>
 8009f02:	f04f 32ff 	mov.w	r2, #4294967295
 8009f06:	4650      	mov	r0, sl
 8009f08:	4b98      	ldr	r3, [pc, #608]	; (800a16c <_printf_float+0x2cc>)
 8009f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f0c:	f7f6 fd60 	bl	80009d0 <__aeabi_dcmple>
 8009f10:	bb30      	cbnz	r0, 8009f60 <_printf_float+0xc0>
 8009f12:	2200      	movs	r2, #0
 8009f14:	2300      	movs	r3, #0
 8009f16:	4650      	mov	r0, sl
 8009f18:	4641      	mov	r1, r8
 8009f1a:	f7f6 fd4f 	bl	80009bc <__aeabi_dcmplt>
 8009f1e:	b110      	cbz	r0, 8009f26 <_printf_float+0x86>
 8009f20:	232d      	movs	r3, #45	; 0x2d
 8009f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f26:	4a92      	ldr	r2, [pc, #584]	; (800a170 <_printf_float+0x2d0>)
 8009f28:	4b92      	ldr	r3, [pc, #584]	; (800a174 <_printf_float+0x2d4>)
 8009f2a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009f2e:	bf94      	ite	ls
 8009f30:	4690      	movls	r8, r2
 8009f32:	4698      	movhi	r8, r3
 8009f34:	2303      	movs	r3, #3
 8009f36:	f04f 0a00 	mov.w	sl, #0
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	f02b 0304 	bic.w	r3, fp, #4
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	4633      	mov	r3, r6
 8009f44:	4621      	mov	r1, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	9700      	str	r7, [sp, #0]
 8009f4a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009f4c:	f000 f9d6 	bl	800a2fc <_printf_common>
 8009f50:	3001      	adds	r0, #1
 8009f52:	f040 8090 	bne.w	800a076 <_printf_float+0x1d6>
 8009f56:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5a:	b011      	add	sp, #68	; 0x44
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	4652      	mov	r2, sl
 8009f62:	4643      	mov	r3, r8
 8009f64:	4650      	mov	r0, sl
 8009f66:	4641      	mov	r1, r8
 8009f68:	f7f6 fd50 	bl	8000a0c <__aeabi_dcmpun>
 8009f6c:	b148      	cbz	r0, 8009f82 <_printf_float+0xe2>
 8009f6e:	f1b8 0f00 	cmp.w	r8, #0
 8009f72:	bfb8      	it	lt
 8009f74:	232d      	movlt	r3, #45	; 0x2d
 8009f76:	4a80      	ldr	r2, [pc, #512]	; (800a178 <_printf_float+0x2d8>)
 8009f78:	bfb8      	it	lt
 8009f7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f7e:	4b7f      	ldr	r3, [pc, #508]	; (800a17c <_printf_float+0x2dc>)
 8009f80:	e7d3      	b.n	8009f2a <_printf_float+0x8a>
 8009f82:	6863      	ldr	r3, [r4, #4]
 8009f84:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	d142      	bne.n	800a012 <_printf_float+0x172>
 8009f8c:	2306      	movs	r3, #6
 8009f8e:	6063      	str	r3, [r4, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	9206      	str	r2, [sp, #24]
 8009f94:	aa0e      	add	r2, sp, #56	; 0x38
 8009f96:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009f9a:	aa0d      	add	r2, sp, #52	; 0x34
 8009f9c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009fa0:	9203      	str	r2, [sp, #12]
 8009fa2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009fa6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	6863      	ldr	r3, [r4, #4]
 8009fae:	4652      	mov	r2, sl
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	4643      	mov	r3, r8
 8009fb6:	910b      	str	r1, [sp, #44]	; 0x2c
 8009fb8:	f7ff fed6 	bl	8009d68 <__cvt>
 8009fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fbe:	4680      	mov	r8, r0
 8009fc0:	2947      	cmp	r1, #71	; 0x47
 8009fc2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009fc4:	d108      	bne.n	8009fd8 <_printf_float+0x138>
 8009fc6:	1cc8      	adds	r0, r1, #3
 8009fc8:	db02      	blt.n	8009fd0 <_printf_float+0x130>
 8009fca:	6863      	ldr	r3, [r4, #4]
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	dd40      	ble.n	800a052 <_printf_float+0x1b2>
 8009fd0:	f1a9 0902 	sub.w	r9, r9, #2
 8009fd4:	fa5f f989 	uxtb.w	r9, r9
 8009fd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009fdc:	d81f      	bhi.n	800a01e <_printf_float+0x17e>
 8009fde:	464a      	mov	r2, r9
 8009fe0:	3901      	subs	r1, #1
 8009fe2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fe6:	910d      	str	r1, [sp, #52]	; 0x34
 8009fe8:	f7ff ff1d 	bl	8009e26 <__exponent>
 8009fec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fee:	4682      	mov	sl, r0
 8009ff0:	1813      	adds	r3, r2, r0
 8009ff2:	2a01      	cmp	r2, #1
 8009ff4:	6123      	str	r3, [r4, #16]
 8009ff6:	dc02      	bgt.n	8009ffe <_printf_float+0x15e>
 8009ff8:	6822      	ldr	r2, [r4, #0]
 8009ffa:	07d2      	lsls	r2, r2, #31
 8009ffc:	d501      	bpl.n	800a002 <_printf_float+0x162>
 8009ffe:	3301      	adds	r3, #1
 800a000:	6123      	str	r3, [r4, #16]
 800a002:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a006:	2b00      	cmp	r3, #0
 800a008:	d09b      	beq.n	8009f42 <_printf_float+0xa2>
 800a00a:	232d      	movs	r3, #45	; 0x2d
 800a00c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a010:	e797      	b.n	8009f42 <_printf_float+0xa2>
 800a012:	2947      	cmp	r1, #71	; 0x47
 800a014:	d1bc      	bne.n	8009f90 <_printf_float+0xf0>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1ba      	bne.n	8009f90 <_printf_float+0xf0>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e7b7      	b.n	8009f8e <_printf_float+0xee>
 800a01e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a022:	d118      	bne.n	800a056 <_printf_float+0x1b6>
 800a024:	2900      	cmp	r1, #0
 800a026:	6863      	ldr	r3, [r4, #4]
 800a028:	dd0b      	ble.n	800a042 <_printf_float+0x1a2>
 800a02a:	6121      	str	r1, [r4, #16]
 800a02c:	b913      	cbnz	r3, 800a034 <_printf_float+0x194>
 800a02e:	6822      	ldr	r2, [r4, #0]
 800a030:	07d0      	lsls	r0, r2, #31
 800a032:	d502      	bpl.n	800a03a <_printf_float+0x19a>
 800a034:	3301      	adds	r3, #1
 800a036:	440b      	add	r3, r1
 800a038:	6123      	str	r3, [r4, #16]
 800a03a:	f04f 0a00 	mov.w	sl, #0
 800a03e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a040:	e7df      	b.n	800a002 <_printf_float+0x162>
 800a042:	b913      	cbnz	r3, 800a04a <_printf_float+0x1aa>
 800a044:	6822      	ldr	r2, [r4, #0]
 800a046:	07d2      	lsls	r2, r2, #31
 800a048:	d501      	bpl.n	800a04e <_printf_float+0x1ae>
 800a04a:	3302      	adds	r3, #2
 800a04c:	e7f4      	b.n	800a038 <_printf_float+0x198>
 800a04e:	2301      	movs	r3, #1
 800a050:	e7f2      	b.n	800a038 <_printf_float+0x198>
 800a052:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a058:	4299      	cmp	r1, r3
 800a05a:	db05      	blt.n	800a068 <_printf_float+0x1c8>
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	6121      	str	r1, [r4, #16]
 800a060:	07d8      	lsls	r0, r3, #31
 800a062:	d5ea      	bpl.n	800a03a <_printf_float+0x19a>
 800a064:	1c4b      	adds	r3, r1, #1
 800a066:	e7e7      	b.n	800a038 <_printf_float+0x198>
 800a068:	2900      	cmp	r1, #0
 800a06a:	bfcc      	ite	gt
 800a06c:	2201      	movgt	r2, #1
 800a06e:	f1c1 0202 	rsble	r2, r1, #2
 800a072:	4413      	add	r3, r2
 800a074:	e7e0      	b.n	800a038 <_printf_float+0x198>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	055a      	lsls	r2, r3, #21
 800a07a:	d407      	bmi.n	800a08c <_printf_float+0x1ec>
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	4642      	mov	r2, r8
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	d12b      	bne.n	800a0e2 <_printf_float+0x242>
 800a08a:	e764      	b.n	8009f56 <_printf_float+0xb6>
 800a08c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a090:	f240 80dd 	bls.w	800a24e <_printf_float+0x3ae>
 800a094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a098:	2200      	movs	r2, #0
 800a09a:	2300      	movs	r3, #0
 800a09c:	f7f6 fc84 	bl	80009a8 <__aeabi_dcmpeq>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d033      	beq.n	800a10c <_printf_float+0x26c>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	4a35      	ldr	r2, [pc, #212]	; (800a180 <_printf_float+0x2e0>)
 800a0ac:	47b8      	blx	r7
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	f43f af51 	beq.w	8009f56 <_printf_float+0xb6>
 800a0b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	db02      	blt.n	800a0c2 <_printf_float+0x222>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	07d8      	lsls	r0, r3, #31
 800a0c0:	d50f      	bpl.n	800a0e2 <_printf_float+0x242>
 800a0c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f43f af42 	beq.w	8009f56 <_printf_float+0xb6>
 800a0d2:	f04f 0800 	mov.w	r8, #0
 800a0d6:	f104 091a 	add.w	r9, r4, #26
 800a0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	4543      	cmp	r3, r8
 800a0e0:	dc09      	bgt.n	800a0f6 <_printf_float+0x256>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	079b      	lsls	r3, r3, #30
 800a0e6:	f100 8104 	bmi.w	800a2f2 <_printf_float+0x452>
 800a0ea:	68e0      	ldr	r0, [r4, #12]
 800a0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0ee:	4298      	cmp	r0, r3
 800a0f0:	bfb8      	it	lt
 800a0f2:	4618      	movlt	r0, r3
 800a0f4:	e731      	b.n	8009f5a <_printf_float+0xba>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	464a      	mov	r2, r9
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b8      	blx	r7
 800a100:	3001      	adds	r0, #1
 800a102:	f43f af28 	beq.w	8009f56 <_printf_float+0xb6>
 800a106:	f108 0801 	add.w	r8, r8, #1
 800a10a:	e7e6      	b.n	800a0da <_printf_float+0x23a>
 800a10c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a10e:	2b00      	cmp	r3, #0
 800a110:	dc38      	bgt.n	800a184 <_printf_float+0x2e4>
 800a112:	2301      	movs	r3, #1
 800a114:	4631      	mov	r1, r6
 800a116:	4628      	mov	r0, r5
 800a118:	4a19      	ldr	r2, [pc, #100]	; (800a180 <_printf_float+0x2e0>)
 800a11a:	47b8      	blx	r7
 800a11c:	3001      	adds	r0, #1
 800a11e:	f43f af1a 	beq.w	8009f56 <_printf_float+0xb6>
 800a122:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a126:	4313      	orrs	r3, r2
 800a128:	d102      	bne.n	800a130 <_printf_float+0x290>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	07d9      	lsls	r1, r3, #31
 800a12e:	d5d8      	bpl.n	800a0e2 <_printf_float+0x242>
 800a130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a134:	4631      	mov	r1, r6
 800a136:	4628      	mov	r0, r5
 800a138:	47b8      	blx	r7
 800a13a:	3001      	adds	r0, #1
 800a13c:	f43f af0b 	beq.w	8009f56 <_printf_float+0xb6>
 800a140:	f04f 0900 	mov.w	r9, #0
 800a144:	f104 0a1a 	add.w	sl, r4, #26
 800a148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a14a:	425b      	negs	r3, r3
 800a14c:	454b      	cmp	r3, r9
 800a14e:	dc01      	bgt.n	800a154 <_printf_float+0x2b4>
 800a150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a152:	e794      	b.n	800a07e <_printf_float+0x1de>
 800a154:	2301      	movs	r3, #1
 800a156:	4652      	mov	r2, sl
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f aef9 	beq.w	8009f56 <_printf_float+0xb6>
 800a164:	f109 0901 	add.w	r9, r9, #1
 800a168:	e7ee      	b.n	800a148 <_printf_float+0x2a8>
 800a16a:	bf00      	nop
 800a16c:	7fefffff 	.word	0x7fefffff
 800a170:	0800f597 	.word	0x0800f597
 800a174:	0800f59b 	.word	0x0800f59b
 800a178:	0800f59f 	.word	0x0800f59f
 800a17c:	0800f5a3 	.word	0x0800f5a3
 800a180:	0800f5a7 	.word	0x0800f5a7
 800a184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a188:	429a      	cmp	r2, r3
 800a18a:	bfa8      	it	ge
 800a18c:	461a      	movge	r2, r3
 800a18e:	2a00      	cmp	r2, #0
 800a190:	4691      	mov	r9, r2
 800a192:	dc37      	bgt.n	800a204 <_printf_float+0x364>
 800a194:	f04f 0b00 	mov.w	fp, #0
 800a198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a19c:	f104 021a 	add.w	r2, r4, #26
 800a1a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a1a4:	ebaa 0309 	sub.w	r3, sl, r9
 800a1a8:	455b      	cmp	r3, fp
 800a1aa:	dc33      	bgt.n	800a214 <_printf_float+0x374>
 800a1ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	db3b      	blt.n	800a22c <_printf_float+0x38c>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	07da      	lsls	r2, r3, #31
 800a1b8:	d438      	bmi.n	800a22c <_printf_float+0x38c>
 800a1ba:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a1be:	eba2 0903 	sub.w	r9, r2, r3
 800a1c2:	eba2 020a 	sub.w	r2, r2, sl
 800a1c6:	4591      	cmp	r9, r2
 800a1c8:	bfa8      	it	ge
 800a1ca:	4691      	movge	r9, r2
 800a1cc:	f1b9 0f00 	cmp.w	r9, #0
 800a1d0:	dc34      	bgt.n	800a23c <_printf_float+0x39c>
 800a1d2:	f04f 0800 	mov.w	r8, #0
 800a1d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1da:	f104 0a1a 	add.w	sl, r4, #26
 800a1de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a1e2:	1a9b      	subs	r3, r3, r2
 800a1e4:	eba3 0309 	sub.w	r3, r3, r9
 800a1e8:	4543      	cmp	r3, r8
 800a1ea:	f77f af7a 	ble.w	800a0e2 <_printf_float+0x242>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4652      	mov	r2, sl
 800a1f2:	4631      	mov	r1, r6
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b8      	blx	r7
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	f43f aeac 	beq.w	8009f56 <_printf_float+0xb6>
 800a1fe:	f108 0801 	add.w	r8, r8, #1
 800a202:	e7ec      	b.n	800a1de <_printf_float+0x33e>
 800a204:	4613      	mov	r3, r2
 800a206:	4631      	mov	r1, r6
 800a208:	4642      	mov	r2, r8
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b8      	blx	r7
 800a20e:	3001      	adds	r0, #1
 800a210:	d1c0      	bne.n	800a194 <_printf_float+0x2f4>
 800a212:	e6a0      	b.n	8009f56 <_printf_float+0xb6>
 800a214:	2301      	movs	r3, #1
 800a216:	4631      	mov	r1, r6
 800a218:	4628      	mov	r0, r5
 800a21a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a21c:	47b8      	blx	r7
 800a21e:	3001      	adds	r0, #1
 800a220:	f43f ae99 	beq.w	8009f56 <_printf_float+0xb6>
 800a224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a226:	f10b 0b01 	add.w	fp, fp, #1
 800a22a:	e7b9      	b.n	800a1a0 <_printf_float+0x300>
 800a22c:	4631      	mov	r1, r6
 800a22e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a232:	4628      	mov	r0, r5
 800a234:	47b8      	blx	r7
 800a236:	3001      	adds	r0, #1
 800a238:	d1bf      	bne.n	800a1ba <_printf_float+0x31a>
 800a23a:	e68c      	b.n	8009f56 <_printf_float+0xb6>
 800a23c:	464b      	mov	r3, r9
 800a23e:	4631      	mov	r1, r6
 800a240:	4628      	mov	r0, r5
 800a242:	eb08 020a 	add.w	r2, r8, sl
 800a246:	47b8      	blx	r7
 800a248:	3001      	adds	r0, #1
 800a24a:	d1c2      	bne.n	800a1d2 <_printf_float+0x332>
 800a24c:	e683      	b.n	8009f56 <_printf_float+0xb6>
 800a24e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a250:	2a01      	cmp	r2, #1
 800a252:	dc01      	bgt.n	800a258 <_printf_float+0x3b8>
 800a254:	07db      	lsls	r3, r3, #31
 800a256:	d539      	bpl.n	800a2cc <_printf_float+0x42c>
 800a258:	2301      	movs	r3, #1
 800a25a:	4642      	mov	r2, r8
 800a25c:	4631      	mov	r1, r6
 800a25e:	4628      	mov	r0, r5
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	f43f ae77 	beq.w	8009f56 <_printf_float+0xb6>
 800a268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a26c:	4631      	mov	r1, r6
 800a26e:	4628      	mov	r0, r5
 800a270:	47b8      	blx	r7
 800a272:	3001      	adds	r0, #1
 800a274:	f43f ae6f 	beq.w	8009f56 <_printf_float+0xb6>
 800a278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a27c:	2200      	movs	r2, #0
 800a27e:	2300      	movs	r3, #0
 800a280:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800a284:	f7f6 fb90 	bl	80009a8 <__aeabi_dcmpeq>
 800a288:	b9d8      	cbnz	r0, 800a2c2 <_printf_float+0x422>
 800a28a:	f109 33ff 	add.w	r3, r9, #4294967295
 800a28e:	f108 0201 	add.w	r2, r8, #1
 800a292:	4631      	mov	r1, r6
 800a294:	4628      	mov	r0, r5
 800a296:	47b8      	blx	r7
 800a298:	3001      	adds	r0, #1
 800a29a:	d10e      	bne.n	800a2ba <_printf_float+0x41a>
 800a29c:	e65b      	b.n	8009f56 <_printf_float+0xb6>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	464a      	mov	r2, r9
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f ae54 	beq.w	8009f56 <_printf_float+0xb6>
 800a2ae:	f108 0801 	add.w	r8, r8, #1
 800a2b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	4543      	cmp	r3, r8
 800a2b8:	dcf1      	bgt.n	800a29e <_printf_float+0x3fe>
 800a2ba:	4653      	mov	r3, sl
 800a2bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2c0:	e6de      	b.n	800a080 <_printf_float+0x1e0>
 800a2c2:	f04f 0800 	mov.w	r8, #0
 800a2c6:	f104 091a 	add.w	r9, r4, #26
 800a2ca:	e7f2      	b.n	800a2b2 <_printf_float+0x412>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	4642      	mov	r2, r8
 800a2d0:	e7df      	b.n	800a292 <_printf_float+0x3f2>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	464a      	mov	r2, r9
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f43f ae3a 	beq.w	8009f56 <_printf_float+0xb6>
 800a2e2:	f108 0801 	add.w	r8, r8, #1
 800a2e6:	68e3      	ldr	r3, [r4, #12]
 800a2e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2ea:	1a5b      	subs	r3, r3, r1
 800a2ec:	4543      	cmp	r3, r8
 800a2ee:	dcf0      	bgt.n	800a2d2 <_printf_float+0x432>
 800a2f0:	e6fb      	b.n	800a0ea <_printf_float+0x24a>
 800a2f2:	f04f 0800 	mov.w	r8, #0
 800a2f6:	f104 0919 	add.w	r9, r4, #25
 800a2fa:	e7f4      	b.n	800a2e6 <_printf_float+0x446>

0800a2fc <_printf_common>:
 800a2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a300:	4616      	mov	r6, r2
 800a302:	4699      	mov	r9, r3
 800a304:	688a      	ldr	r2, [r1, #8]
 800a306:	690b      	ldr	r3, [r1, #16]
 800a308:	4607      	mov	r7, r0
 800a30a:	4293      	cmp	r3, r2
 800a30c:	bfb8      	it	lt
 800a30e:	4613      	movlt	r3, r2
 800a310:	6033      	str	r3, [r6, #0]
 800a312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a316:	460c      	mov	r4, r1
 800a318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a31c:	b10a      	cbz	r2, 800a322 <_printf_common+0x26>
 800a31e:	3301      	adds	r3, #1
 800a320:	6033      	str	r3, [r6, #0]
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	0699      	lsls	r1, r3, #26
 800a326:	bf42      	ittt	mi
 800a328:	6833      	ldrmi	r3, [r6, #0]
 800a32a:	3302      	addmi	r3, #2
 800a32c:	6033      	strmi	r3, [r6, #0]
 800a32e:	6825      	ldr	r5, [r4, #0]
 800a330:	f015 0506 	ands.w	r5, r5, #6
 800a334:	d106      	bne.n	800a344 <_printf_common+0x48>
 800a336:	f104 0a19 	add.w	sl, r4, #25
 800a33a:	68e3      	ldr	r3, [r4, #12]
 800a33c:	6832      	ldr	r2, [r6, #0]
 800a33e:	1a9b      	subs	r3, r3, r2
 800a340:	42ab      	cmp	r3, r5
 800a342:	dc2b      	bgt.n	800a39c <_printf_common+0xa0>
 800a344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a348:	1e13      	subs	r3, r2, #0
 800a34a:	6822      	ldr	r2, [r4, #0]
 800a34c:	bf18      	it	ne
 800a34e:	2301      	movne	r3, #1
 800a350:	0692      	lsls	r2, r2, #26
 800a352:	d430      	bmi.n	800a3b6 <_printf_common+0xba>
 800a354:	4649      	mov	r1, r9
 800a356:	4638      	mov	r0, r7
 800a358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a35c:	47c0      	blx	r8
 800a35e:	3001      	adds	r0, #1
 800a360:	d023      	beq.n	800a3aa <_printf_common+0xae>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	6922      	ldr	r2, [r4, #16]
 800a366:	f003 0306 	and.w	r3, r3, #6
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	bf14      	ite	ne
 800a36e:	2500      	movne	r5, #0
 800a370:	6833      	ldreq	r3, [r6, #0]
 800a372:	f04f 0600 	mov.w	r6, #0
 800a376:	bf08      	it	eq
 800a378:	68e5      	ldreq	r5, [r4, #12]
 800a37a:	f104 041a 	add.w	r4, r4, #26
 800a37e:	bf08      	it	eq
 800a380:	1aed      	subeq	r5, r5, r3
 800a382:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a386:	bf08      	it	eq
 800a388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a38c:	4293      	cmp	r3, r2
 800a38e:	bfc4      	itt	gt
 800a390:	1a9b      	subgt	r3, r3, r2
 800a392:	18ed      	addgt	r5, r5, r3
 800a394:	42b5      	cmp	r5, r6
 800a396:	d11a      	bne.n	800a3ce <_printf_common+0xd2>
 800a398:	2000      	movs	r0, #0
 800a39a:	e008      	b.n	800a3ae <_printf_common+0xb2>
 800a39c:	2301      	movs	r3, #1
 800a39e:	4652      	mov	r2, sl
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	47c0      	blx	r8
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d103      	bne.n	800a3b2 <_printf_common+0xb6>
 800a3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b2:	3501      	adds	r5, #1
 800a3b4:	e7c1      	b.n	800a33a <_printf_common+0x3e>
 800a3b6:	2030      	movs	r0, #48	; 0x30
 800a3b8:	18e1      	adds	r1, r4, r3
 800a3ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3c4:	4422      	add	r2, r4
 800a3c6:	3302      	adds	r3, #2
 800a3c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3cc:	e7c2      	b.n	800a354 <_printf_common+0x58>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	4649      	mov	r1, r9
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	47c0      	blx	r8
 800a3d8:	3001      	adds	r0, #1
 800a3da:	d0e6      	beq.n	800a3aa <_printf_common+0xae>
 800a3dc:	3601      	adds	r6, #1
 800a3de:	e7d9      	b.n	800a394 <_printf_common+0x98>

0800a3e0 <_printf_i>:
 800a3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	7e0f      	ldrb	r7, [r1, #24]
 800a3e6:	4691      	mov	r9, r2
 800a3e8:	2f78      	cmp	r7, #120	; 0x78
 800a3ea:	4680      	mov	r8, r0
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	469a      	mov	sl, r3
 800a3f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3f6:	d807      	bhi.n	800a408 <_printf_i+0x28>
 800a3f8:	2f62      	cmp	r7, #98	; 0x62
 800a3fa:	d80a      	bhi.n	800a412 <_printf_i+0x32>
 800a3fc:	2f00      	cmp	r7, #0
 800a3fe:	f000 80d5 	beq.w	800a5ac <_printf_i+0x1cc>
 800a402:	2f58      	cmp	r7, #88	; 0x58
 800a404:	f000 80c1 	beq.w	800a58a <_printf_i+0x1aa>
 800a408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a40c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a410:	e03a      	b.n	800a488 <_printf_i+0xa8>
 800a412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a416:	2b15      	cmp	r3, #21
 800a418:	d8f6      	bhi.n	800a408 <_printf_i+0x28>
 800a41a:	a101      	add	r1, pc, #4	; (adr r1, 800a420 <_printf_i+0x40>)
 800a41c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a420:	0800a479 	.word	0x0800a479
 800a424:	0800a48d 	.word	0x0800a48d
 800a428:	0800a409 	.word	0x0800a409
 800a42c:	0800a409 	.word	0x0800a409
 800a430:	0800a409 	.word	0x0800a409
 800a434:	0800a409 	.word	0x0800a409
 800a438:	0800a48d 	.word	0x0800a48d
 800a43c:	0800a409 	.word	0x0800a409
 800a440:	0800a409 	.word	0x0800a409
 800a444:	0800a409 	.word	0x0800a409
 800a448:	0800a409 	.word	0x0800a409
 800a44c:	0800a593 	.word	0x0800a593
 800a450:	0800a4b9 	.word	0x0800a4b9
 800a454:	0800a54d 	.word	0x0800a54d
 800a458:	0800a409 	.word	0x0800a409
 800a45c:	0800a409 	.word	0x0800a409
 800a460:	0800a5b5 	.word	0x0800a5b5
 800a464:	0800a409 	.word	0x0800a409
 800a468:	0800a4b9 	.word	0x0800a4b9
 800a46c:	0800a409 	.word	0x0800a409
 800a470:	0800a409 	.word	0x0800a409
 800a474:	0800a555 	.word	0x0800a555
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	602a      	str	r2, [r5, #0]
 800a480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a488:	2301      	movs	r3, #1
 800a48a:	e0a0      	b.n	800a5ce <_printf_i+0x1ee>
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	0607      	lsls	r7, r0, #24
 800a492:	f103 0104 	add.w	r1, r3, #4
 800a496:	6029      	str	r1, [r5, #0]
 800a498:	d501      	bpl.n	800a49e <_printf_i+0xbe>
 800a49a:	681e      	ldr	r6, [r3, #0]
 800a49c:	e003      	b.n	800a4a6 <_printf_i+0xc6>
 800a49e:	0646      	lsls	r6, r0, #25
 800a4a0:	d5fb      	bpl.n	800a49a <_printf_i+0xba>
 800a4a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	da03      	bge.n	800a4b2 <_printf_i+0xd2>
 800a4aa:	232d      	movs	r3, #45	; 0x2d
 800a4ac:	4276      	negs	r6, r6
 800a4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b2:	230a      	movs	r3, #10
 800a4b4:	4859      	ldr	r0, [pc, #356]	; (800a61c <_printf_i+0x23c>)
 800a4b6:	e012      	b.n	800a4de <_printf_i+0xfe>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	6820      	ldr	r0, [r4, #0]
 800a4bc:	1d19      	adds	r1, r3, #4
 800a4be:	6029      	str	r1, [r5, #0]
 800a4c0:	0605      	lsls	r5, r0, #24
 800a4c2:	d501      	bpl.n	800a4c8 <_printf_i+0xe8>
 800a4c4:	681e      	ldr	r6, [r3, #0]
 800a4c6:	e002      	b.n	800a4ce <_printf_i+0xee>
 800a4c8:	0641      	lsls	r1, r0, #25
 800a4ca:	d5fb      	bpl.n	800a4c4 <_printf_i+0xe4>
 800a4cc:	881e      	ldrh	r6, [r3, #0]
 800a4ce:	2f6f      	cmp	r7, #111	; 0x6f
 800a4d0:	bf0c      	ite	eq
 800a4d2:	2308      	moveq	r3, #8
 800a4d4:	230a      	movne	r3, #10
 800a4d6:	4851      	ldr	r0, [pc, #324]	; (800a61c <_printf_i+0x23c>)
 800a4d8:	2100      	movs	r1, #0
 800a4da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4de:	6865      	ldr	r5, [r4, #4]
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	bfa8      	it	ge
 800a4e4:	6821      	ldrge	r1, [r4, #0]
 800a4e6:	60a5      	str	r5, [r4, #8]
 800a4e8:	bfa4      	itt	ge
 800a4ea:	f021 0104 	bicge.w	r1, r1, #4
 800a4ee:	6021      	strge	r1, [r4, #0]
 800a4f0:	b90e      	cbnz	r6, 800a4f6 <_printf_i+0x116>
 800a4f2:	2d00      	cmp	r5, #0
 800a4f4:	d04b      	beq.n	800a58e <_printf_i+0x1ae>
 800a4f6:	4615      	mov	r5, r2
 800a4f8:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4fc:	fb03 6711 	mls	r7, r3, r1, r6
 800a500:	5dc7      	ldrb	r7, [r0, r7]
 800a502:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a506:	4637      	mov	r7, r6
 800a508:	42bb      	cmp	r3, r7
 800a50a:	460e      	mov	r6, r1
 800a50c:	d9f4      	bls.n	800a4f8 <_printf_i+0x118>
 800a50e:	2b08      	cmp	r3, #8
 800a510:	d10b      	bne.n	800a52a <_printf_i+0x14a>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	07de      	lsls	r6, r3, #31
 800a516:	d508      	bpl.n	800a52a <_printf_i+0x14a>
 800a518:	6923      	ldr	r3, [r4, #16]
 800a51a:	6861      	ldr	r1, [r4, #4]
 800a51c:	4299      	cmp	r1, r3
 800a51e:	bfde      	ittt	le
 800a520:	2330      	movle	r3, #48	; 0x30
 800a522:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a526:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a52a:	1b52      	subs	r2, r2, r5
 800a52c:	6122      	str	r2, [r4, #16]
 800a52e:	464b      	mov	r3, r9
 800a530:	4621      	mov	r1, r4
 800a532:	4640      	mov	r0, r8
 800a534:	f8cd a000 	str.w	sl, [sp]
 800a538:	aa03      	add	r2, sp, #12
 800a53a:	f7ff fedf 	bl	800a2fc <_printf_common>
 800a53e:	3001      	adds	r0, #1
 800a540:	d14a      	bne.n	800a5d8 <_printf_i+0x1f8>
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	b004      	add	sp, #16
 800a548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	f043 0320 	orr.w	r3, r3, #32
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	2778      	movs	r7, #120	; 0x78
 800a556:	4832      	ldr	r0, [pc, #200]	; (800a620 <_printf_i+0x240>)
 800a558:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	6829      	ldr	r1, [r5, #0]
 800a560:	061f      	lsls	r7, r3, #24
 800a562:	f851 6b04 	ldr.w	r6, [r1], #4
 800a566:	d402      	bmi.n	800a56e <_printf_i+0x18e>
 800a568:	065f      	lsls	r7, r3, #25
 800a56a:	bf48      	it	mi
 800a56c:	b2b6      	uxthmi	r6, r6
 800a56e:	07df      	lsls	r7, r3, #31
 800a570:	bf48      	it	mi
 800a572:	f043 0320 	orrmi.w	r3, r3, #32
 800a576:	6029      	str	r1, [r5, #0]
 800a578:	bf48      	it	mi
 800a57a:	6023      	strmi	r3, [r4, #0]
 800a57c:	b91e      	cbnz	r6, 800a586 <_printf_i+0x1a6>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	f023 0320 	bic.w	r3, r3, #32
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	2310      	movs	r3, #16
 800a588:	e7a6      	b.n	800a4d8 <_printf_i+0xf8>
 800a58a:	4824      	ldr	r0, [pc, #144]	; (800a61c <_printf_i+0x23c>)
 800a58c:	e7e4      	b.n	800a558 <_printf_i+0x178>
 800a58e:	4615      	mov	r5, r2
 800a590:	e7bd      	b.n	800a50e <_printf_i+0x12e>
 800a592:	682b      	ldr	r3, [r5, #0]
 800a594:	6826      	ldr	r6, [r4, #0]
 800a596:	1d18      	adds	r0, r3, #4
 800a598:	6961      	ldr	r1, [r4, #20]
 800a59a:	6028      	str	r0, [r5, #0]
 800a59c:	0635      	lsls	r5, r6, #24
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	d501      	bpl.n	800a5a6 <_printf_i+0x1c6>
 800a5a2:	6019      	str	r1, [r3, #0]
 800a5a4:	e002      	b.n	800a5ac <_printf_i+0x1cc>
 800a5a6:	0670      	lsls	r0, r6, #25
 800a5a8:	d5fb      	bpl.n	800a5a2 <_printf_i+0x1c2>
 800a5aa:	8019      	strh	r1, [r3, #0]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4615      	mov	r5, r2
 800a5b0:	6123      	str	r3, [r4, #16]
 800a5b2:	e7bc      	b.n	800a52e <_printf_i+0x14e>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	1d1a      	adds	r2, r3, #4
 800a5ba:	602a      	str	r2, [r5, #0]
 800a5bc:	681d      	ldr	r5, [r3, #0]
 800a5be:	6862      	ldr	r2, [r4, #4]
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	f000 fc25 	bl	800ae10 <memchr>
 800a5c6:	b108      	cbz	r0, 800a5cc <_printf_i+0x1ec>
 800a5c8:	1b40      	subs	r0, r0, r5
 800a5ca:	6060      	str	r0, [r4, #4]
 800a5cc:	6863      	ldr	r3, [r4, #4]
 800a5ce:	6123      	str	r3, [r4, #16]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d6:	e7aa      	b.n	800a52e <_printf_i+0x14e>
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4640      	mov	r0, r8
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	47d0      	blx	sl
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d0ad      	beq.n	800a542 <_printf_i+0x162>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	079b      	lsls	r3, r3, #30
 800a5ea:	d413      	bmi.n	800a614 <_printf_i+0x234>
 800a5ec:	68e0      	ldr	r0, [r4, #12]
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	4298      	cmp	r0, r3
 800a5f2:	bfb8      	it	lt
 800a5f4:	4618      	movlt	r0, r3
 800a5f6:	e7a6      	b.n	800a546 <_printf_i+0x166>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	4632      	mov	r2, r6
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	4640      	mov	r0, r8
 800a600:	47d0      	blx	sl
 800a602:	3001      	adds	r0, #1
 800a604:	d09d      	beq.n	800a542 <_printf_i+0x162>
 800a606:	3501      	adds	r5, #1
 800a608:	68e3      	ldr	r3, [r4, #12]
 800a60a:	9903      	ldr	r1, [sp, #12]
 800a60c:	1a5b      	subs	r3, r3, r1
 800a60e:	42ab      	cmp	r3, r5
 800a610:	dcf2      	bgt.n	800a5f8 <_printf_i+0x218>
 800a612:	e7eb      	b.n	800a5ec <_printf_i+0x20c>
 800a614:	2500      	movs	r5, #0
 800a616:	f104 0619 	add.w	r6, r4, #25
 800a61a:	e7f5      	b.n	800a608 <_printf_i+0x228>
 800a61c:	0800f5a9 	.word	0x0800f5a9
 800a620:	0800f5ba 	.word	0x0800f5ba

0800a624 <_scanf_float>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	b087      	sub	sp, #28
 800a62a:	9303      	str	r3, [sp, #12]
 800a62c:	688b      	ldr	r3, [r1, #8]
 800a62e:	4617      	mov	r7, r2
 800a630:	1e5a      	subs	r2, r3, #1
 800a632:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a636:	bf85      	ittet	hi
 800a638:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a63c:	195b      	addhi	r3, r3, r5
 800a63e:	2300      	movls	r3, #0
 800a640:	9302      	strhi	r3, [sp, #8]
 800a642:	bf88      	it	hi
 800a644:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a648:	468b      	mov	fp, r1
 800a64a:	f04f 0500 	mov.w	r5, #0
 800a64e:	bf8c      	ite	hi
 800a650:	608b      	strhi	r3, [r1, #8]
 800a652:	9302      	strls	r3, [sp, #8]
 800a654:	680b      	ldr	r3, [r1, #0]
 800a656:	4680      	mov	r8, r0
 800a658:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a65c:	f84b 3b1c 	str.w	r3, [fp], #28
 800a660:	460c      	mov	r4, r1
 800a662:	465e      	mov	r6, fp
 800a664:	46aa      	mov	sl, r5
 800a666:	46a9      	mov	r9, r5
 800a668:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a66c:	9501      	str	r5, [sp, #4]
 800a66e:	68a2      	ldr	r2, [r4, #8]
 800a670:	b152      	cbz	r2, 800a688 <_scanf_float+0x64>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	2b4e      	cmp	r3, #78	; 0x4e
 800a678:	d864      	bhi.n	800a744 <_scanf_float+0x120>
 800a67a:	2b40      	cmp	r3, #64	; 0x40
 800a67c:	d83c      	bhi.n	800a6f8 <_scanf_float+0xd4>
 800a67e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a682:	b2c8      	uxtb	r0, r1
 800a684:	280e      	cmp	r0, #14
 800a686:	d93a      	bls.n	800a6fe <_scanf_float+0xda>
 800a688:	f1b9 0f00 	cmp.w	r9, #0
 800a68c:	d003      	beq.n	800a696 <_scanf_float+0x72>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a69a:	f1ba 0f01 	cmp.w	sl, #1
 800a69e:	f200 8113 	bhi.w	800a8c8 <_scanf_float+0x2a4>
 800a6a2:	455e      	cmp	r6, fp
 800a6a4:	f200 8105 	bhi.w	800a8b2 <_scanf_float+0x28e>
 800a6a8:	2501      	movs	r5, #1
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	b007      	add	sp, #28
 800a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a6b6:	2a0d      	cmp	r2, #13
 800a6b8:	d8e6      	bhi.n	800a688 <_scanf_float+0x64>
 800a6ba:	a101      	add	r1, pc, #4	; (adr r1, 800a6c0 <_scanf_float+0x9c>)
 800a6bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6c0:	0800a7ff 	.word	0x0800a7ff
 800a6c4:	0800a689 	.word	0x0800a689
 800a6c8:	0800a689 	.word	0x0800a689
 800a6cc:	0800a689 	.word	0x0800a689
 800a6d0:	0800a85f 	.word	0x0800a85f
 800a6d4:	0800a837 	.word	0x0800a837
 800a6d8:	0800a689 	.word	0x0800a689
 800a6dc:	0800a689 	.word	0x0800a689
 800a6e0:	0800a80d 	.word	0x0800a80d
 800a6e4:	0800a689 	.word	0x0800a689
 800a6e8:	0800a689 	.word	0x0800a689
 800a6ec:	0800a689 	.word	0x0800a689
 800a6f0:	0800a689 	.word	0x0800a689
 800a6f4:	0800a7c5 	.word	0x0800a7c5
 800a6f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a6fc:	e7db      	b.n	800a6b6 <_scanf_float+0x92>
 800a6fe:	290e      	cmp	r1, #14
 800a700:	d8c2      	bhi.n	800a688 <_scanf_float+0x64>
 800a702:	a001      	add	r0, pc, #4	; (adr r0, 800a708 <_scanf_float+0xe4>)
 800a704:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a708:	0800a7b7 	.word	0x0800a7b7
 800a70c:	0800a689 	.word	0x0800a689
 800a710:	0800a7b7 	.word	0x0800a7b7
 800a714:	0800a84b 	.word	0x0800a84b
 800a718:	0800a689 	.word	0x0800a689
 800a71c:	0800a765 	.word	0x0800a765
 800a720:	0800a7a1 	.word	0x0800a7a1
 800a724:	0800a7a1 	.word	0x0800a7a1
 800a728:	0800a7a1 	.word	0x0800a7a1
 800a72c:	0800a7a1 	.word	0x0800a7a1
 800a730:	0800a7a1 	.word	0x0800a7a1
 800a734:	0800a7a1 	.word	0x0800a7a1
 800a738:	0800a7a1 	.word	0x0800a7a1
 800a73c:	0800a7a1 	.word	0x0800a7a1
 800a740:	0800a7a1 	.word	0x0800a7a1
 800a744:	2b6e      	cmp	r3, #110	; 0x6e
 800a746:	d809      	bhi.n	800a75c <_scanf_float+0x138>
 800a748:	2b60      	cmp	r3, #96	; 0x60
 800a74a:	d8b2      	bhi.n	800a6b2 <_scanf_float+0x8e>
 800a74c:	2b54      	cmp	r3, #84	; 0x54
 800a74e:	d077      	beq.n	800a840 <_scanf_float+0x21c>
 800a750:	2b59      	cmp	r3, #89	; 0x59
 800a752:	d199      	bne.n	800a688 <_scanf_float+0x64>
 800a754:	2d07      	cmp	r5, #7
 800a756:	d197      	bne.n	800a688 <_scanf_float+0x64>
 800a758:	2508      	movs	r5, #8
 800a75a:	e029      	b.n	800a7b0 <_scanf_float+0x18c>
 800a75c:	2b74      	cmp	r3, #116	; 0x74
 800a75e:	d06f      	beq.n	800a840 <_scanf_float+0x21c>
 800a760:	2b79      	cmp	r3, #121	; 0x79
 800a762:	e7f6      	b.n	800a752 <_scanf_float+0x12e>
 800a764:	6821      	ldr	r1, [r4, #0]
 800a766:	05c8      	lsls	r0, r1, #23
 800a768:	d51a      	bpl.n	800a7a0 <_scanf_float+0x17c>
 800a76a:	9b02      	ldr	r3, [sp, #8]
 800a76c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a770:	6021      	str	r1, [r4, #0]
 800a772:	f109 0901 	add.w	r9, r9, #1
 800a776:	b11b      	cbz	r3, 800a780 <_scanf_float+0x15c>
 800a778:	3b01      	subs	r3, #1
 800a77a:	3201      	adds	r2, #1
 800a77c:	9302      	str	r3, [sp, #8]
 800a77e:	60a2      	str	r2, [r4, #8]
 800a780:	68a3      	ldr	r3, [r4, #8]
 800a782:	3b01      	subs	r3, #1
 800a784:	60a3      	str	r3, [r4, #8]
 800a786:	6923      	ldr	r3, [r4, #16]
 800a788:	3301      	adds	r3, #1
 800a78a:	6123      	str	r3, [r4, #16]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3b01      	subs	r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	607b      	str	r3, [r7, #4]
 800a794:	f340 8084 	ble.w	800a8a0 <_scanf_float+0x27c>
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	3301      	adds	r3, #1
 800a79c:	603b      	str	r3, [r7, #0]
 800a79e:	e766      	b.n	800a66e <_scanf_float+0x4a>
 800a7a0:	eb1a 0f05 	cmn.w	sl, r5
 800a7a4:	f47f af70 	bne.w	800a688 <_scanf_float+0x64>
 800a7a8:	6822      	ldr	r2, [r4, #0]
 800a7aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a7ae:	6022      	str	r2, [r4, #0]
 800a7b0:	f806 3b01 	strb.w	r3, [r6], #1
 800a7b4:	e7e4      	b.n	800a780 <_scanf_float+0x15c>
 800a7b6:	6822      	ldr	r2, [r4, #0]
 800a7b8:	0610      	lsls	r0, r2, #24
 800a7ba:	f57f af65 	bpl.w	800a688 <_scanf_float+0x64>
 800a7be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7c2:	e7f4      	b.n	800a7ae <_scanf_float+0x18a>
 800a7c4:	f1ba 0f00 	cmp.w	sl, #0
 800a7c8:	d10e      	bne.n	800a7e8 <_scanf_float+0x1c4>
 800a7ca:	f1b9 0f00 	cmp.w	r9, #0
 800a7ce:	d10e      	bne.n	800a7ee <_scanf_float+0x1ca>
 800a7d0:	6822      	ldr	r2, [r4, #0]
 800a7d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7da:	d108      	bne.n	800a7ee <_scanf_float+0x1ca>
 800a7dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7e0:	f04f 0a01 	mov.w	sl, #1
 800a7e4:	6022      	str	r2, [r4, #0]
 800a7e6:	e7e3      	b.n	800a7b0 <_scanf_float+0x18c>
 800a7e8:	f1ba 0f02 	cmp.w	sl, #2
 800a7ec:	d055      	beq.n	800a89a <_scanf_float+0x276>
 800a7ee:	2d01      	cmp	r5, #1
 800a7f0:	d002      	beq.n	800a7f8 <_scanf_float+0x1d4>
 800a7f2:	2d04      	cmp	r5, #4
 800a7f4:	f47f af48 	bne.w	800a688 <_scanf_float+0x64>
 800a7f8:	3501      	adds	r5, #1
 800a7fa:	b2ed      	uxtb	r5, r5
 800a7fc:	e7d8      	b.n	800a7b0 <_scanf_float+0x18c>
 800a7fe:	f1ba 0f01 	cmp.w	sl, #1
 800a802:	f47f af41 	bne.w	800a688 <_scanf_float+0x64>
 800a806:	f04f 0a02 	mov.w	sl, #2
 800a80a:	e7d1      	b.n	800a7b0 <_scanf_float+0x18c>
 800a80c:	b97d      	cbnz	r5, 800a82e <_scanf_float+0x20a>
 800a80e:	f1b9 0f00 	cmp.w	r9, #0
 800a812:	f47f af3c 	bne.w	800a68e <_scanf_float+0x6a>
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a81c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a820:	f47f af39 	bne.w	800a696 <_scanf_float+0x72>
 800a824:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a828:	2501      	movs	r5, #1
 800a82a:	6022      	str	r2, [r4, #0]
 800a82c:	e7c0      	b.n	800a7b0 <_scanf_float+0x18c>
 800a82e:	2d03      	cmp	r5, #3
 800a830:	d0e2      	beq.n	800a7f8 <_scanf_float+0x1d4>
 800a832:	2d05      	cmp	r5, #5
 800a834:	e7de      	b.n	800a7f4 <_scanf_float+0x1d0>
 800a836:	2d02      	cmp	r5, #2
 800a838:	f47f af26 	bne.w	800a688 <_scanf_float+0x64>
 800a83c:	2503      	movs	r5, #3
 800a83e:	e7b7      	b.n	800a7b0 <_scanf_float+0x18c>
 800a840:	2d06      	cmp	r5, #6
 800a842:	f47f af21 	bne.w	800a688 <_scanf_float+0x64>
 800a846:	2507      	movs	r5, #7
 800a848:	e7b2      	b.n	800a7b0 <_scanf_float+0x18c>
 800a84a:	6822      	ldr	r2, [r4, #0]
 800a84c:	0591      	lsls	r1, r2, #22
 800a84e:	f57f af1b 	bpl.w	800a688 <_scanf_float+0x64>
 800a852:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a856:	6022      	str	r2, [r4, #0]
 800a858:	f8cd 9004 	str.w	r9, [sp, #4]
 800a85c:	e7a8      	b.n	800a7b0 <_scanf_float+0x18c>
 800a85e:	6822      	ldr	r2, [r4, #0]
 800a860:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a864:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a868:	d006      	beq.n	800a878 <_scanf_float+0x254>
 800a86a:	0550      	lsls	r0, r2, #21
 800a86c:	f57f af0c 	bpl.w	800a688 <_scanf_float+0x64>
 800a870:	f1b9 0f00 	cmp.w	r9, #0
 800a874:	f43f af0f 	beq.w	800a696 <_scanf_float+0x72>
 800a878:	0591      	lsls	r1, r2, #22
 800a87a:	bf58      	it	pl
 800a87c:	9901      	ldrpl	r1, [sp, #4]
 800a87e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a882:	bf58      	it	pl
 800a884:	eba9 0101 	subpl.w	r1, r9, r1
 800a888:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a88c:	f04f 0900 	mov.w	r9, #0
 800a890:	bf58      	it	pl
 800a892:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a896:	6022      	str	r2, [r4, #0]
 800a898:	e78a      	b.n	800a7b0 <_scanf_float+0x18c>
 800a89a:	f04f 0a03 	mov.w	sl, #3
 800a89e:	e787      	b.n	800a7b0 <_scanf_float+0x18c>
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8a8:	4798      	blx	r3
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	f43f aedf 	beq.w	800a66e <_scanf_float+0x4a>
 800a8b0:	e6ea      	b.n	800a688 <_scanf_float+0x64>
 800a8b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8b6:	463a      	mov	r2, r7
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8be:	4798      	blx	r3
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	6123      	str	r3, [r4, #16]
 800a8c6:	e6ec      	b.n	800a6a2 <_scanf_float+0x7e>
 800a8c8:	1e6b      	subs	r3, r5, #1
 800a8ca:	2b06      	cmp	r3, #6
 800a8cc:	d825      	bhi.n	800a91a <_scanf_float+0x2f6>
 800a8ce:	2d02      	cmp	r5, #2
 800a8d0:	d836      	bhi.n	800a940 <_scanf_float+0x31c>
 800a8d2:	455e      	cmp	r6, fp
 800a8d4:	f67f aee8 	bls.w	800a6a8 <_scanf_float+0x84>
 800a8d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4640      	mov	r0, r8
 800a8e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8e4:	4798      	blx	r3
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	6123      	str	r3, [r4, #16]
 800a8ec:	e7f1      	b.n	800a8d2 <_scanf_float+0x2ae>
 800a8ee:	9802      	ldr	r0, [sp, #8]
 800a8f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a8f8:	463a      	mov	r2, r7
 800a8fa:	9002      	str	r0, [sp, #8]
 800a8fc:	4640      	mov	r0, r8
 800a8fe:	4798      	blx	r3
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	3b01      	subs	r3, #1
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a90a:	fa5f fa8a 	uxtb.w	sl, sl
 800a90e:	f1ba 0f02 	cmp.w	sl, #2
 800a912:	d1ec      	bne.n	800a8ee <_scanf_float+0x2ca>
 800a914:	3d03      	subs	r5, #3
 800a916:	b2ed      	uxtb	r5, r5
 800a918:	1b76      	subs	r6, r6, r5
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	05da      	lsls	r2, r3, #23
 800a91e:	d52f      	bpl.n	800a980 <_scanf_float+0x35c>
 800a920:	055b      	lsls	r3, r3, #21
 800a922:	d510      	bpl.n	800a946 <_scanf_float+0x322>
 800a924:	455e      	cmp	r6, fp
 800a926:	f67f aebf 	bls.w	800a6a8 <_scanf_float+0x84>
 800a92a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a92e:	463a      	mov	r2, r7
 800a930:	4640      	mov	r0, r8
 800a932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a936:	4798      	blx	r3
 800a938:	6923      	ldr	r3, [r4, #16]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	6123      	str	r3, [r4, #16]
 800a93e:	e7f1      	b.n	800a924 <_scanf_float+0x300>
 800a940:	46aa      	mov	sl, r5
 800a942:	9602      	str	r6, [sp, #8]
 800a944:	e7df      	b.n	800a906 <_scanf_float+0x2e2>
 800a946:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	2965      	cmp	r1, #101	; 0x65
 800a94e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a952:	f106 35ff 	add.w	r5, r6, #4294967295
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	d00c      	beq.n	800a974 <_scanf_float+0x350>
 800a95a:	2945      	cmp	r1, #69	; 0x45
 800a95c:	d00a      	beq.n	800a974 <_scanf_float+0x350>
 800a95e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a962:	463a      	mov	r2, r7
 800a964:	4640      	mov	r0, r8
 800a966:	4798      	blx	r3
 800a968:	6923      	ldr	r3, [r4, #16]
 800a96a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a96e:	3b01      	subs	r3, #1
 800a970:	1eb5      	subs	r5, r6, #2
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	463a      	mov	r2, r7
 800a976:	4640      	mov	r0, r8
 800a978:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a97c:	4798      	blx	r3
 800a97e:	462e      	mov	r6, r5
 800a980:	6825      	ldr	r5, [r4, #0]
 800a982:	f015 0510 	ands.w	r5, r5, #16
 800a986:	d155      	bne.n	800aa34 <_scanf_float+0x410>
 800a988:	7035      	strb	r5, [r6, #0]
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a994:	d11d      	bne.n	800a9d2 <_scanf_float+0x3ae>
 800a996:	9b01      	ldr	r3, [sp, #4]
 800a998:	454b      	cmp	r3, r9
 800a99a:	eba3 0209 	sub.w	r2, r3, r9
 800a99e:	d125      	bne.n	800a9ec <_scanf_float+0x3c8>
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	f002 fc73 	bl	800d290 <_strtod_r>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	f8d4 c000 	ldr.w	ip, [r4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f01c 0f02 	tst.w	ip, #2
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460f      	mov	r7, r1
 800a9ba:	f103 0204 	add.w	r2, r3, #4
 800a9be:	d020      	beq.n	800aa02 <_scanf_float+0x3de>
 800a9c0:	9903      	ldr	r1, [sp, #12]
 800a9c2:	600a      	str	r2, [r1, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	e9c3 6700 	strd	r6, r7, [r3]
 800a9ca:	68e3      	ldr	r3, [r4, #12]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	60e3      	str	r3, [r4, #12]
 800a9d0:	e66b      	b.n	800a6aa <_scanf_float+0x86>
 800a9d2:	9b04      	ldr	r3, [sp, #16]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0e3      	beq.n	800a9a0 <_scanf_float+0x37c>
 800a9d8:	9905      	ldr	r1, [sp, #20]
 800a9da:	230a      	movs	r3, #10
 800a9dc:	462a      	mov	r2, r5
 800a9de:	4640      	mov	r0, r8
 800a9e0:	3101      	adds	r1, #1
 800a9e2:	f7ff f9b5 	bl	8009d50 <_strtol_r>
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	9e05      	ldr	r6, [sp, #20]
 800a9ea:	1ac2      	subs	r2, r0, r3
 800a9ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a9f0:	429e      	cmp	r6, r3
 800a9f2:	bf28      	it	cs
 800a9f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	490f      	ldr	r1, [pc, #60]	; (800aa38 <_scanf_float+0x414>)
 800a9fc:	f000 f8d0 	bl	800aba0 <siprintf>
 800aa00:	e7ce      	b.n	800a9a0 <_scanf_float+0x37c>
 800aa02:	f01c 0f04 	tst.w	ip, #4
 800aa06:	d1db      	bne.n	800a9c0 <_scanf_float+0x39c>
 800aa08:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800aa0c:	f8cc 2000 	str.w	r2, [ip]
 800aa10:	f8d3 8000 	ldr.w	r8, [r3]
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	f7f5 fff8 	bl	8000a0c <__aeabi_dcmpun>
 800aa1c:	b128      	cbz	r0, 800aa2a <_scanf_float+0x406>
 800aa1e:	4807      	ldr	r0, [pc, #28]	; (800aa3c <_scanf_float+0x418>)
 800aa20:	f000 fa12 	bl	800ae48 <nanf>
 800aa24:	f8c8 0000 	str.w	r0, [r8]
 800aa28:	e7cf      	b.n	800a9ca <_scanf_float+0x3a6>
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f6 f84b 	bl	8000ac8 <__aeabi_d2f>
 800aa32:	e7f7      	b.n	800aa24 <_scanf_float+0x400>
 800aa34:	2500      	movs	r5, #0
 800aa36:	e638      	b.n	800a6aa <_scanf_float+0x86>
 800aa38:	0800f5cb 	.word	0x0800f5cb
 800aa3c:	0800f85c 	.word	0x0800f85c

0800aa40 <std>:
 800aa40:	2300      	movs	r3, #0
 800aa42:	b510      	push	{r4, lr}
 800aa44:	4604      	mov	r4, r0
 800aa46:	e9c0 3300 	strd	r3, r3, [r0]
 800aa4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa4e:	6083      	str	r3, [r0, #8]
 800aa50:	8181      	strh	r1, [r0, #12]
 800aa52:	6643      	str	r3, [r0, #100]	; 0x64
 800aa54:	81c2      	strh	r2, [r0, #14]
 800aa56:	6183      	str	r3, [r0, #24]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	2208      	movs	r2, #8
 800aa5c:	305c      	adds	r0, #92	; 0x5c
 800aa5e:	f000 f902 	bl	800ac66 <memset>
 800aa62:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <std+0x38>)
 800aa64:	6224      	str	r4, [r4, #32]
 800aa66:	6263      	str	r3, [r4, #36]	; 0x24
 800aa68:	4b04      	ldr	r3, [pc, #16]	; (800aa7c <std+0x3c>)
 800aa6a:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa6c:	4b04      	ldr	r3, [pc, #16]	; (800aa80 <std+0x40>)
 800aa6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa70:	4b04      	ldr	r3, [pc, #16]	; (800aa84 <std+0x44>)
 800aa72:	6323      	str	r3, [r4, #48]	; 0x30
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	bf00      	nop
 800aa78:	0800abe1 	.word	0x0800abe1
 800aa7c:	0800ac03 	.word	0x0800ac03
 800aa80:	0800ac3b 	.word	0x0800ac3b
 800aa84:	0800ac5f 	.word	0x0800ac5f

0800aa88 <stdio_exit_handler>:
 800aa88:	4a02      	ldr	r2, [pc, #8]	; (800aa94 <stdio_exit_handler+0xc>)
 800aa8a:	4903      	ldr	r1, [pc, #12]	; (800aa98 <stdio_exit_handler+0x10>)
 800aa8c:	4803      	ldr	r0, [pc, #12]	; (800aa9c <stdio_exit_handler+0x14>)
 800aa8e:	f000 b869 	b.w	800ab64 <_fwalk_sglue>
 800aa92:	bf00      	nop
 800aa94:	20000014 	.word	0x20000014
 800aa98:	0800d651 	.word	0x0800d651
 800aa9c:	20000020 	.word	0x20000020

0800aaa0 <cleanup_stdio>:
 800aaa0:	6841      	ldr	r1, [r0, #4]
 800aaa2:	4b0c      	ldr	r3, [pc, #48]	; (800aad4 <cleanup_stdio+0x34>)
 800aaa4:	b510      	push	{r4, lr}
 800aaa6:	4299      	cmp	r1, r3
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	d001      	beq.n	800aab0 <cleanup_stdio+0x10>
 800aaac:	f002 fdd0 	bl	800d650 <_fflush_r>
 800aab0:	68a1      	ldr	r1, [r4, #8]
 800aab2:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <cleanup_stdio+0x38>)
 800aab4:	4299      	cmp	r1, r3
 800aab6:	d002      	beq.n	800aabe <cleanup_stdio+0x1e>
 800aab8:	4620      	mov	r0, r4
 800aaba:	f002 fdc9 	bl	800d650 <_fflush_r>
 800aabe:	68e1      	ldr	r1, [r4, #12]
 800aac0:	4b06      	ldr	r3, [pc, #24]	; (800aadc <cleanup_stdio+0x3c>)
 800aac2:	4299      	cmp	r1, r3
 800aac4:	d004      	beq.n	800aad0 <cleanup_stdio+0x30>
 800aac6:	4620      	mov	r0, r4
 800aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aacc:	f002 bdc0 	b.w	800d650 <_fflush_r>
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	bf00      	nop
 800aad4:	20003e50 	.word	0x20003e50
 800aad8:	20003eb8 	.word	0x20003eb8
 800aadc:	20003f20 	.word	0x20003f20

0800aae0 <global_stdio_init.part.0>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <global_stdio_init.part.0+0x30>)
 800aae4:	4c0b      	ldr	r4, [pc, #44]	; (800ab14 <global_stdio_init.part.0+0x34>)
 800aae6:	4a0c      	ldr	r2, [pc, #48]	; (800ab18 <global_stdio_init.part.0+0x38>)
 800aae8:	4620      	mov	r0, r4
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	2104      	movs	r1, #4
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f7ff ffa6 	bl	800aa40 <std>
 800aaf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aaf8:	2201      	movs	r2, #1
 800aafa:	2109      	movs	r1, #9
 800aafc:	f7ff ffa0 	bl	800aa40 <std>
 800ab00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab04:	2202      	movs	r2, #2
 800ab06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab0a:	2112      	movs	r1, #18
 800ab0c:	f7ff bf98 	b.w	800aa40 <std>
 800ab10:	20003f88 	.word	0x20003f88
 800ab14:	20003e50 	.word	0x20003e50
 800ab18:	0800aa89 	.word	0x0800aa89

0800ab1c <__sfp_lock_acquire>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__sfp_lock_acquire+0x8>)
 800ab1e:	f000 b975 	b.w	800ae0c <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	20003f91 	.word	0x20003f91

0800ab28 <__sfp_lock_release>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__sfp_lock_release+0x8>)
 800ab2a:	f000 b970 	b.w	800ae0e <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20003f91 	.word	0x20003f91

0800ab34 <__sinit>:
 800ab34:	b510      	push	{r4, lr}
 800ab36:	4604      	mov	r4, r0
 800ab38:	f7ff fff0 	bl	800ab1c <__sfp_lock_acquire>
 800ab3c:	6a23      	ldr	r3, [r4, #32]
 800ab3e:	b11b      	cbz	r3, 800ab48 <__sinit+0x14>
 800ab40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab44:	f7ff bff0 	b.w	800ab28 <__sfp_lock_release>
 800ab48:	4b04      	ldr	r3, [pc, #16]	; (800ab5c <__sinit+0x28>)
 800ab4a:	6223      	str	r3, [r4, #32]
 800ab4c:	4b04      	ldr	r3, [pc, #16]	; (800ab60 <__sinit+0x2c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f5      	bne.n	800ab40 <__sinit+0xc>
 800ab54:	f7ff ffc4 	bl	800aae0 <global_stdio_init.part.0>
 800ab58:	e7f2      	b.n	800ab40 <__sinit+0xc>
 800ab5a:	bf00      	nop
 800ab5c:	0800aaa1 	.word	0x0800aaa1
 800ab60:	20003f88 	.word	0x20003f88

0800ab64 <_fwalk_sglue>:
 800ab64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab68:	4607      	mov	r7, r0
 800ab6a:	4688      	mov	r8, r1
 800ab6c:	4614      	mov	r4, r2
 800ab6e:	2600      	movs	r6, #0
 800ab70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab74:	f1b9 0901 	subs.w	r9, r9, #1
 800ab78:	d505      	bpl.n	800ab86 <_fwalk_sglue+0x22>
 800ab7a:	6824      	ldr	r4, [r4, #0]
 800ab7c:	2c00      	cmp	r4, #0
 800ab7e:	d1f7      	bne.n	800ab70 <_fwalk_sglue+0xc>
 800ab80:	4630      	mov	r0, r6
 800ab82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab86:	89ab      	ldrh	r3, [r5, #12]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d907      	bls.n	800ab9c <_fwalk_sglue+0x38>
 800ab8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab90:	3301      	adds	r3, #1
 800ab92:	d003      	beq.n	800ab9c <_fwalk_sglue+0x38>
 800ab94:	4629      	mov	r1, r5
 800ab96:	4638      	mov	r0, r7
 800ab98:	47c0      	blx	r8
 800ab9a:	4306      	orrs	r6, r0
 800ab9c:	3568      	adds	r5, #104	; 0x68
 800ab9e:	e7e9      	b.n	800ab74 <_fwalk_sglue+0x10>

0800aba0 <siprintf>:
 800aba0:	b40e      	push	{r1, r2, r3}
 800aba2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aba6:	b500      	push	{lr}
 800aba8:	b09c      	sub	sp, #112	; 0x70
 800abaa:	ab1d      	add	r3, sp, #116	; 0x74
 800abac:	9002      	str	r0, [sp, #8]
 800abae:	9006      	str	r0, [sp, #24]
 800abb0:	9107      	str	r1, [sp, #28]
 800abb2:	9104      	str	r1, [sp, #16]
 800abb4:	4808      	ldr	r0, [pc, #32]	; (800abd8 <siprintf+0x38>)
 800abb6:	4909      	ldr	r1, [pc, #36]	; (800abdc <siprintf+0x3c>)
 800abb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abbc:	9105      	str	r1, [sp, #20]
 800abbe:	6800      	ldr	r0, [r0, #0]
 800abc0:	a902      	add	r1, sp, #8
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	f002 fbc4 	bl	800d350 <_svfiprintf_r>
 800abc8:	2200      	movs	r2, #0
 800abca:	9b02      	ldr	r3, [sp, #8]
 800abcc:	701a      	strb	r2, [r3, #0]
 800abce:	b01c      	add	sp, #112	; 0x70
 800abd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abd4:	b003      	add	sp, #12
 800abd6:	4770      	bx	lr
 800abd8:	2000006c 	.word	0x2000006c
 800abdc:	ffff0208 	.word	0xffff0208

0800abe0 <__sread>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	460c      	mov	r4, r1
 800abe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe8:	f000 f8c2 	bl	800ad70 <_read_r>
 800abec:	2800      	cmp	r0, #0
 800abee:	bfab      	itete	ge
 800abf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abf2:	89a3      	ldrhlt	r3, [r4, #12]
 800abf4:	181b      	addge	r3, r3, r0
 800abf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abfa:	bfac      	ite	ge
 800abfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800abfe:	81a3      	strhlt	r3, [r4, #12]
 800ac00:	bd10      	pop	{r4, pc}

0800ac02 <__swrite>:
 800ac02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac06:	461f      	mov	r7, r3
 800ac08:	898b      	ldrh	r3, [r1, #12]
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	05db      	lsls	r3, r3, #23
 800ac0e:	460c      	mov	r4, r1
 800ac10:	4616      	mov	r6, r2
 800ac12:	d505      	bpl.n	800ac20 <__swrite+0x1e>
 800ac14:	2302      	movs	r3, #2
 800ac16:	2200      	movs	r2, #0
 800ac18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1c:	f000 f896 	bl	800ad4c <_lseek_r>
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	4632      	mov	r2, r6
 800ac24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	463b      	mov	r3, r7
 800ac2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac36:	f000 b8ad 	b.w	800ad94 <_write_r>

0800ac3a <__sseek>:
 800ac3a:	b510      	push	{r4, lr}
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac42:	f000 f883 	bl	800ad4c <_lseek_r>
 800ac46:	1c43      	adds	r3, r0, #1
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	bf15      	itete	ne
 800ac4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac56:	81a3      	strheq	r3, [r4, #12]
 800ac58:	bf18      	it	ne
 800ac5a:	81a3      	strhne	r3, [r4, #12]
 800ac5c:	bd10      	pop	{r4, pc}

0800ac5e <__sclose>:
 800ac5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac62:	f000 b80d 	b.w	800ac80 <_close_r>

0800ac66 <memset>:
 800ac66:	4603      	mov	r3, r0
 800ac68:	4402      	add	r2, r0
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d100      	bne.n	800ac70 <memset+0xa>
 800ac6e:	4770      	bx	lr
 800ac70:	f803 1b01 	strb.w	r1, [r3], #1
 800ac74:	e7f9      	b.n	800ac6a <memset+0x4>
	...

0800ac78 <_localeconv_r>:
 800ac78:	4800      	ldr	r0, [pc, #0]	; (800ac7c <_localeconv_r+0x4>)
 800ac7a:	4770      	bx	lr
 800ac7c:	20000160 	.word	0x20000160

0800ac80 <_close_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	2300      	movs	r3, #0
 800ac84:	4d05      	ldr	r5, [pc, #20]	; (800ac9c <_close_r+0x1c>)
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	602b      	str	r3, [r5, #0]
 800ac8c:	f7f8 fece 	bl	8003a2c <_close>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_close_r+0x1a>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_close_r+0x1a>
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	20003f8c 	.word	0x20003f8c

0800aca0 <_reclaim_reent>:
 800aca0:	4b29      	ldr	r3, [pc, #164]	; (800ad48 <_reclaim_reent+0xa8>)
 800aca2:	b570      	push	{r4, r5, r6, lr}
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4604      	mov	r4, r0
 800aca8:	4283      	cmp	r3, r0
 800acaa:	d04b      	beq.n	800ad44 <_reclaim_reent+0xa4>
 800acac:	69c3      	ldr	r3, [r0, #28]
 800acae:	b143      	cbz	r3, 800acc2 <_reclaim_reent+0x22>
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d144      	bne.n	800ad40 <_reclaim_reent+0xa0>
 800acb6:	69e3      	ldr	r3, [r4, #28]
 800acb8:	6819      	ldr	r1, [r3, #0]
 800acba:	b111      	cbz	r1, 800acc2 <_reclaim_reent+0x22>
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 ff37 	bl	800bb30 <_free_r>
 800acc2:	6961      	ldr	r1, [r4, #20]
 800acc4:	b111      	cbz	r1, 800accc <_reclaim_reent+0x2c>
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 ff32 	bl	800bb30 <_free_r>
 800accc:	69e1      	ldr	r1, [r4, #28]
 800acce:	b111      	cbz	r1, 800acd6 <_reclaim_reent+0x36>
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 ff2d 	bl	800bb30 <_free_r>
 800acd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800acd8:	b111      	cbz	r1, 800ace0 <_reclaim_reent+0x40>
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 ff28 	bl	800bb30 <_free_r>
 800ace0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ace2:	b111      	cbz	r1, 800acea <_reclaim_reent+0x4a>
 800ace4:	4620      	mov	r0, r4
 800ace6:	f000 ff23 	bl	800bb30 <_free_r>
 800acea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800acec:	b111      	cbz	r1, 800acf4 <_reclaim_reent+0x54>
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 ff1e 	bl	800bb30 <_free_r>
 800acf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800acf6:	b111      	cbz	r1, 800acfe <_reclaim_reent+0x5e>
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 ff19 	bl	800bb30 <_free_r>
 800acfe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ad00:	b111      	cbz	r1, 800ad08 <_reclaim_reent+0x68>
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 ff14 	bl	800bb30 <_free_r>
 800ad08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ad0a:	b111      	cbz	r1, 800ad12 <_reclaim_reent+0x72>
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 ff0f 	bl	800bb30 <_free_r>
 800ad12:	6a23      	ldr	r3, [r4, #32]
 800ad14:	b1b3      	cbz	r3, 800ad44 <_reclaim_reent+0xa4>
 800ad16:	4620      	mov	r0, r4
 800ad18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad1c:	4718      	bx	r3
 800ad1e:	5949      	ldr	r1, [r1, r5]
 800ad20:	b941      	cbnz	r1, 800ad34 <_reclaim_reent+0x94>
 800ad22:	3504      	adds	r5, #4
 800ad24:	69e3      	ldr	r3, [r4, #28]
 800ad26:	2d80      	cmp	r5, #128	; 0x80
 800ad28:	68d9      	ldr	r1, [r3, #12]
 800ad2a:	d1f8      	bne.n	800ad1e <_reclaim_reent+0x7e>
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f000 feff 	bl	800bb30 <_free_r>
 800ad32:	e7c0      	b.n	800acb6 <_reclaim_reent+0x16>
 800ad34:	680e      	ldr	r6, [r1, #0]
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 fefa 	bl	800bb30 <_free_r>
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	e7ef      	b.n	800ad20 <_reclaim_reent+0x80>
 800ad40:	2500      	movs	r5, #0
 800ad42:	e7ef      	b.n	800ad24 <_reclaim_reent+0x84>
 800ad44:	bd70      	pop	{r4, r5, r6, pc}
 800ad46:	bf00      	nop
 800ad48:	2000006c 	.word	0x2000006c

0800ad4c <_lseek_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4604      	mov	r4, r0
 800ad50:	4608      	mov	r0, r1
 800ad52:	4611      	mov	r1, r2
 800ad54:	2200      	movs	r2, #0
 800ad56:	4d05      	ldr	r5, [pc, #20]	; (800ad6c <_lseek_r+0x20>)
 800ad58:	602a      	str	r2, [r5, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	f7f8 fe8a 	bl	8003a74 <_lseek>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_lseek_r+0x1e>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_lseek_r+0x1e>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20003f8c 	.word	0x20003f8c

0800ad70 <_read_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	2200      	movs	r2, #0
 800ad7a:	4d05      	ldr	r5, [pc, #20]	; (800ad90 <_read_r+0x20>)
 800ad7c:	602a      	str	r2, [r5, #0]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f7f8 fe1b 	bl	80039ba <_read>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_read_r+0x1e>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_read_r+0x1e>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	20003f8c 	.word	0x20003f8c

0800ad94 <_write_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4d05      	ldr	r5, [pc, #20]	; (800adb4 <_write_r+0x20>)
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f7f8 fe26 	bl	80039f4 <_write>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <_write_r+0x1e>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	b103      	cbz	r3, 800adb2 <_write_r+0x1e>
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	20003f8c 	.word	0x20003f8c

0800adb8 <__errno>:
 800adb8:	4b01      	ldr	r3, [pc, #4]	; (800adc0 <__errno+0x8>)
 800adba:	6818      	ldr	r0, [r3, #0]
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	2000006c 	.word	0x2000006c

0800adc4 <__libc_init_array>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	2600      	movs	r6, #0
 800adc8:	4d0c      	ldr	r5, [pc, #48]	; (800adfc <__libc_init_array+0x38>)
 800adca:	4c0d      	ldr	r4, [pc, #52]	; (800ae00 <__libc_init_array+0x3c>)
 800adcc:	1b64      	subs	r4, r4, r5
 800adce:	10a4      	asrs	r4, r4, #2
 800add0:	42a6      	cmp	r6, r4
 800add2:	d109      	bne.n	800ade8 <__libc_init_array+0x24>
 800add4:	f004 fa4a 	bl	800f26c <_init>
 800add8:	2600      	movs	r6, #0
 800adda:	4d0a      	ldr	r5, [pc, #40]	; (800ae04 <__libc_init_array+0x40>)
 800addc:	4c0a      	ldr	r4, [pc, #40]	; (800ae08 <__libc_init_array+0x44>)
 800adde:	1b64      	subs	r4, r4, r5
 800ade0:	10a4      	asrs	r4, r4, #2
 800ade2:	42a6      	cmp	r6, r4
 800ade4:	d105      	bne.n	800adf2 <__libc_init_array+0x2e>
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adec:	4798      	blx	r3
 800adee:	3601      	adds	r6, #1
 800adf0:	e7ee      	b.n	800add0 <__libc_init_array+0xc>
 800adf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800adf6:	4798      	blx	r3
 800adf8:	3601      	adds	r6, #1
 800adfa:	e7f2      	b.n	800ade2 <__libc_init_array+0x1e>
 800adfc:	0800f8f0 	.word	0x0800f8f0
 800ae00:	0800f8f0 	.word	0x0800f8f0
 800ae04:	0800f8f0 	.word	0x0800f8f0
 800ae08:	0800f8f4 	.word	0x0800f8f4

0800ae0c <__retarget_lock_acquire_recursive>:
 800ae0c:	4770      	bx	lr

0800ae0e <__retarget_lock_release_recursive>:
 800ae0e:	4770      	bx	lr

0800ae10 <memchr>:
 800ae10:	4603      	mov	r3, r0
 800ae12:	b510      	push	{r4, lr}
 800ae14:	b2c9      	uxtb	r1, r1
 800ae16:	4402      	add	r2, r0
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	d101      	bne.n	800ae22 <memchr+0x12>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	e003      	b.n	800ae2a <memchr+0x1a>
 800ae22:	7804      	ldrb	r4, [r0, #0]
 800ae24:	3301      	adds	r3, #1
 800ae26:	428c      	cmp	r4, r1
 800ae28:	d1f6      	bne.n	800ae18 <memchr+0x8>
 800ae2a:	bd10      	pop	{r4, pc}

0800ae2c <memcpy>:
 800ae2c:	440a      	add	r2, r1
 800ae2e:	4291      	cmp	r1, r2
 800ae30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae34:	d100      	bne.n	800ae38 <memcpy+0xc>
 800ae36:	4770      	bx	lr
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae3e:	4291      	cmp	r1, r2
 800ae40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae44:	d1f9      	bne.n	800ae3a <memcpy+0xe>
 800ae46:	bd10      	pop	{r4, pc}

0800ae48 <nanf>:
 800ae48:	4800      	ldr	r0, [pc, #0]	; (800ae4c <nanf+0x4>)
 800ae4a:	4770      	bx	lr
 800ae4c:	7fc00000 	.word	0x7fc00000

0800ae50 <quorem>:
 800ae50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	6903      	ldr	r3, [r0, #16]
 800ae56:	690c      	ldr	r4, [r1, #16]
 800ae58:	4607      	mov	r7, r0
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	db7f      	blt.n	800af5e <quorem+0x10e>
 800ae5e:	3c01      	subs	r4, #1
 800ae60:	f100 0514 	add.w	r5, r0, #20
 800ae64:	f101 0814 	add.w	r8, r1, #20
 800ae68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae76:	3301      	adds	r3, #1
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae86:	d331      	bcc.n	800aeec <quorem+0x9c>
 800ae88:	f04f 0e00 	mov.w	lr, #0
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	46ac      	mov	ip, r5
 800ae90:	46f2      	mov	sl, lr
 800ae92:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae96:	b293      	uxth	r3, r2
 800ae98:	fb06 e303 	mla	r3, r6, r3, lr
 800ae9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aea0:	0c1a      	lsrs	r2, r3, #16
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	fb06 220e 	mla	r2, r6, lr, r2
 800aea8:	ebaa 0303 	sub.w	r3, sl, r3
 800aeac:	f8dc a000 	ldr.w	sl, [ip]
 800aeb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aeb4:	fa1f fa8a 	uxth.w	sl, sl
 800aeb8:	4453      	add	r3, sl
 800aeba:	f8dc a000 	ldr.w	sl, [ip]
 800aebe:	b292      	uxth	r2, r2
 800aec0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aece:	4581      	cmp	r9, r0
 800aed0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aed4:	f84c 3b04 	str.w	r3, [ip], #4
 800aed8:	d2db      	bcs.n	800ae92 <quorem+0x42>
 800aeda:	f855 300b 	ldr.w	r3, [r5, fp]
 800aede:	b92b      	cbnz	r3, 800aeec <quorem+0x9c>
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	3b04      	subs	r3, #4
 800aee4:	429d      	cmp	r5, r3
 800aee6:	461a      	mov	r2, r3
 800aee8:	d32d      	bcc.n	800af46 <quorem+0xf6>
 800aeea:	613c      	str	r4, [r7, #16]
 800aeec:	4638      	mov	r0, r7
 800aeee:	f001 f9df 	bl	800c2b0 <__mcmp>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	db23      	blt.n	800af3e <quorem+0xee>
 800aef6:	4629      	mov	r1, r5
 800aef8:	2000      	movs	r0, #0
 800aefa:	3601      	adds	r6, #1
 800aefc:	f858 2b04 	ldr.w	r2, [r8], #4
 800af00:	f8d1 c000 	ldr.w	ip, [r1]
 800af04:	b293      	uxth	r3, r2
 800af06:	1ac3      	subs	r3, r0, r3
 800af08:	0c12      	lsrs	r2, r2, #16
 800af0a:	fa1f f08c 	uxth.w	r0, ip
 800af0e:	4403      	add	r3, r0
 800af10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800af14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af18:	b29b      	uxth	r3, r3
 800af1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af1e:	45c1      	cmp	r9, r8
 800af20:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af24:	f841 3b04 	str.w	r3, [r1], #4
 800af28:	d2e8      	bcs.n	800aefc <quorem+0xac>
 800af2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af32:	b922      	cbnz	r2, 800af3e <quorem+0xee>
 800af34:	3b04      	subs	r3, #4
 800af36:	429d      	cmp	r5, r3
 800af38:	461a      	mov	r2, r3
 800af3a:	d30a      	bcc.n	800af52 <quorem+0x102>
 800af3c:	613c      	str	r4, [r7, #16]
 800af3e:	4630      	mov	r0, r6
 800af40:	b003      	add	sp, #12
 800af42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af46:	6812      	ldr	r2, [r2, #0]
 800af48:	3b04      	subs	r3, #4
 800af4a:	2a00      	cmp	r2, #0
 800af4c:	d1cd      	bne.n	800aeea <quorem+0x9a>
 800af4e:	3c01      	subs	r4, #1
 800af50:	e7c8      	b.n	800aee4 <quorem+0x94>
 800af52:	6812      	ldr	r2, [r2, #0]
 800af54:	3b04      	subs	r3, #4
 800af56:	2a00      	cmp	r2, #0
 800af58:	d1f0      	bne.n	800af3c <quorem+0xec>
 800af5a:	3c01      	subs	r4, #1
 800af5c:	e7eb      	b.n	800af36 <quorem+0xe6>
 800af5e:	2000      	movs	r0, #0
 800af60:	e7ee      	b.n	800af40 <quorem+0xf0>
 800af62:	0000      	movs	r0, r0
 800af64:	0000      	movs	r0, r0
	...

0800af68 <_dtoa_r>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	4616      	mov	r6, r2
 800af6e:	461f      	mov	r7, r3
 800af70:	69c4      	ldr	r4, [r0, #28]
 800af72:	b099      	sub	sp, #100	; 0x64
 800af74:	4605      	mov	r5, r0
 800af76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800af7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800af7e:	b974      	cbnz	r4, 800af9e <_dtoa_r+0x36>
 800af80:	2010      	movs	r0, #16
 800af82:	f000 fe1d 	bl	800bbc0 <malloc>
 800af86:	4602      	mov	r2, r0
 800af88:	61e8      	str	r0, [r5, #28]
 800af8a:	b920      	cbnz	r0, 800af96 <_dtoa_r+0x2e>
 800af8c:	21ef      	movs	r1, #239	; 0xef
 800af8e:	4bac      	ldr	r3, [pc, #688]	; (800b240 <_dtoa_r+0x2d8>)
 800af90:	48ac      	ldr	r0, [pc, #688]	; (800b244 <_dtoa_r+0x2dc>)
 800af92:	f002 fbc7 	bl	800d724 <__assert_func>
 800af96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af9a:	6004      	str	r4, [r0, #0]
 800af9c:	60c4      	str	r4, [r0, #12]
 800af9e:	69eb      	ldr	r3, [r5, #28]
 800afa0:	6819      	ldr	r1, [r3, #0]
 800afa2:	b151      	cbz	r1, 800afba <_dtoa_r+0x52>
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	2301      	movs	r3, #1
 800afa8:	4093      	lsls	r3, r2
 800afaa:	604a      	str	r2, [r1, #4]
 800afac:	608b      	str	r3, [r1, #8]
 800afae:	4628      	mov	r0, r5
 800afb0:	f000 fefa 	bl	800bda8 <_Bfree>
 800afb4:	2200      	movs	r2, #0
 800afb6:	69eb      	ldr	r3, [r5, #28]
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	1e3b      	subs	r3, r7, #0
 800afbc:	bfaf      	iteee	ge
 800afbe:	2300      	movge	r3, #0
 800afc0:	2201      	movlt	r2, #1
 800afc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800afc6:	9305      	strlt	r3, [sp, #20]
 800afc8:	bfa8      	it	ge
 800afca:	f8c8 3000 	strge.w	r3, [r8]
 800afce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800afd2:	4b9d      	ldr	r3, [pc, #628]	; (800b248 <_dtoa_r+0x2e0>)
 800afd4:	bfb8      	it	lt
 800afd6:	f8c8 2000 	strlt.w	r2, [r8]
 800afda:	ea33 0309 	bics.w	r3, r3, r9
 800afde:	d119      	bne.n	800b014 <_dtoa_r+0xac>
 800afe0:	f242 730f 	movw	r3, #9999	; 0x270f
 800afe4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afec:	4333      	orrs	r3, r6
 800afee:	f000 8589 	beq.w	800bb04 <_dtoa_r+0xb9c>
 800aff2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aff4:	b953      	cbnz	r3, 800b00c <_dtoa_r+0xa4>
 800aff6:	4b95      	ldr	r3, [pc, #596]	; (800b24c <_dtoa_r+0x2e4>)
 800aff8:	e023      	b.n	800b042 <_dtoa_r+0xda>
 800affa:	4b95      	ldr	r3, [pc, #596]	; (800b250 <_dtoa_r+0x2e8>)
 800affc:	9303      	str	r3, [sp, #12]
 800affe:	3308      	adds	r3, #8
 800b000:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	9803      	ldr	r0, [sp, #12]
 800b006:	b019      	add	sp, #100	; 0x64
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00c:	4b8f      	ldr	r3, [pc, #572]	; (800b24c <_dtoa_r+0x2e4>)
 800b00e:	9303      	str	r3, [sp, #12]
 800b010:	3303      	adds	r3, #3
 800b012:	e7f5      	b.n	800b000 <_dtoa_r+0x98>
 800b014:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b018:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b01c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b020:	2200      	movs	r2, #0
 800b022:	2300      	movs	r3, #0
 800b024:	f7f5 fcc0 	bl	80009a8 <__aeabi_dcmpeq>
 800b028:	4680      	mov	r8, r0
 800b02a:	b160      	cbz	r0, 800b046 <_dtoa_r+0xde>
 800b02c:	2301      	movs	r3, #1
 800b02e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b034:	2b00      	cmp	r3, #0
 800b036:	f000 8562 	beq.w	800bafe <_dtoa_r+0xb96>
 800b03a:	4b86      	ldr	r3, [pc, #536]	; (800b254 <_dtoa_r+0x2ec>)
 800b03c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	3b01      	subs	r3, #1
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	e7de      	b.n	800b004 <_dtoa_r+0x9c>
 800b046:	ab16      	add	r3, sp, #88	; 0x58
 800b048:	9301      	str	r3, [sp, #4]
 800b04a:	ab17      	add	r3, sp, #92	; 0x5c
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	4628      	mov	r0, r5
 800b050:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b054:	f001 fa3c 	bl	800c4d0 <__d2b>
 800b058:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b05c:	4682      	mov	sl, r0
 800b05e:	2c00      	cmp	r4, #0
 800b060:	d07e      	beq.n	800b160 <_dtoa_r+0x1f8>
 800b062:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b068:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b070:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b074:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b078:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b07c:	4619      	mov	r1, r3
 800b07e:	2200      	movs	r2, #0
 800b080:	4b75      	ldr	r3, [pc, #468]	; (800b258 <_dtoa_r+0x2f0>)
 800b082:	f7f5 f871 	bl	8000168 <__aeabi_dsub>
 800b086:	a368      	add	r3, pc, #416	; (adr r3, 800b228 <_dtoa_r+0x2c0>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	f7f5 fa24 	bl	80004d8 <__aeabi_dmul>
 800b090:	a367      	add	r3, pc, #412	; (adr r3, 800b230 <_dtoa_r+0x2c8>)
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	f7f5 f869 	bl	800016c <__adddf3>
 800b09a:	4606      	mov	r6, r0
 800b09c:	4620      	mov	r0, r4
 800b09e:	460f      	mov	r7, r1
 800b0a0:	f7f5 f9b0 	bl	8000404 <__aeabi_i2d>
 800b0a4:	a364      	add	r3, pc, #400	; (adr r3, 800b238 <_dtoa_r+0x2d0>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 fa15 	bl	80004d8 <__aeabi_dmul>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	4639      	mov	r1, r7
 800b0b6:	f7f5 f859 	bl	800016c <__adddf3>
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	460f      	mov	r7, r1
 800b0be:	f7f5 fcbb 	bl	8000a38 <__aeabi_d2iz>
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4683      	mov	fp, r0
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f7f5 fc76 	bl	80009bc <__aeabi_dcmplt>
 800b0d0:	b148      	cbz	r0, 800b0e6 <_dtoa_r+0x17e>
 800b0d2:	4658      	mov	r0, fp
 800b0d4:	f7f5 f996 	bl	8000404 <__aeabi_i2d>
 800b0d8:	4632      	mov	r2, r6
 800b0da:	463b      	mov	r3, r7
 800b0dc:	f7f5 fc64 	bl	80009a8 <__aeabi_dcmpeq>
 800b0e0:	b908      	cbnz	r0, 800b0e6 <_dtoa_r+0x17e>
 800b0e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0e6:	f1bb 0f16 	cmp.w	fp, #22
 800b0ea:	d857      	bhi.n	800b19c <_dtoa_r+0x234>
 800b0ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0f0:	4b5a      	ldr	r3, [pc, #360]	; (800b25c <_dtoa_r+0x2f4>)
 800b0f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	f7f5 fc5f 	bl	80009bc <__aeabi_dcmplt>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d04e      	beq.n	800b1a0 <_dtoa_r+0x238>
 800b102:	2300      	movs	r3, #0
 800b104:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b108:	930f      	str	r3, [sp, #60]	; 0x3c
 800b10a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b10c:	1b1b      	subs	r3, r3, r4
 800b10e:	1e5a      	subs	r2, r3, #1
 800b110:	bf46      	itte	mi
 800b112:	f1c3 0901 	rsbmi	r9, r3, #1
 800b116:	2300      	movmi	r3, #0
 800b118:	f04f 0900 	movpl.w	r9, #0
 800b11c:	9209      	str	r2, [sp, #36]	; 0x24
 800b11e:	bf48      	it	mi
 800b120:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b122:	f1bb 0f00 	cmp.w	fp, #0
 800b126:	db3d      	blt.n	800b1a4 <_dtoa_r+0x23c>
 800b128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b12e:	445b      	add	r3, fp
 800b130:	9309      	str	r3, [sp, #36]	; 0x24
 800b132:	2300      	movs	r3, #0
 800b134:	930a      	str	r3, [sp, #40]	; 0x28
 800b136:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b138:	2b09      	cmp	r3, #9
 800b13a:	d867      	bhi.n	800b20c <_dtoa_r+0x2a4>
 800b13c:	2b05      	cmp	r3, #5
 800b13e:	bfc4      	itt	gt
 800b140:	3b04      	subgt	r3, #4
 800b142:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b144:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b146:	bfc8      	it	gt
 800b148:	2400      	movgt	r4, #0
 800b14a:	f1a3 0302 	sub.w	r3, r3, #2
 800b14e:	bfd8      	it	le
 800b150:	2401      	movle	r4, #1
 800b152:	2b03      	cmp	r3, #3
 800b154:	f200 8086 	bhi.w	800b264 <_dtoa_r+0x2fc>
 800b158:	e8df f003 	tbb	[pc, r3]
 800b15c:	5637392c 	.word	0x5637392c
 800b160:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b164:	441c      	add	r4, r3
 800b166:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b16a:	2b20      	cmp	r3, #32
 800b16c:	bfc1      	itttt	gt
 800b16e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b172:	fa09 f903 	lslgt.w	r9, r9, r3
 800b176:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800b17a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b17e:	bfd6      	itet	le
 800b180:	f1c3 0320 	rsble	r3, r3, #32
 800b184:	ea49 0003 	orrgt.w	r0, r9, r3
 800b188:	fa06 f003 	lslle.w	r0, r6, r3
 800b18c:	f7f5 f92a 	bl	80003e4 <__aeabi_ui2d>
 800b190:	2201      	movs	r2, #1
 800b192:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b196:	3c01      	subs	r4, #1
 800b198:	9213      	str	r2, [sp, #76]	; 0x4c
 800b19a:	e76f      	b.n	800b07c <_dtoa_r+0x114>
 800b19c:	2301      	movs	r3, #1
 800b19e:	e7b3      	b.n	800b108 <_dtoa_r+0x1a0>
 800b1a0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b1a2:	e7b2      	b.n	800b10a <_dtoa_r+0x1a2>
 800b1a4:	f1cb 0300 	rsb	r3, fp, #0
 800b1a8:	930a      	str	r3, [sp, #40]	; 0x28
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	eba9 090b 	sub.w	r9, r9, fp
 800b1b0:	930e      	str	r3, [sp, #56]	; 0x38
 800b1b2:	e7c0      	b.n	800b136 <_dtoa_r+0x1ce>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	dc55      	bgt.n	800b26a <_dtoa_r+0x302>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	9306      	str	r3, [sp, #24]
 800b1c4:	9308      	str	r3, [sp, #32]
 800b1c6:	9223      	str	r2, [sp, #140]	; 0x8c
 800b1c8:	e00b      	b.n	800b1e2 <_dtoa_r+0x27a>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e7f3      	b.n	800b1b6 <_dtoa_r+0x24e>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1d4:	445b      	add	r3, fp
 800b1d6:	9306      	str	r3, [sp, #24]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	9308      	str	r3, [sp, #32]
 800b1de:	bfb8      	it	lt
 800b1e0:	2301      	movlt	r3, #1
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	2204      	movs	r2, #4
 800b1e6:	69e8      	ldr	r0, [r5, #28]
 800b1e8:	f102 0614 	add.w	r6, r2, #20
 800b1ec:	429e      	cmp	r6, r3
 800b1ee:	d940      	bls.n	800b272 <_dtoa_r+0x30a>
 800b1f0:	6041      	str	r1, [r0, #4]
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 fd98 	bl	800bd28 <_Balloc>
 800b1f8:	9003      	str	r0, [sp, #12]
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d13c      	bne.n	800b278 <_dtoa_r+0x310>
 800b1fe:	4602      	mov	r2, r0
 800b200:	f240 11af 	movw	r1, #431	; 0x1af
 800b204:	4b16      	ldr	r3, [pc, #88]	; (800b260 <_dtoa_r+0x2f8>)
 800b206:	e6c3      	b.n	800af90 <_dtoa_r+0x28>
 800b208:	2301      	movs	r3, #1
 800b20a:	e7e1      	b.n	800b1d0 <_dtoa_r+0x268>
 800b20c:	2401      	movs	r4, #1
 800b20e:	2300      	movs	r3, #0
 800b210:	940b      	str	r4, [sp, #44]	; 0x2c
 800b212:	9322      	str	r3, [sp, #136]	; 0x88
 800b214:	f04f 33ff 	mov.w	r3, #4294967295
 800b218:	2200      	movs	r2, #0
 800b21a:	9306      	str	r3, [sp, #24]
 800b21c:	9308      	str	r3, [sp, #32]
 800b21e:	2312      	movs	r3, #18
 800b220:	e7d1      	b.n	800b1c6 <_dtoa_r+0x25e>
 800b222:	bf00      	nop
 800b224:	f3af 8000 	nop.w
 800b228:	636f4361 	.word	0x636f4361
 800b22c:	3fd287a7 	.word	0x3fd287a7
 800b230:	8b60c8b3 	.word	0x8b60c8b3
 800b234:	3fc68a28 	.word	0x3fc68a28
 800b238:	509f79fb 	.word	0x509f79fb
 800b23c:	3fd34413 	.word	0x3fd34413
 800b240:	0800f5dd 	.word	0x0800f5dd
 800b244:	0800f5f4 	.word	0x0800f5f4
 800b248:	7ff00000 	.word	0x7ff00000
 800b24c:	0800f5d9 	.word	0x0800f5d9
 800b250:	0800f5d0 	.word	0x0800f5d0
 800b254:	0800f5a8 	.word	0x0800f5a8
 800b258:	3ff80000 	.word	0x3ff80000
 800b25c:	0800f6e0 	.word	0x0800f6e0
 800b260:	0800f64c 	.word	0x0800f64c
 800b264:	2301      	movs	r3, #1
 800b266:	930b      	str	r3, [sp, #44]	; 0x2c
 800b268:	e7d4      	b.n	800b214 <_dtoa_r+0x2ac>
 800b26a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b26c:	9306      	str	r3, [sp, #24]
 800b26e:	9308      	str	r3, [sp, #32]
 800b270:	e7b7      	b.n	800b1e2 <_dtoa_r+0x27a>
 800b272:	3101      	adds	r1, #1
 800b274:	0052      	lsls	r2, r2, #1
 800b276:	e7b7      	b.n	800b1e8 <_dtoa_r+0x280>
 800b278:	69eb      	ldr	r3, [r5, #28]
 800b27a:	9a03      	ldr	r2, [sp, #12]
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	9b08      	ldr	r3, [sp, #32]
 800b280:	2b0e      	cmp	r3, #14
 800b282:	f200 80a8 	bhi.w	800b3d6 <_dtoa_r+0x46e>
 800b286:	2c00      	cmp	r4, #0
 800b288:	f000 80a5 	beq.w	800b3d6 <_dtoa_r+0x46e>
 800b28c:	f1bb 0f00 	cmp.w	fp, #0
 800b290:	dd34      	ble.n	800b2fc <_dtoa_r+0x394>
 800b292:	4b9a      	ldr	r3, [pc, #616]	; (800b4fc <_dtoa_r+0x594>)
 800b294:	f00b 020f 	and.w	r2, fp, #15
 800b298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b29c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b2a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b2a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 800b2ac:	d016      	beq.n	800b2dc <_dtoa_r+0x374>
 800b2ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2b2:	4b93      	ldr	r3, [pc, #588]	; (800b500 <_dtoa_r+0x598>)
 800b2b4:	2703      	movs	r7, #3
 800b2b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2ba:	f7f5 fa37 	bl	800072c <__aeabi_ddiv>
 800b2be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2c2:	f004 040f 	and.w	r4, r4, #15
 800b2c6:	4e8e      	ldr	r6, [pc, #568]	; (800b500 <_dtoa_r+0x598>)
 800b2c8:	b954      	cbnz	r4, 800b2e0 <_dtoa_r+0x378>
 800b2ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b2ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2d2:	f7f5 fa2b 	bl	800072c <__aeabi_ddiv>
 800b2d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2da:	e029      	b.n	800b330 <_dtoa_r+0x3c8>
 800b2dc:	2702      	movs	r7, #2
 800b2de:	e7f2      	b.n	800b2c6 <_dtoa_r+0x35e>
 800b2e0:	07e1      	lsls	r1, r4, #31
 800b2e2:	d508      	bpl.n	800b2f6 <_dtoa_r+0x38e>
 800b2e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2ec:	f7f5 f8f4 	bl	80004d8 <__aeabi_dmul>
 800b2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2f4:	3701      	adds	r7, #1
 800b2f6:	1064      	asrs	r4, r4, #1
 800b2f8:	3608      	adds	r6, #8
 800b2fa:	e7e5      	b.n	800b2c8 <_dtoa_r+0x360>
 800b2fc:	f000 80a5 	beq.w	800b44a <_dtoa_r+0x4e2>
 800b300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b304:	f1cb 0400 	rsb	r4, fp, #0
 800b308:	4b7c      	ldr	r3, [pc, #496]	; (800b4fc <_dtoa_r+0x594>)
 800b30a:	f004 020f 	and.w	r2, r4, #15
 800b30e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	f7f5 f8df 	bl	80004d8 <__aeabi_dmul>
 800b31a:	2702      	movs	r7, #2
 800b31c:	2300      	movs	r3, #0
 800b31e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b322:	4e77      	ldr	r6, [pc, #476]	; (800b500 <_dtoa_r+0x598>)
 800b324:	1124      	asrs	r4, r4, #4
 800b326:	2c00      	cmp	r4, #0
 800b328:	f040 8084 	bne.w	800b434 <_dtoa_r+0x4cc>
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1d2      	bne.n	800b2d6 <_dtoa_r+0x36e>
 800b330:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b334:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f000 8087 	beq.w	800b44e <_dtoa_r+0x4e6>
 800b340:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b344:	2200      	movs	r2, #0
 800b346:	4b6f      	ldr	r3, [pc, #444]	; (800b504 <_dtoa_r+0x59c>)
 800b348:	f7f5 fb38 	bl	80009bc <__aeabi_dcmplt>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d07e      	beq.n	800b44e <_dtoa_r+0x4e6>
 800b350:	9b08      	ldr	r3, [sp, #32]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d07b      	beq.n	800b44e <_dtoa_r+0x4e6>
 800b356:	9b06      	ldr	r3, [sp, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	dd38      	ble.n	800b3ce <_dtoa_r+0x466>
 800b35c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b360:	2200      	movs	r2, #0
 800b362:	4b69      	ldr	r3, [pc, #420]	; (800b508 <_dtoa_r+0x5a0>)
 800b364:	f7f5 f8b8 	bl	80004d8 <__aeabi_dmul>
 800b368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b36c:	9c06      	ldr	r4, [sp, #24]
 800b36e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800b372:	3701      	adds	r7, #1
 800b374:	4638      	mov	r0, r7
 800b376:	f7f5 f845 	bl	8000404 <__aeabi_i2d>
 800b37a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b37e:	f7f5 f8ab 	bl	80004d8 <__aeabi_dmul>
 800b382:	2200      	movs	r2, #0
 800b384:	4b61      	ldr	r3, [pc, #388]	; (800b50c <_dtoa_r+0x5a4>)
 800b386:	f7f4 fef1 	bl	800016c <__adddf3>
 800b38a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b38e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b392:	9611      	str	r6, [sp, #68]	; 0x44
 800b394:	2c00      	cmp	r4, #0
 800b396:	d15d      	bne.n	800b454 <_dtoa_r+0x4ec>
 800b398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b39c:	2200      	movs	r2, #0
 800b39e:	4b5c      	ldr	r3, [pc, #368]	; (800b510 <_dtoa_r+0x5a8>)
 800b3a0:	f7f4 fee2 	bl	8000168 <__aeabi_dsub>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3ac:	4633      	mov	r3, r6
 800b3ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3b0:	f7f5 fb22 	bl	80009f8 <__aeabi_dcmpgt>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f040 8295 	bne.w	800b8e4 <_dtoa_r+0x97c>
 800b3ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b3c4:	f7f5 fafa 	bl	80009bc <__aeabi_dcmplt>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	f040 8289 	bne.w	800b8e0 <_dtoa_r+0x978>
 800b3ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b3d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b3d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f2c0 8151 	blt.w	800b680 <_dtoa_r+0x718>
 800b3de:	f1bb 0f0e 	cmp.w	fp, #14
 800b3e2:	f300 814d 	bgt.w	800b680 <_dtoa_r+0x718>
 800b3e6:	4b45      	ldr	r3, [pc, #276]	; (800b4fc <_dtoa_r+0x594>)
 800b3e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b3ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b3f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f280 80da 	bge.w	800b5b0 <_dtoa_r+0x648>
 800b3fc:	9b08      	ldr	r3, [sp, #32]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f300 80d6 	bgt.w	800b5b0 <_dtoa_r+0x648>
 800b404:	f040 826b 	bne.w	800b8de <_dtoa_r+0x976>
 800b408:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b40c:	2200      	movs	r2, #0
 800b40e:	4b40      	ldr	r3, [pc, #256]	; (800b510 <_dtoa_r+0x5a8>)
 800b410:	f7f5 f862 	bl	80004d8 <__aeabi_dmul>
 800b414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b418:	f7f5 fae4 	bl	80009e4 <__aeabi_dcmpge>
 800b41c:	9c08      	ldr	r4, [sp, #32]
 800b41e:	4626      	mov	r6, r4
 800b420:	2800      	cmp	r0, #0
 800b422:	f040 8241 	bne.w	800b8a8 <_dtoa_r+0x940>
 800b426:	2331      	movs	r3, #49	; 0x31
 800b428:	9f03      	ldr	r7, [sp, #12]
 800b42a:	f10b 0b01 	add.w	fp, fp, #1
 800b42e:	f807 3b01 	strb.w	r3, [r7], #1
 800b432:	e23d      	b.n	800b8b0 <_dtoa_r+0x948>
 800b434:	07e2      	lsls	r2, r4, #31
 800b436:	d505      	bpl.n	800b444 <_dtoa_r+0x4dc>
 800b438:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b43c:	f7f5 f84c 	bl	80004d8 <__aeabi_dmul>
 800b440:	2301      	movs	r3, #1
 800b442:	3701      	adds	r7, #1
 800b444:	1064      	asrs	r4, r4, #1
 800b446:	3608      	adds	r6, #8
 800b448:	e76d      	b.n	800b326 <_dtoa_r+0x3be>
 800b44a:	2702      	movs	r7, #2
 800b44c:	e770      	b.n	800b330 <_dtoa_r+0x3c8>
 800b44e:	46d8      	mov	r8, fp
 800b450:	9c08      	ldr	r4, [sp, #32]
 800b452:	e78f      	b.n	800b374 <_dtoa_r+0x40c>
 800b454:	9903      	ldr	r1, [sp, #12]
 800b456:	4b29      	ldr	r3, [pc, #164]	; (800b4fc <_dtoa_r+0x594>)
 800b458:	4421      	add	r1, r4
 800b45a:	9112      	str	r1, [sp, #72]	; 0x48
 800b45c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b45e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b462:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b466:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b46a:	2900      	cmp	r1, #0
 800b46c:	d054      	beq.n	800b518 <_dtoa_r+0x5b0>
 800b46e:	2000      	movs	r0, #0
 800b470:	4928      	ldr	r1, [pc, #160]	; (800b514 <_dtoa_r+0x5ac>)
 800b472:	f7f5 f95b 	bl	800072c <__aeabi_ddiv>
 800b476:	463b      	mov	r3, r7
 800b478:	4632      	mov	r2, r6
 800b47a:	f7f4 fe75 	bl	8000168 <__aeabi_dsub>
 800b47e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b482:	9f03      	ldr	r7, [sp, #12]
 800b484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b488:	f7f5 fad6 	bl	8000a38 <__aeabi_d2iz>
 800b48c:	4604      	mov	r4, r0
 800b48e:	f7f4 ffb9 	bl	8000404 <__aeabi_i2d>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b49a:	f7f4 fe65 	bl	8000168 <__aeabi_dsub>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	3430      	adds	r4, #48	; 0x30
 800b4a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4ac:	f807 4b01 	strb.w	r4, [r7], #1
 800b4b0:	f7f5 fa84 	bl	80009bc <__aeabi_dcmplt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d173      	bne.n	800b5a0 <_dtoa_r+0x638>
 800b4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4bc:	2000      	movs	r0, #0
 800b4be:	4911      	ldr	r1, [pc, #68]	; (800b504 <_dtoa_r+0x59c>)
 800b4c0:	f7f4 fe52 	bl	8000168 <__aeabi_dsub>
 800b4c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4c8:	f7f5 fa78 	bl	80009bc <__aeabi_dcmplt>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f040 80b6 	bne.w	800b63e <_dtoa_r+0x6d6>
 800b4d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4d4:	429f      	cmp	r7, r3
 800b4d6:	f43f af7a 	beq.w	800b3ce <_dtoa_r+0x466>
 800b4da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4de:	2200      	movs	r2, #0
 800b4e0:	4b09      	ldr	r3, [pc, #36]	; (800b508 <_dtoa_r+0x5a0>)
 800b4e2:	f7f4 fff9 	bl	80004d8 <__aeabi_dmul>
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4f0:	4b05      	ldr	r3, [pc, #20]	; (800b508 <_dtoa_r+0x5a0>)
 800b4f2:	f7f4 fff1 	bl	80004d8 <__aeabi_dmul>
 800b4f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4fa:	e7c3      	b.n	800b484 <_dtoa_r+0x51c>
 800b4fc:	0800f6e0 	.word	0x0800f6e0
 800b500:	0800f6b8 	.word	0x0800f6b8
 800b504:	3ff00000 	.word	0x3ff00000
 800b508:	40240000 	.word	0x40240000
 800b50c:	401c0000 	.word	0x401c0000
 800b510:	40140000 	.word	0x40140000
 800b514:	3fe00000 	.word	0x3fe00000
 800b518:	4630      	mov	r0, r6
 800b51a:	4639      	mov	r1, r7
 800b51c:	f7f4 ffdc 	bl	80004d8 <__aeabi_dmul>
 800b520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b522:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b526:	9c03      	ldr	r4, [sp, #12]
 800b528:	9314      	str	r3, [sp, #80]	; 0x50
 800b52a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b52e:	f7f5 fa83 	bl	8000a38 <__aeabi_d2iz>
 800b532:	9015      	str	r0, [sp, #84]	; 0x54
 800b534:	f7f4 ff66 	bl	8000404 <__aeabi_i2d>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b540:	f7f4 fe12 	bl	8000168 <__aeabi_dsub>
 800b544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b546:	4606      	mov	r6, r0
 800b548:	3330      	adds	r3, #48	; 0x30
 800b54a:	f804 3b01 	strb.w	r3, [r4], #1
 800b54e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b550:	460f      	mov	r7, r1
 800b552:	429c      	cmp	r4, r3
 800b554:	f04f 0200 	mov.w	r2, #0
 800b558:	d124      	bne.n	800b5a4 <_dtoa_r+0x63c>
 800b55a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b55e:	4baf      	ldr	r3, [pc, #700]	; (800b81c <_dtoa_r+0x8b4>)
 800b560:	f7f4 fe04 	bl	800016c <__adddf3>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	f7f5 fa44 	bl	80009f8 <__aeabi_dcmpgt>
 800b570:	2800      	cmp	r0, #0
 800b572:	d163      	bne.n	800b63c <_dtoa_r+0x6d4>
 800b574:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b578:	2000      	movs	r0, #0
 800b57a:	49a8      	ldr	r1, [pc, #672]	; (800b81c <_dtoa_r+0x8b4>)
 800b57c:	f7f4 fdf4 	bl	8000168 <__aeabi_dsub>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f7f5 fa18 	bl	80009bc <__aeabi_dcmplt>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	f43f af1e 	beq.w	800b3ce <_dtoa_r+0x466>
 800b592:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b594:	1e7b      	subs	r3, r7, #1
 800b596:	9314      	str	r3, [sp, #80]	; 0x50
 800b598:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b59c:	2b30      	cmp	r3, #48	; 0x30
 800b59e:	d0f8      	beq.n	800b592 <_dtoa_r+0x62a>
 800b5a0:	46c3      	mov	fp, r8
 800b5a2:	e03b      	b.n	800b61c <_dtoa_r+0x6b4>
 800b5a4:	4b9e      	ldr	r3, [pc, #632]	; (800b820 <_dtoa_r+0x8b8>)
 800b5a6:	f7f4 ff97 	bl	80004d8 <__aeabi_dmul>
 800b5aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5ae:	e7bc      	b.n	800b52a <_dtoa_r+0x5c2>
 800b5b0:	9f03      	ldr	r7, [sp, #12]
 800b5b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b5b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	4649      	mov	r1, r9
 800b5be:	f7f5 f8b5 	bl	800072c <__aeabi_ddiv>
 800b5c2:	f7f5 fa39 	bl	8000a38 <__aeabi_d2iz>
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	f7f4 ff1c 	bl	8000404 <__aeabi_i2d>
 800b5cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5d0:	f7f4 ff82 	bl	80004d8 <__aeabi_dmul>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4640      	mov	r0, r8
 800b5da:	4649      	mov	r1, r9
 800b5dc:	f7f4 fdc4 	bl	8000168 <__aeabi_dsub>
 800b5e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b5e4:	f807 6b01 	strb.w	r6, [r7], #1
 800b5e8:	9e03      	ldr	r6, [sp, #12]
 800b5ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b5ee:	1bbe      	subs	r6, r7, r6
 800b5f0:	45b4      	cmp	ip, r6
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	d136      	bne.n	800b666 <_dtoa_r+0x6fe>
 800b5f8:	f7f4 fdb8 	bl	800016c <__adddf3>
 800b5fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b600:	4680      	mov	r8, r0
 800b602:	4689      	mov	r9, r1
 800b604:	f7f5 f9f8 	bl	80009f8 <__aeabi_dcmpgt>
 800b608:	bb58      	cbnz	r0, 800b662 <_dtoa_r+0x6fa>
 800b60a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b60e:	4640      	mov	r0, r8
 800b610:	4649      	mov	r1, r9
 800b612:	f7f5 f9c9 	bl	80009a8 <__aeabi_dcmpeq>
 800b616:	b108      	cbz	r0, 800b61c <_dtoa_r+0x6b4>
 800b618:	07e3      	lsls	r3, r4, #31
 800b61a:	d422      	bmi.n	800b662 <_dtoa_r+0x6fa>
 800b61c:	4651      	mov	r1, sl
 800b61e:	4628      	mov	r0, r5
 800b620:	f000 fbc2 	bl	800bda8 <_Bfree>
 800b624:	2300      	movs	r3, #0
 800b626:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b628:	703b      	strb	r3, [r7, #0]
 800b62a:	f10b 0301 	add.w	r3, fp, #1
 800b62e:	6013      	str	r3, [r2, #0]
 800b630:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b632:	2b00      	cmp	r3, #0
 800b634:	f43f ace6 	beq.w	800b004 <_dtoa_r+0x9c>
 800b638:	601f      	str	r7, [r3, #0]
 800b63a:	e4e3      	b.n	800b004 <_dtoa_r+0x9c>
 800b63c:	4627      	mov	r7, r4
 800b63e:	463b      	mov	r3, r7
 800b640:	461f      	mov	r7, r3
 800b642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b646:	2a39      	cmp	r2, #57	; 0x39
 800b648:	d107      	bne.n	800b65a <_dtoa_r+0x6f2>
 800b64a:	9a03      	ldr	r2, [sp, #12]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d1f7      	bne.n	800b640 <_dtoa_r+0x6d8>
 800b650:	2230      	movs	r2, #48	; 0x30
 800b652:	9903      	ldr	r1, [sp, #12]
 800b654:	f108 0801 	add.w	r8, r8, #1
 800b658:	700a      	strb	r2, [r1, #0]
 800b65a:	781a      	ldrb	r2, [r3, #0]
 800b65c:	3201      	adds	r2, #1
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	e79e      	b.n	800b5a0 <_dtoa_r+0x638>
 800b662:	46d8      	mov	r8, fp
 800b664:	e7eb      	b.n	800b63e <_dtoa_r+0x6d6>
 800b666:	2200      	movs	r2, #0
 800b668:	4b6d      	ldr	r3, [pc, #436]	; (800b820 <_dtoa_r+0x8b8>)
 800b66a:	f7f4 ff35 	bl	80004d8 <__aeabi_dmul>
 800b66e:	2200      	movs	r2, #0
 800b670:	2300      	movs	r3, #0
 800b672:	4680      	mov	r8, r0
 800b674:	4689      	mov	r9, r1
 800b676:	f7f5 f997 	bl	80009a8 <__aeabi_dcmpeq>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d09b      	beq.n	800b5b6 <_dtoa_r+0x64e>
 800b67e:	e7cd      	b.n	800b61c <_dtoa_r+0x6b4>
 800b680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b682:	2a00      	cmp	r2, #0
 800b684:	f000 80c4 	beq.w	800b810 <_dtoa_r+0x8a8>
 800b688:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b68a:	2a01      	cmp	r2, #1
 800b68c:	f300 80a8 	bgt.w	800b7e0 <_dtoa_r+0x878>
 800b690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b692:	2a00      	cmp	r2, #0
 800b694:	f000 80a0 	beq.w	800b7d8 <_dtoa_r+0x870>
 800b698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b69c:	464f      	mov	r7, r9
 800b69e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b6a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6a2:	2101      	movs	r1, #1
 800b6a4:	441a      	add	r2, r3
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	4499      	add	r9, r3
 800b6aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ac:	f000 fc7c 	bl	800bfa8 <__i2b>
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	b15f      	cbz	r7, 800b6cc <_dtoa_r+0x764>
 800b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	dd08      	ble.n	800b6cc <_dtoa_r+0x764>
 800b6ba:	42bb      	cmp	r3, r7
 800b6bc:	bfa8      	it	ge
 800b6be:	463b      	movge	r3, r7
 800b6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c2:	eba9 0903 	sub.w	r9, r9, r3
 800b6c6:	1aff      	subs	r7, r7, r3
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ce:	b1f3      	cbz	r3, 800b70e <_dtoa_r+0x7a6>
 800b6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 80a0 	beq.w	800b818 <_dtoa_r+0x8b0>
 800b6d8:	2c00      	cmp	r4, #0
 800b6da:	dd10      	ble.n	800b6fe <_dtoa_r+0x796>
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4622      	mov	r2, r4
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f000 fd1f 	bl	800c124 <__pow5mult>
 800b6e6:	4652      	mov	r2, sl
 800b6e8:	4601      	mov	r1, r0
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f000 fc71 	bl	800bfd4 <__multiply>
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	4651      	mov	r1, sl
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f000 fb56 	bl	800bda8 <_Bfree>
 800b6fc:	46c2      	mov	sl, r8
 800b6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b700:	1b1a      	subs	r2, r3, r4
 800b702:	d004      	beq.n	800b70e <_dtoa_r+0x7a6>
 800b704:	4651      	mov	r1, sl
 800b706:	4628      	mov	r0, r5
 800b708:	f000 fd0c 	bl	800c124 <__pow5mult>
 800b70c:	4682      	mov	sl, r0
 800b70e:	2101      	movs	r1, #1
 800b710:	4628      	mov	r0, r5
 800b712:	f000 fc49 	bl	800bfa8 <__i2b>
 800b716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b718:	4604      	mov	r4, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f340 8082 	ble.w	800b824 <_dtoa_r+0x8bc>
 800b720:	461a      	mov	r2, r3
 800b722:	4601      	mov	r1, r0
 800b724:	4628      	mov	r0, r5
 800b726:	f000 fcfd 	bl	800c124 <__pow5mult>
 800b72a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b72c:	4604      	mov	r4, r0
 800b72e:	2b01      	cmp	r3, #1
 800b730:	dd7b      	ble.n	800b82a <_dtoa_r+0x8c2>
 800b732:	f04f 0800 	mov.w	r8, #0
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b73c:	6918      	ldr	r0, [r3, #16]
 800b73e:	f000 fbe5 	bl	800bf0c <__hi0bits>
 800b742:	f1c0 0020 	rsb	r0, r0, #32
 800b746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b748:	4418      	add	r0, r3
 800b74a:	f010 001f 	ands.w	r0, r0, #31
 800b74e:	f000 8092 	beq.w	800b876 <_dtoa_r+0x90e>
 800b752:	f1c0 0320 	rsb	r3, r0, #32
 800b756:	2b04      	cmp	r3, #4
 800b758:	f340 8085 	ble.w	800b866 <_dtoa_r+0x8fe>
 800b75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b75e:	f1c0 001c 	rsb	r0, r0, #28
 800b762:	4403      	add	r3, r0
 800b764:	4481      	add	r9, r0
 800b766:	4407      	add	r7, r0
 800b768:	9309      	str	r3, [sp, #36]	; 0x24
 800b76a:	f1b9 0f00 	cmp.w	r9, #0
 800b76e:	dd05      	ble.n	800b77c <_dtoa_r+0x814>
 800b770:	4651      	mov	r1, sl
 800b772:	464a      	mov	r2, r9
 800b774:	4628      	mov	r0, r5
 800b776:	f000 fd2f 	bl	800c1d8 <__lshift>
 800b77a:	4682      	mov	sl, r0
 800b77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b77e:	2b00      	cmp	r3, #0
 800b780:	dd05      	ble.n	800b78e <_dtoa_r+0x826>
 800b782:	4621      	mov	r1, r4
 800b784:	461a      	mov	r2, r3
 800b786:	4628      	mov	r0, r5
 800b788:	f000 fd26 	bl	800c1d8 <__lshift>
 800b78c:	4604      	mov	r4, r0
 800b78e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b790:	2b00      	cmp	r3, #0
 800b792:	d072      	beq.n	800b87a <_dtoa_r+0x912>
 800b794:	4621      	mov	r1, r4
 800b796:	4650      	mov	r0, sl
 800b798:	f000 fd8a 	bl	800c2b0 <__mcmp>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	da6c      	bge.n	800b87a <_dtoa_r+0x912>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4651      	mov	r1, sl
 800b7a4:	220a      	movs	r2, #10
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f000 fb20 	bl	800bdec <__multadd>
 800b7ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7ae:	4682      	mov	sl, r0
 800b7b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 81ac 	beq.w	800bb12 <_dtoa_r+0xbaa>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4631      	mov	r1, r6
 800b7be:	220a      	movs	r2, #10
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f000 fb13 	bl	800bdec <__multadd>
 800b7c6:	9b06      	ldr	r3, [sp, #24]
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f300 8093 	bgt.w	800b8f6 <_dtoa_r+0x98e>
 800b7d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	dc59      	bgt.n	800b88a <_dtoa_r+0x922>
 800b7d6:	e08e      	b.n	800b8f6 <_dtoa_r+0x98e>
 800b7d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b7da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7de:	e75d      	b.n	800b69c <_dtoa_r+0x734>
 800b7e0:	9b08      	ldr	r3, [sp, #32]
 800b7e2:	1e5c      	subs	r4, r3, #1
 800b7e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e6:	42a3      	cmp	r3, r4
 800b7e8:	bfbf      	itttt	lt
 800b7ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b7ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b7ee:	1ae3      	sublt	r3, r4, r3
 800b7f0:	18d2      	addlt	r2, r2, r3
 800b7f2:	bfa8      	it	ge
 800b7f4:	1b1c      	subge	r4, r3, r4
 800b7f6:	9b08      	ldr	r3, [sp, #32]
 800b7f8:	bfbe      	ittt	lt
 800b7fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b7fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b7fe:	2400      	movlt	r4, #0
 800b800:	2b00      	cmp	r3, #0
 800b802:	bfb5      	itete	lt
 800b804:	eba9 0703 	sublt.w	r7, r9, r3
 800b808:	464f      	movge	r7, r9
 800b80a:	2300      	movlt	r3, #0
 800b80c:	9b08      	ldrge	r3, [sp, #32]
 800b80e:	e747      	b.n	800b6a0 <_dtoa_r+0x738>
 800b810:	464f      	mov	r7, r9
 800b812:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b814:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b816:	e74c      	b.n	800b6b2 <_dtoa_r+0x74a>
 800b818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b81a:	e773      	b.n	800b704 <_dtoa_r+0x79c>
 800b81c:	3fe00000 	.word	0x3fe00000
 800b820:	40240000 	.word	0x40240000
 800b824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b826:	2b01      	cmp	r3, #1
 800b828:	dc18      	bgt.n	800b85c <_dtoa_r+0x8f4>
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	b9b3      	cbnz	r3, 800b85c <_dtoa_r+0x8f4>
 800b82e:	9b05      	ldr	r3, [sp, #20]
 800b830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b834:	b993      	cbnz	r3, 800b85c <_dtoa_r+0x8f4>
 800b836:	9b05      	ldr	r3, [sp, #20]
 800b838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b83c:	0d1b      	lsrs	r3, r3, #20
 800b83e:	051b      	lsls	r3, r3, #20
 800b840:	b17b      	cbz	r3, 800b862 <_dtoa_r+0x8fa>
 800b842:	f04f 0801 	mov.w	r8, #1
 800b846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b848:	f109 0901 	add.w	r9, r9, #1
 800b84c:	3301      	adds	r3, #1
 800b84e:	9309      	str	r3, [sp, #36]	; 0x24
 800b850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b852:	2b00      	cmp	r3, #0
 800b854:	f47f af6f 	bne.w	800b736 <_dtoa_r+0x7ce>
 800b858:	2001      	movs	r0, #1
 800b85a:	e774      	b.n	800b746 <_dtoa_r+0x7de>
 800b85c:	f04f 0800 	mov.w	r8, #0
 800b860:	e7f6      	b.n	800b850 <_dtoa_r+0x8e8>
 800b862:	4698      	mov	r8, r3
 800b864:	e7f4      	b.n	800b850 <_dtoa_r+0x8e8>
 800b866:	d080      	beq.n	800b76a <_dtoa_r+0x802>
 800b868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b86a:	331c      	adds	r3, #28
 800b86c:	441a      	add	r2, r3
 800b86e:	4499      	add	r9, r3
 800b870:	441f      	add	r7, r3
 800b872:	9209      	str	r2, [sp, #36]	; 0x24
 800b874:	e779      	b.n	800b76a <_dtoa_r+0x802>
 800b876:	4603      	mov	r3, r0
 800b878:	e7f6      	b.n	800b868 <_dtoa_r+0x900>
 800b87a:	9b08      	ldr	r3, [sp, #32]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dc34      	bgt.n	800b8ea <_dtoa_r+0x982>
 800b880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b882:	2b02      	cmp	r3, #2
 800b884:	dd31      	ble.n	800b8ea <_dtoa_r+0x982>
 800b886:	9b08      	ldr	r3, [sp, #32]
 800b888:	9306      	str	r3, [sp, #24]
 800b88a:	9b06      	ldr	r3, [sp, #24]
 800b88c:	b963      	cbnz	r3, 800b8a8 <_dtoa_r+0x940>
 800b88e:	4621      	mov	r1, r4
 800b890:	2205      	movs	r2, #5
 800b892:	4628      	mov	r0, r5
 800b894:	f000 faaa 	bl	800bdec <__multadd>
 800b898:	4601      	mov	r1, r0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4650      	mov	r0, sl
 800b89e:	f000 fd07 	bl	800c2b0 <__mcmp>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f73f adbf 	bgt.w	800b426 <_dtoa_r+0x4be>
 800b8a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8aa:	9f03      	ldr	r7, [sp, #12]
 800b8ac:	ea6f 0b03 	mvn.w	fp, r3
 800b8b0:	f04f 0800 	mov.w	r8, #0
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f000 fa76 	bl	800bda8 <_Bfree>
 800b8bc:	2e00      	cmp	r6, #0
 800b8be:	f43f aead 	beq.w	800b61c <_dtoa_r+0x6b4>
 800b8c2:	f1b8 0f00 	cmp.w	r8, #0
 800b8c6:	d005      	beq.n	800b8d4 <_dtoa_r+0x96c>
 800b8c8:	45b0      	cmp	r8, r6
 800b8ca:	d003      	beq.n	800b8d4 <_dtoa_r+0x96c>
 800b8cc:	4641      	mov	r1, r8
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f000 fa6a 	bl	800bda8 <_Bfree>
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f000 fa66 	bl	800bda8 <_Bfree>
 800b8dc:	e69e      	b.n	800b61c <_dtoa_r+0x6b4>
 800b8de:	2400      	movs	r4, #0
 800b8e0:	4626      	mov	r6, r4
 800b8e2:	e7e1      	b.n	800b8a8 <_dtoa_r+0x940>
 800b8e4:	46c3      	mov	fp, r8
 800b8e6:	4626      	mov	r6, r4
 800b8e8:	e59d      	b.n	800b426 <_dtoa_r+0x4be>
 800b8ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f000 80c8 	beq.w	800ba82 <_dtoa_r+0xb1a>
 800b8f2:	9b08      	ldr	r3, [sp, #32]
 800b8f4:	9306      	str	r3, [sp, #24]
 800b8f6:	2f00      	cmp	r7, #0
 800b8f8:	dd05      	ble.n	800b906 <_dtoa_r+0x99e>
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	463a      	mov	r2, r7
 800b8fe:	4628      	mov	r0, r5
 800b900:	f000 fc6a 	bl	800c1d8 <__lshift>
 800b904:	4606      	mov	r6, r0
 800b906:	f1b8 0f00 	cmp.w	r8, #0
 800b90a:	d05b      	beq.n	800b9c4 <_dtoa_r+0xa5c>
 800b90c:	4628      	mov	r0, r5
 800b90e:	6871      	ldr	r1, [r6, #4]
 800b910:	f000 fa0a 	bl	800bd28 <_Balloc>
 800b914:	4607      	mov	r7, r0
 800b916:	b928      	cbnz	r0, 800b924 <_dtoa_r+0x9bc>
 800b918:	4602      	mov	r2, r0
 800b91a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b91e:	4b81      	ldr	r3, [pc, #516]	; (800bb24 <_dtoa_r+0xbbc>)
 800b920:	f7ff bb36 	b.w	800af90 <_dtoa_r+0x28>
 800b924:	6932      	ldr	r2, [r6, #16]
 800b926:	f106 010c 	add.w	r1, r6, #12
 800b92a:	3202      	adds	r2, #2
 800b92c:	0092      	lsls	r2, r2, #2
 800b92e:	300c      	adds	r0, #12
 800b930:	f7ff fa7c 	bl	800ae2c <memcpy>
 800b934:	2201      	movs	r2, #1
 800b936:	4639      	mov	r1, r7
 800b938:	4628      	mov	r0, r5
 800b93a:	f000 fc4d 	bl	800c1d8 <__lshift>
 800b93e:	46b0      	mov	r8, r6
 800b940:	4606      	mov	r6, r0
 800b942:	9b03      	ldr	r3, [sp, #12]
 800b944:	9a03      	ldr	r2, [sp, #12]
 800b946:	3301      	adds	r3, #1
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	9b06      	ldr	r3, [sp, #24]
 800b94c:	4413      	add	r3, r2
 800b94e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b950:	9b04      	ldr	r3, [sp, #16]
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	930a      	str	r3, [sp, #40]	; 0x28
 800b958:	9b08      	ldr	r3, [sp, #32]
 800b95a:	4621      	mov	r1, r4
 800b95c:	3b01      	subs	r3, #1
 800b95e:	4650      	mov	r0, sl
 800b960:	9304      	str	r3, [sp, #16]
 800b962:	f7ff fa75 	bl	800ae50 <quorem>
 800b966:	4641      	mov	r1, r8
 800b968:	9006      	str	r0, [sp, #24]
 800b96a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b96e:	4650      	mov	r0, sl
 800b970:	f000 fc9e 	bl	800c2b0 <__mcmp>
 800b974:	4632      	mov	r2, r6
 800b976:	9009      	str	r0, [sp, #36]	; 0x24
 800b978:	4621      	mov	r1, r4
 800b97a:	4628      	mov	r0, r5
 800b97c:	f000 fcb4 	bl	800c2e8 <__mdiff>
 800b980:	68c2      	ldr	r2, [r0, #12]
 800b982:	4607      	mov	r7, r0
 800b984:	bb02      	cbnz	r2, 800b9c8 <_dtoa_r+0xa60>
 800b986:	4601      	mov	r1, r0
 800b988:	4650      	mov	r0, sl
 800b98a:	f000 fc91 	bl	800c2b0 <__mcmp>
 800b98e:	4602      	mov	r2, r0
 800b990:	4639      	mov	r1, r7
 800b992:	4628      	mov	r0, r5
 800b994:	920c      	str	r2, [sp, #48]	; 0x30
 800b996:	f000 fa07 	bl	800bda8 <_Bfree>
 800b99a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b99e:	9f08      	ldr	r7, [sp, #32]
 800b9a0:	ea43 0102 	orr.w	r1, r3, r2
 800b9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a6:	4319      	orrs	r1, r3
 800b9a8:	d110      	bne.n	800b9cc <_dtoa_r+0xa64>
 800b9aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b9ae:	d029      	beq.n	800ba04 <_dtoa_r+0xa9c>
 800b9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	dd02      	ble.n	800b9bc <_dtoa_r+0xa54>
 800b9b6:	9b06      	ldr	r3, [sp, #24]
 800b9b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b9bc:	9b04      	ldr	r3, [sp, #16]
 800b9be:	f883 9000 	strb.w	r9, [r3]
 800b9c2:	e777      	b.n	800b8b4 <_dtoa_r+0x94c>
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	e7ba      	b.n	800b93e <_dtoa_r+0x9d6>
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	e7e1      	b.n	800b990 <_dtoa_r+0xa28>
 800b9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	db04      	blt.n	800b9dc <_dtoa_r+0xa74>
 800b9d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b9d4:	430b      	orrs	r3, r1
 800b9d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9d8:	430b      	orrs	r3, r1
 800b9da:	d120      	bne.n	800ba1e <_dtoa_r+0xab6>
 800b9dc:	2a00      	cmp	r2, #0
 800b9de:	dded      	ble.n	800b9bc <_dtoa_r+0xa54>
 800b9e0:	4651      	mov	r1, sl
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f000 fbf7 	bl	800c1d8 <__lshift>
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	f000 fc5f 	bl	800c2b0 <__mcmp>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	dc03      	bgt.n	800b9fe <_dtoa_r+0xa96>
 800b9f6:	d1e1      	bne.n	800b9bc <_dtoa_r+0xa54>
 800b9f8:	f019 0f01 	tst.w	r9, #1
 800b9fc:	d0de      	beq.n	800b9bc <_dtoa_r+0xa54>
 800b9fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba02:	d1d8      	bne.n	800b9b6 <_dtoa_r+0xa4e>
 800ba04:	2339      	movs	r3, #57	; 0x39
 800ba06:	9a04      	ldr	r2, [sp, #16]
 800ba08:	7013      	strb	r3, [r2, #0]
 800ba0a:	463b      	mov	r3, r7
 800ba0c:	461f      	mov	r7, r3
 800ba0e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	2a39      	cmp	r2, #57	; 0x39
 800ba16:	d06b      	beq.n	800baf0 <_dtoa_r+0xb88>
 800ba18:	3201      	adds	r2, #1
 800ba1a:	701a      	strb	r2, [r3, #0]
 800ba1c:	e74a      	b.n	800b8b4 <_dtoa_r+0x94c>
 800ba1e:	2a00      	cmp	r2, #0
 800ba20:	dd07      	ble.n	800ba32 <_dtoa_r+0xaca>
 800ba22:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba26:	d0ed      	beq.n	800ba04 <_dtoa_r+0xa9c>
 800ba28:	9a04      	ldr	r2, [sp, #16]
 800ba2a:	f109 0301 	add.w	r3, r9, #1
 800ba2e:	7013      	strb	r3, [r2, #0]
 800ba30:	e740      	b.n	800b8b4 <_dtoa_r+0x94c>
 800ba32:	9b08      	ldr	r3, [sp, #32]
 800ba34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba36:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d042      	beq.n	800bac4 <_dtoa_r+0xb5c>
 800ba3e:	4651      	mov	r1, sl
 800ba40:	2300      	movs	r3, #0
 800ba42:	220a      	movs	r2, #10
 800ba44:	4628      	mov	r0, r5
 800ba46:	f000 f9d1 	bl	800bdec <__multadd>
 800ba4a:	45b0      	cmp	r8, r6
 800ba4c:	4682      	mov	sl, r0
 800ba4e:	f04f 0300 	mov.w	r3, #0
 800ba52:	f04f 020a 	mov.w	r2, #10
 800ba56:	4641      	mov	r1, r8
 800ba58:	4628      	mov	r0, r5
 800ba5a:	d107      	bne.n	800ba6c <_dtoa_r+0xb04>
 800ba5c:	f000 f9c6 	bl	800bdec <__multadd>
 800ba60:	4680      	mov	r8, r0
 800ba62:	4606      	mov	r6, r0
 800ba64:	9b08      	ldr	r3, [sp, #32]
 800ba66:	3301      	adds	r3, #1
 800ba68:	9308      	str	r3, [sp, #32]
 800ba6a:	e775      	b.n	800b958 <_dtoa_r+0x9f0>
 800ba6c:	f000 f9be 	bl	800bdec <__multadd>
 800ba70:	4631      	mov	r1, r6
 800ba72:	4680      	mov	r8, r0
 800ba74:	2300      	movs	r3, #0
 800ba76:	220a      	movs	r2, #10
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f000 f9b7 	bl	800bdec <__multadd>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	e7f0      	b.n	800ba64 <_dtoa_r+0xafc>
 800ba82:	9b08      	ldr	r3, [sp, #32]
 800ba84:	9306      	str	r3, [sp, #24]
 800ba86:	9f03      	ldr	r7, [sp, #12]
 800ba88:	4621      	mov	r1, r4
 800ba8a:	4650      	mov	r0, sl
 800ba8c:	f7ff f9e0 	bl	800ae50 <quorem>
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ba96:	f807 9b01 	strb.w	r9, [r7], #1
 800ba9a:	1afa      	subs	r2, r7, r3
 800ba9c:	9b06      	ldr	r3, [sp, #24]
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	dd07      	ble.n	800bab2 <_dtoa_r+0xb4a>
 800baa2:	4651      	mov	r1, sl
 800baa4:	2300      	movs	r3, #0
 800baa6:	220a      	movs	r2, #10
 800baa8:	4628      	mov	r0, r5
 800baaa:	f000 f99f 	bl	800bdec <__multadd>
 800baae:	4682      	mov	sl, r0
 800bab0:	e7ea      	b.n	800ba88 <_dtoa_r+0xb20>
 800bab2:	9b06      	ldr	r3, [sp, #24]
 800bab4:	f04f 0800 	mov.w	r8, #0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bfcc      	ite	gt
 800babc:	461f      	movgt	r7, r3
 800babe:	2701      	movle	r7, #1
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	441f      	add	r7, r3
 800bac4:	4651      	mov	r1, sl
 800bac6:	2201      	movs	r2, #1
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 fb85 	bl	800c1d8 <__lshift>
 800bace:	4621      	mov	r1, r4
 800bad0:	4682      	mov	sl, r0
 800bad2:	f000 fbed 	bl	800c2b0 <__mcmp>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	dc97      	bgt.n	800ba0a <_dtoa_r+0xaa2>
 800bada:	d102      	bne.n	800bae2 <_dtoa_r+0xb7a>
 800badc:	f019 0f01 	tst.w	r9, #1
 800bae0:	d193      	bne.n	800ba0a <_dtoa_r+0xaa2>
 800bae2:	463b      	mov	r3, r7
 800bae4:	461f      	mov	r7, r3
 800bae6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baea:	2a30      	cmp	r2, #48	; 0x30
 800baec:	d0fa      	beq.n	800bae4 <_dtoa_r+0xb7c>
 800baee:	e6e1      	b.n	800b8b4 <_dtoa_r+0x94c>
 800baf0:	9a03      	ldr	r2, [sp, #12]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d18a      	bne.n	800ba0c <_dtoa_r+0xaa4>
 800baf6:	2331      	movs	r3, #49	; 0x31
 800baf8:	f10b 0b01 	add.w	fp, fp, #1
 800bafc:	e797      	b.n	800ba2e <_dtoa_r+0xac6>
 800bafe:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <_dtoa_r+0xbc0>)
 800bb00:	f7ff ba9f 	b.w	800b042 <_dtoa_r+0xda>
 800bb04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f47f aa77 	bne.w	800affa <_dtoa_r+0x92>
 800bb0c:	4b07      	ldr	r3, [pc, #28]	; (800bb2c <_dtoa_r+0xbc4>)
 800bb0e:	f7ff ba98 	b.w	800b042 <_dtoa_r+0xda>
 800bb12:	9b06      	ldr	r3, [sp, #24]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dcb6      	bgt.n	800ba86 <_dtoa_r+0xb1e>
 800bb18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	f73f aeb5 	bgt.w	800b88a <_dtoa_r+0x922>
 800bb20:	e7b1      	b.n	800ba86 <_dtoa_r+0xb1e>
 800bb22:	bf00      	nop
 800bb24:	0800f64c 	.word	0x0800f64c
 800bb28:	0800f5a7 	.word	0x0800f5a7
 800bb2c:	0800f5d0 	.word	0x0800f5d0

0800bb30 <_free_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4605      	mov	r5, r0
 800bb34:	2900      	cmp	r1, #0
 800bb36:	d040      	beq.n	800bbba <_free_r+0x8a>
 800bb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb3c:	1f0c      	subs	r4, r1, #4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	bfb8      	it	lt
 800bb42:	18e4      	addlt	r4, r4, r3
 800bb44:	f000 f8e4 	bl	800bd10 <__malloc_lock>
 800bb48:	4a1c      	ldr	r2, [pc, #112]	; (800bbbc <_free_r+0x8c>)
 800bb4a:	6813      	ldr	r3, [r2, #0]
 800bb4c:	b933      	cbnz	r3, 800bb5c <_free_r+0x2c>
 800bb4e:	6063      	str	r3, [r4, #4]
 800bb50:	6014      	str	r4, [r2, #0]
 800bb52:	4628      	mov	r0, r5
 800bb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb58:	f000 b8e0 	b.w	800bd1c <__malloc_unlock>
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d908      	bls.n	800bb72 <_free_r+0x42>
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	1821      	adds	r1, r4, r0
 800bb64:	428b      	cmp	r3, r1
 800bb66:	bf01      	itttt	eq
 800bb68:	6819      	ldreq	r1, [r3, #0]
 800bb6a:	685b      	ldreq	r3, [r3, #4]
 800bb6c:	1809      	addeq	r1, r1, r0
 800bb6e:	6021      	streq	r1, [r4, #0]
 800bb70:	e7ed      	b.n	800bb4e <_free_r+0x1e>
 800bb72:	461a      	mov	r2, r3
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	b10b      	cbz	r3, 800bb7c <_free_r+0x4c>
 800bb78:	42a3      	cmp	r3, r4
 800bb7a:	d9fa      	bls.n	800bb72 <_free_r+0x42>
 800bb7c:	6811      	ldr	r1, [r2, #0]
 800bb7e:	1850      	adds	r0, r2, r1
 800bb80:	42a0      	cmp	r0, r4
 800bb82:	d10b      	bne.n	800bb9c <_free_r+0x6c>
 800bb84:	6820      	ldr	r0, [r4, #0]
 800bb86:	4401      	add	r1, r0
 800bb88:	1850      	adds	r0, r2, r1
 800bb8a:	4283      	cmp	r3, r0
 800bb8c:	6011      	str	r1, [r2, #0]
 800bb8e:	d1e0      	bne.n	800bb52 <_free_r+0x22>
 800bb90:	6818      	ldr	r0, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	4408      	add	r0, r1
 800bb96:	6010      	str	r0, [r2, #0]
 800bb98:	6053      	str	r3, [r2, #4]
 800bb9a:	e7da      	b.n	800bb52 <_free_r+0x22>
 800bb9c:	d902      	bls.n	800bba4 <_free_r+0x74>
 800bb9e:	230c      	movs	r3, #12
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	e7d6      	b.n	800bb52 <_free_r+0x22>
 800bba4:	6820      	ldr	r0, [r4, #0]
 800bba6:	1821      	adds	r1, r4, r0
 800bba8:	428b      	cmp	r3, r1
 800bbaa:	bf01      	itttt	eq
 800bbac:	6819      	ldreq	r1, [r3, #0]
 800bbae:	685b      	ldreq	r3, [r3, #4]
 800bbb0:	1809      	addeq	r1, r1, r0
 800bbb2:	6021      	streq	r1, [r4, #0]
 800bbb4:	6063      	str	r3, [r4, #4]
 800bbb6:	6054      	str	r4, [r2, #4]
 800bbb8:	e7cb      	b.n	800bb52 <_free_r+0x22>
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	20003f94 	.word	0x20003f94

0800bbc0 <malloc>:
 800bbc0:	4b02      	ldr	r3, [pc, #8]	; (800bbcc <malloc+0xc>)
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	f000 b823 	b.w	800bc10 <_malloc_r>
 800bbca:	bf00      	nop
 800bbcc:	2000006c 	.word	0x2000006c

0800bbd0 <sbrk_aligned>:
 800bbd0:	b570      	push	{r4, r5, r6, lr}
 800bbd2:	4e0e      	ldr	r6, [pc, #56]	; (800bc0c <sbrk_aligned+0x3c>)
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	6831      	ldr	r1, [r6, #0]
 800bbd8:	4605      	mov	r5, r0
 800bbda:	b911      	cbnz	r1, 800bbe2 <sbrk_aligned+0x12>
 800bbdc:	f001 fd8c 	bl	800d6f8 <_sbrk_r>
 800bbe0:	6030      	str	r0, [r6, #0]
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	f001 fd87 	bl	800d6f8 <_sbrk_r>
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	d00a      	beq.n	800bc04 <sbrk_aligned+0x34>
 800bbee:	1cc4      	adds	r4, r0, #3
 800bbf0:	f024 0403 	bic.w	r4, r4, #3
 800bbf4:	42a0      	cmp	r0, r4
 800bbf6:	d007      	beq.n	800bc08 <sbrk_aligned+0x38>
 800bbf8:	1a21      	subs	r1, r4, r0
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	f001 fd7c 	bl	800d6f8 <_sbrk_r>
 800bc00:	3001      	adds	r0, #1
 800bc02:	d101      	bne.n	800bc08 <sbrk_aligned+0x38>
 800bc04:	f04f 34ff 	mov.w	r4, #4294967295
 800bc08:	4620      	mov	r0, r4
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	20003f98 	.word	0x20003f98

0800bc10 <_malloc_r>:
 800bc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc14:	1ccd      	adds	r5, r1, #3
 800bc16:	f025 0503 	bic.w	r5, r5, #3
 800bc1a:	3508      	adds	r5, #8
 800bc1c:	2d0c      	cmp	r5, #12
 800bc1e:	bf38      	it	cc
 800bc20:	250c      	movcc	r5, #12
 800bc22:	2d00      	cmp	r5, #0
 800bc24:	4607      	mov	r7, r0
 800bc26:	db01      	blt.n	800bc2c <_malloc_r+0x1c>
 800bc28:	42a9      	cmp	r1, r5
 800bc2a:	d905      	bls.n	800bc38 <_malloc_r+0x28>
 800bc2c:	230c      	movs	r3, #12
 800bc2e:	2600      	movs	r6, #0
 800bc30:	603b      	str	r3, [r7, #0]
 800bc32:	4630      	mov	r0, r6
 800bc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd0c <_malloc_r+0xfc>
 800bc3c:	f000 f868 	bl	800bd10 <__malloc_lock>
 800bc40:	f8d8 3000 	ldr.w	r3, [r8]
 800bc44:	461c      	mov	r4, r3
 800bc46:	bb5c      	cbnz	r4, 800bca0 <_malloc_r+0x90>
 800bc48:	4629      	mov	r1, r5
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	f7ff ffc0 	bl	800bbd0 <sbrk_aligned>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	4604      	mov	r4, r0
 800bc54:	d155      	bne.n	800bd02 <_malloc_r+0xf2>
 800bc56:	f8d8 4000 	ldr.w	r4, [r8]
 800bc5a:	4626      	mov	r6, r4
 800bc5c:	2e00      	cmp	r6, #0
 800bc5e:	d145      	bne.n	800bcec <_malloc_r+0xdc>
 800bc60:	2c00      	cmp	r4, #0
 800bc62:	d048      	beq.n	800bcf6 <_malloc_r+0xe6>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	4631      	mov	r1, r6
 800bc68:	4638      	mov	r0, r7
 800bc6a:	eb04 0903 	add.w	r9, r4, r3
 800bc6e:	f001 fd43 	bl	800d6f8 <_sbrk_r>
 800bc72:	4581      	cmp	r9, r0
 800bc74:	d13f      	bne.n	800bcf6 <_malloc_r+0xe6>
 800bc76:	6821      	ldr	r1, [r4, #0]
 800bc78:	4638      	mov	r0, r7
 800bc7a:	1a6d      	subs	r5, r5, r1
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	f7ff ffa7 	bl	800bbd0 <sbrk_aligned>
 800bc82:	3001      	adds	r0, #1
 800bc84:	d037      	beq.n	800bcf6 <_malloc_r+0xe6>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	442b      	add	r3, r5
 800bc8a:	6023      	str	r3, [r4, #0]
 800bc8c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d038      	beq.n	800bd06 <_malloc_r+0xf6>
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	42a2      	cmp	r2, r4
 800bc98:	d12b      	bne.n	800bcf2 <_malloc_r+0xe2>
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	605a      	str	r2, [r3, #4]
 800bc9e:	e00f      	b.n	800bcc0 <_malloc_r+0xb0>
 800bca0:	6822      	ldr	r2, [r4, #0]
 800bca2:	1b52      	subs	r2, r2, r5
 800bca4:	d41f      	bmi.n	800bce6 <_malloc_r+0xd6>
 800bca6:	2a0b      	cmp	r2, #11
 800bca8:	d917      	bls.n	800bcda <_malloc_r+0xca>
 800bcaa:	1961      	adds	r1, r4, r5
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	6025      	str	r5, [r4, #0]
 800bcb0:	bf18      	it	ne
 800bcb2:	6059      	strne	r1, [r3, #4]
 800bcb4:	6863      	ldr	r3, [r4, #4]
 800bcb6:	bf08      	it	eq
 800bcb8:	f8c8 1000 	streq.w	r1, [r8]
 800bcbc:	5162      	str	r2, [r4, r5]
 800bcbe:	604b      	str	r3, [r1, #4]
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	f104 060b 	add.w	r6, r4, #11
 800bcc6:	f000 f829 	bl	800bd1c <__malloc_unlock>
 800bcca:	f026 0607 	bic.w	r6, r6, #7
 800bcce:	1d23      	adds	r3, r4, #4
 800bcd0:	1af2      	subs	r2, r6, r3
 800bcd2:	d0ae      	beq.n	800bc32 <_malloc_r+0x22>
 800bcd4:	1b9b      	subs	r3, r3, r6
 800bcd6:	50a3      	str	r3, [r4, r2]
 800bcd8:	e7ab      	b.n	800bc32 <_malloc_r+0x22>
 800bcda:	42a3      	cmp	r3, r4
 800bcdc:	6862      	ldr	r2, [r4, #4]
 800bcde:	d1dd      	bne.n	800bc9c <_malloc_r+0x8c>
 800bce0:	f8c8 2000 	str.w	r2, [r8]
 800bce4:	e7ec      	b.n	800bcc0 <_malloc_r+0xb0>
 800bce6:	4623      	mov	r3, r4
 800bce8:	6864      	ldr	r4, [r4, #4]
 800bcea:	e7ac      	b.n	800bc46 <_malloc_r+0x36>
 800bcec:	4634      	mov	r4, r6
 800bcee:	6876      	ldr	r6, [r6, #4]
 800bcf0:	e7b4      	b.n	800bc5c <_malloc_r+0x4c>
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	e7cc      	b.n	800bc90 <_malloc_r+0x80>
 800bcf6:	230c      	movs	r3, #12
 800bcf8:	4638      	mov	r0, r7
 800bcfa:	603b      	str	r3, [r7, #0]
 800bcfc:	f000 f80e 	bl	800bd1c <__malloc_unlock>
 800bd00:	e797      	b.n	800bc32 <_malloc_r+0x22>
 800bd02:	6025      	str	r5, [r4, #0]
 800bd04:	e7dc      	b.n	800bcc0 <_malloc_r+0xb0>
 800bd06:	605b      	str	r3, [r3, #4]
 800bd08:	deff      	udf	#255	; 0xff
 800bd0a:	bf00      	nop
 800bd0c:	20003f94 	.word	0x20003f94

0800bd10 <__malloc_lock>:
 800bd10:	4801      	ldr	r0, [pc, #4]	; (800bd18 <__malloc_lock+0x8>)
 800bd12:	f7ff b87b 	b.w	800ae0c <__retarget_lock_acquire_recursive>
 800bd16:	bf00      	nop
 800bd18:	20003f90 	.word	0x20003f90

0800bd1c <__malloc_unlock>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	; (800bd24 <__malloc_unlock+0x8>)
 800bd1e:	f7ff b876 	b.w	800ae0e <__retarget_lock_release_recursive>
 800bd22:	bf00      	nop
 800bd24:	20003f90 	.word	0x20003f90

0800bd28 <_Balloc>:
 800bd28:	b570      	push	{r4, r5, r6, lr}
 800bd2a:	69c6      	ldr	r6, [r0, #28]
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	460d      	mov	r5, r1
 800bd30:	b976      	cbnz	r6, 800bd50 <_Balloc+0x28>
 800bd32:	2010      	movs	r0, #16
 800bd34:	f7ff ff44 	bl	800bbc0 <malloc>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	61e0      	str	r0, [r4, #28]
 800bd3c:	b920      	cbnz	r0, 800bd48 <_Balloc+0x20>
 800bd3e:	216b      	movs	r1, #107	; 0x6b
 800bd40:	4b17      	ldr	r3, [pc, #92]	; (800bda0 <_Balloc+0x78>)
 800bd42:	4818      	ldr	r0, [pc, #96]	; (800bda4 <_Balloc+0x7c>)
 800bd44:	f001 fcee 	bl	800d724 <__assert_func>
 800bd48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd4c:	6006      	str	r6, [r0, #0]
 800bd4e:	60c6      	str	r6, [r0, #12]
 800bd50:	69e6      	ldr	r6, [r4, #28]
 800bd52:	68f3      	ldr	r3, [r6, #12]
 800bd54:	b183      	cbz	r3, 800bd78 <_Balloc+0x50>
 800bd56:	69e3      	ldr	r3, [r4, #28]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd5e:	b9b8      	cbnz	r0, 800bd90 <_Balloc+0x68>
 800bd60:	2101      	movs	r1, #1
 800bd62:	fa01 f605 	lsl.w	r6, r1, r5
 800bd66:	1d72      	adds	r2, r6, #5
 800bd68:	4620      	mov	r0, r4
 800bd6a:	0092      	lsls	r2, r2, #2
 800bd6c:	f001 fcf8 	bl	800d760 <_calloc_r>
 800bd70:	b160      	cbz	r0, 800bd8c <_Balloc+0x64>
 800bd72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd76:	e00e      	b.n	800bd96 <_Balloc+0x6e>
 800bd78:	2221      	movs	r2, #33	; 0x21
 800bd7a:	2104      	movs	r1, #4
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f001 fcef 	bl	800d760 <_calloc_r>
 800bd82:	69e3      	ldr	r3, [r4, #28]
 800bd84:	60f0      	str	r0, [r6, #12]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1e4      	bne.n	800bd56 <_Balloc+0x2e>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}
 800bd90:	6802      	ldr	r2, [r0, #0]
 800bd92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd96:	2300      	movs	r3, #0
 800bd98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd9c:	e7f7      	b.n	800bd8e <_Balloc+0x66>
 800bd9e:	bf00      	nop
 800bda0:	0800f5dd 	.word	0x0800f5dd
 800bda4:	0800f65d 	.word	0x0800f65d

0800bda8 <_Bfree>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	69c6      	ldr	r6, [r0, #28]
 800bdac:	4605      	mov	r5, r0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	b976      	cbnz	r6, 800bdd0 <_Bfree+0x28>
 800bdb2:	2010      	movs	r0, #16
 800bdb4:	f7ff ff04 	bl	800bbc0 <malloc>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	61e8      	str	r0, [r5, #28]
 800bdbc:	b920      	cbnz	r0, 800bdc8 <_Bfree+0x20>
 800bdbe:	218f      	movs	r1, #143	; 0x8f
 800bdc0:	4b08      	ldr	r3, [pc, #32]	; (800bde4 <_Bfree+0x3c>)
 800bdc2:	4809      	ldr	r0, [pc, #36]	; (800bde8 <_Bfree+0x40>)
 800bdc4:	f001 fcae 	bl	800d724 <__assert_func>
 800bdc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdcc:	6006      	str	r6, [r0, #0]
 800bdce:	60c6      	str	r6, [r0, #12]
 800bdd0:	b13c      	cbz	r4, 800bde2 <_Bfree+0x3a>
 800bdd2:	69eb      	ldr	r3, [r5, #28]
 800bdd4:	6862      	ldr	r2, [r4, #4]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bddc:	6021      	str	r1, [r4, #0]
 800bdde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
 800bde4:	0800f5dd 	.word	0x0800f5dd
 800bde8:	0800f65d 	.word	0x0800f65d

0800bdec <__multadd>:
 800bdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf0:	4607      	mov	r7, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	461e      	mov	r6, r3
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	690d      	ldr	r5, [r1, #16]
 800bdfa:	f101 0c14 	add.w	ip, r1, #20
 800bdfe:	f8dc 3000 	ldr.w	r3, [ip]
 800be02:	3001      	adds	r0, #1
 800be04:	b299      	uxth	r1, r3
 800be06:	fb02 6101 	mla	r1, r2, r1, r6
 800be0a:	0c1e      	lsrs	r6, r3, #16
 800be0c:	0c0b      	lsrs	r3, r1, #16
 800be0e:	fb02 3306 	mla	r3, r2, r6, r3
 800be12:	b289      	uxth	r1, r1
 800be14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be18:	4285      	cmp	r5, r0
 800be1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be1e:	f84c 1b04 	str.w	r1, [ip], #4
 800be22:	dcec      	bgt.n	800bdfe <__multadd+0x12>
 800be24:	b30e      	cbz	r6, 800be6a <__multadd+0x7e>
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	42ab      	cmp	r3, r5
 800be2a:	dc19      	bgt.n	800be60 <__multadd+0x74>
 800be2c:	6861      	ldr	r1, [r4, #4]
 800be2e:	4638      	mov	r0, r7
 800be30:	3101      	adds	r1, #1
 800be32:	f7ff ff79 	bl	800bd28 <_Balloc>
 800be36:	4680      	mov	r8, r0
 800be38:	b928      	cbnz	r0, 800be46 <__multadd+0x5a>
 800be3a:	4602      	mov	r2, r0
 800be3c:	21ba      	movs	r1, #186	; 0xba
 800be3e:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <__multadd+0x84>)
 800be40:	480c      	ldr	r0, [pc, #48]	; (800be74 <__multadd+0x88>)
 800be42:	f001 fc6f 	bl	800d724 <__assert_func>
 800be46:	6922      	ldr	r2, [r4, #16]
 800be48:	f104 010c 	add.w	r1, r4, #12
 800be4c:	3202      	adds	r2, #2
 800be4e:	0092      	lsls	r2, r2, #2
 800be50:	300c      	adds	r0, #12
 800be52:	f7fe ffeb 	bl	800ae2c <memcpy>
 800be56:	4621      	mov	r1, r4
 800be58:	4638      	mov	r0, r7
 800be5a:	f7ff ffa5 	bl	800bda8 <_Bfree>
 800be5e:	4644      	mov	r4, r8
 800be60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be64:	3501      	adds	r5, #1
 800be66:	615e      	str	r6, [r3, #20]
 800be68:	6125      	str	r5, [r4, #16]
 800be6a:	4620      	mov	r0, r4
 800be6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be70:	0800f64c 	.word	0x0800f64c
 800be74:	0800f65d 	.word	0x0800f65d

0800be78 <__s2b>:
 800be78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be7c:	4615      	mov	r5, r2
 800be7e:	2209      	movs	r2, #9
 800be80:	461f      	mov	r7, r3
 800be82:	3308      	adds	r3, #8
 800be84:	460c      	mov	r4, r1
 800be86:	fb93 f3f2 	sdiv	r3, r3, r2
 800be8a:	4606      	mov	r6, r0
 800be8c:	2201      	movs	r2, #1
 800be8e:	2100      	movs	r1, #0
 800be90:	429a      	cmp	r2, r3
 800be92:	db09      	blt.n	800bea8 <__s2b+0x30>
 800be94:	4630      	mov	r0, r6
 800be96:	f7ff ff47 	bl	800bd28 <_Balloc>
 800be9a:	b940      	cbnz	r0, 800beae <__s2b+0x36>
 800be9c:	4602      	mov	r2, r0
 800be9e:	21d3      	movs	r1, #211	; 0xd3
 800bea0:	4b18      	ldr	r3, [pc, #96]	; (800bf04 <__s2b+0x8c>)
 800bea2:	4819      	ldr	r0, [pc, #100]	; (800bf08 <__s2b+0x90>)
 800bea4:	f001 fc3e 	bl	800d724 <__assert_func>
 800bea8:	0052      	lsls	r2, r2, #1
 800beaa:	3101      	adds	r1, #1
 800beac:	e7f0      	b.n	800be90 <__s2b+0x18>
 800beae:	9b08      	ldr	r3, [sp, #32]
 800beb0:	2d09      	cmp	r5, #9
 800beb2:	6143      	str	r3, [r0, #20]
 800beb4:	f04f 0301 	mov.w	r3, #1
 800beb8:	6103      	str	r3, [r0, #16]
 800beba:	dd16      	ble.n	800beea <__s2b+0x72>
 800bebc:	f104 0909 	add.w	r9, r4, #9
 800bec0:	46c8      	mov	r8, r9
 800bec2:	442c      	add	r4, r5
 800bec4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bec8:	4601      	mov	r1, r0
 800beca:	220a      	movs	r2, #10
 800becc:	4630      	mov	r0, r6
 800bece:	3b30      	subs	r3, #48	; 0x30
 800bed0:	f7ff ff8c 	bl	800bdec <__multadd>
 800bed4:	45a0      	cmp	r8, r4
 800bed6:	d1f5      	bne.n	800bec4 <__s2b+0x4c>
 800bed8:	f1a5 0408 	sub.w	r4, r5, #8
 800bedc:	444c      	add	r4, r9
 800bede:	1b2d      	subs	r5, r5, r4
 800bee0:	1963      	adds	r3, r4, r5
 800bee2:	42bb      	cmp	r3, r7
 800bee4:	db04      	blt.n	800bef0 <__s2b+0x78>
 800bee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beea:	2509      	movs	r5, #9
 800beec:	340a      	adds	r4, #10
 800beee:	e7f6      	b.n	800bede <__s2b+0x66>
 800bef0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bef4:	4601      	mov	r1, r0
 800bef6:	220a      	movs	r2, #10
 800bef8:	4630      	mov	r0, r6
 800befa:	3b30      	subs	r3, #48	; 0x30
 800befc:	f7ff ff76 	bl	800bdec <__multadd>
 800bf00:	e7ee      	b.n	800bee0 <__s2b+0x68>
 800bf02:	bf00      	nop
 800bf04:	0800f64c 	.word	0x0800f64c
 800bf08:	0800f65d 	.word	0x0800f65d

0800bf0c <__hi0bits>:
 800bf0c:	0c02      	lsrs	r2, r0, #16
 800bf0e:	0412      	lsls	r2, r2, #16
 800bf10:	4603      	mov	r3, r0
 800bf12:	b9ca      	cbnz	r2, 800bf48 <__hi0bits+0x3c>
 800bf14:	0403      	lsls	r3, r0, #16
 800bf16:	2010      	movs	r0, #16
 800bf18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bf1c:	bf04      	itt	eq
 800bf1e:	021b      	lsleq	r3, r3, #8
 800bf20:	3008      	addeq	r0, #8
 800bf22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bf26:	bf04      	itt	eq
 800bf28:	011b      	lsleq	r3, r3, #4
 800bf2a:	3004      	addeq	r0, #4
 800bf2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bf30:	bf04      	itt	eq
 800bf32:	009b      	lsleq	r3, r3, #2
 800bf34:	3002      	addeq	r0, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	db05      	blt.n	800bf46 <__hi0bits+0x3a>
 800bf3a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bf3e:	f100 0001 	add.w	r0, r0, #1
 800bf42:	bf08      	it	eq
 800bf44:	2020      	moveq	r0, #32
 800bf46:	4770      	bx	lr
 800bf48:	2000      	movs	r0, #0
 800bf4a:	e7e5      	b.n	800bf18 <__hi0bits+0xc>

0800bf4c <__lo0bits>:
 800bf4c:	6803      	ldr	r3, [r0, #0]
 800bf4e:	4602      	mov	r2, r0
 800bf50:	f013 0007 	ands.w	r0, r3, #7
 800bf54:	d00b      	beq.n	800bf6e <__lo0bits+0x22>
 800bf56:	07d9      	lsls	r1, r3, #31
 800bf58:	d421      	bmi.n	800bf9e <__lo0bits+0x52>
 800bf5a:	0798      	lsls	r0, r3, #30
 800bf5c:	bf49      	itett	mi
 800bf5e:	085b      	lsrmi	r3, r3, #1
 800bf60:	089b      	lsrpl	r3, r3, #2
 800bf62:	2001      	movmi	r0, #1
 800bf64:	6013      	strmi	r3, [r2, #0]
 800bf66:	bf5c      	itt	pl
 800bf68:	2002      	movpl	r0, #2
 800bf6a:	6013      	strpl	r3, [r2, #0]
 800bf6c:	4770      	bx	lr
 800bf6e:	b299      	uxth	r1, r3
 800bf70:	b909      	cbnz	r1, 800bf76 <__lo0bits+0x2a>
 800bf72:	2010      	movs	r0, #16
 800bf74:	0c1b      	lsrs	r3, r3, #16
 800bf76:	b2d9      	uxtb	r1, r3
 800bf78:	b909      	cbnz	r1, 800bf7e <__lo0bits+0x32>
 800bf7a:	3008      	adds	r0, #8
 800bf7c:	0a1b      	lsrs	r3, r3, #8
 800bf7e:	0719      	lsls	r1, r3, #28
 800bf80:	bf04      	itt	eq
 800bf82:	091b      	lsreq	r3, r3, #4
 800bf84:	3004      	addeq	r0, #4
 800bf86:	0799      	lsls	r1, r3, #30
 800bf88:	bf04      	itt	eq
 800bf8a:	089b      	lsreq	r3, r3, #2
 800bf8c:	3002      	addeq	r0, #2
 800bf8e:	07d9      	lsls	r1, r3, #31
 800bf90:	d403      	bmi.n	800bf9a <__lo0bits+0x4e>
 800bf92:	085b      	lsrs	r3, r3, #1
 800bf94:	f100 0001 	add.w	r0, r0, #1
 800bf98:	d003      	beq.n	800bfa2 <__lo0bits+0x56>
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	4770      	bx	lr
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	4770      	bx	lr
 800bfa2:	2020      	movs	r0, #32
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <__i2b>:
 800bfa8:	b510      	push	{r4, lr}
 800bfaa:	460c      	mov	r4, r1
 800bfac:	2101      	movs	r1, #1
 800bfae:	f7ff febb 	bl	800bd28 <_Balloc>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	b928      	cbnz	r0, 800bfc2 <__i2b+0x1a>
 800bfb6:	f240 1145 	movw	r1, #325	; 0x145
 800bfba:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <__i2b+0x24>)
 800bfbc:	4804      	ldr	r0, [pc, #16]	; (800bfd0 <__i2b+0x28>)
 800bfbe:	f001 fbb1 	bl	800d724 <__assert_func>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	6144      	str	r4, [r0, #20]
 800bfc6:	6103      	str	r3, [r0, #16]
 800bfc8:	bd10      	pop	{r4, pc}
 800bfca:	bf00      	nop
 800bfcc:	0800f64c 	.word	0x0800f64c
 800bfd0:	0800f65d 	.word	0x0800f65d

0800bfd4 <__multiply>:
 800bfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	4691      	mov	r9, r2
 800bfda:	690a      	ldr	r2, [r1, #16]
 800bfdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	bfbe      	ittt	lt
 800bfe6:	460b      	movlt	r3, r1
 800bfe8:	464c      	movlt	r4, r9
 800bfea:	4699      	movlt	r9, r3
 800bfec:	6927      	ldr	r7, [r4, #16]
 800bfee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bff2:	68a3      	ldr	r3, [r4, #8]
 800bff4:	6861      	ldr	r1, [r4, #4]
 800bff6:	eb07 060a 	add.w	r6, r7, sl
 800bffa:	42b3      	cmp	r3, r6
 800bffc:	b085      	sub	sp, #20
 800bffe:	bfb8      	it	lt
 800c000:	3101      	addlt	r1, #1
 800c002:	f7ff fe91 	bl	800bd28 <_Balloc>
 800c006:	b930      	cbnz	r0, 800c016 <__multiply+0x42>
 800c008:	4602      	mov	r2, r0
 800c00a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c00e:	4b43      	ldr	r3, [pc, #268]	; (800c11c <__multiply+0x148>)
 800c010:	4843      	ldr	r0, [pc, #268]	; (800c120 <__multiply+0x14c>)
 800c012:	f001 fb87 	bl	800d724 <__assert_func>
 800c016:	f100 0514 	add.w	r5, r0, #20
 800c01a:	462b      	mov	r3, r5
 800c01c:	2200      	movs	r2, #0
 800c01e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c022:	4543      	cmp	r3, r8
 800c024:	d321      	bcc.n	800c06a <__multiply+0x96>
 800c026:	f104 0314 	add.w	r3, r4, #20
 800c02a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c02e:	f109 0314 	add.w	r3, r9, #20
 800c032:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c036:	9202      	str	r2, [sp, #8]
 800c038:	1b3a      	subs	r2, r7, r4
 800c03a:	3a15      	subs	r2, #21
 800c03c:	f022 0203 	bic.w	r2, r2, #3
 800c040:	3204      	adds	r2, #4
 800c042:	f104 0115 	add.w	r1, r4, #21
 800c046:	428f      	cmp	r7, r1
 800c048:	bf38      	it	cc
 800c04a:	2204      	movcc	r2, #4
 800c04c:	9201      	str	r2, [sp, #4]
 800c04e:	9a02      	ldr	r2, [sp, #8]
 800c050:	9303      	str	r3, [sp, #12]
 800c052:	429a      	cmp	r2, r3
 800c054:	d80c      	bhi.n	800c070 <__multiply+0x9c>
 800c056:	2e00      	cmp	r6, #0
 800c058:	dd03      	ble.n	800c062 <__multiply+0x8e>
 800c05a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d05a      	beq.n	800c118 <__multiply+0x144>
 800c062:	6106      	str	r6, [r0, #16]
 800c064:	b005      	add	sp, #20
 800c066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06a:	f843 2b04 	str.w	r2, [r3], #4
 800c06e:	e7d8      	b.n	800c022 <__multiply+0x4e>
 800c070:	f8b3 a000 	ldrh.w	sl, [r3]
 800c074:	f1ba 0f00 	cmp.w	sl, #0
 800c078:	d023      	beq.n	800c0c2 <__multiply+0xee>
 800c07a:	46a9      	mov	r9, r5
 800c07c:	f04f 0c00 	mov.w	ip, #0
 800c080:	f104 0e14 	add.w	lr, r4, #20
 800c084:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c088:	f8d9 1000 	ldr.w	r1, [r9]
 800c08c:	fa1f fb82 	uxth.w	fp, r2
 800c090:	b289      	uxth	r1, r1
 800c092:	fb0a 110b 	mla	r1, sl, fp, r1
 800c096:	4461      	add	r1, ip
 800c098:	f8d9 c000 	ldr.w	ip, [r9]
 800c09c:	0c12      	lsrs	r2, r2, #16
 800c09e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c0a2:	fb0a c202 	mla	r2, sl, r2, ip
 800c0a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0aa:	b289      	uxth	r1, r1
 800c0ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0b0:	4577      	cmp	r7, lr
 800c0b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0b6:	f849 1b04 	str.w	r1, [r9], #4
 800c0ba:	d8e3      	bhi.n	800c084 <__multiply+0xb0>
 800c0bc:	9a01      	ldr	r2, [sp, #4]
 800c0be:	f845 c002 	str.w	ip, [r5, r2]
 800c0c2:	9a03      	ldr	r2, [sp, #12]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0ca:	f1b9 0f00 	cmp.w	r9, #0
 800c0ce:	d021      	beq.n	800c114 <__multiply+0x140>
 800c0d0:	46ae      	mov	lr, r5
 800c0d2:	f04f 0a00 	mov.w	sl, #0
 800c0d6:	6829      	ldr	r1, [r5, #0]
 800c0d8:	f104 0c14 	add.w	ip, r4, #20
 800c0dc:	f8bc b000 	ldrh.w	fp, [ip]
 800c0e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0e4:	b289      	uxth	r1, r1
 800c0e6:	fb09 220b 	mla	r2, r9, fp, r2
 800c0ea:	4452      	add	r2, sl
 800c0ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0f0:	f84e 1b04 	str.w	r1, [lr], #4
 800c0f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c0f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0fc:	f8be 1000 	ldrh.w	r1, [lr]
 800c100:	4567      	cmp	r7, ip
 800c102:	fb09 110a 	mla	r1, r9, sl, r1
 800c106:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c10a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c10e:	d8e5      	bhi.n	800c0dc <__multiply+0x108>
 800c110:	9a01      	ldr	r2, [sp, #4]
 800c112:	50a9      	str	r1, [r5, r2]
 800c114:	3504      	adds	r5, #4
 800c116:	e79a      	b.n	800c04e <__multiply+0x7a>
 800c118:	3e01      	subs	r6, #1
 800c11a:	e79c      	b.n	800c056 <__multiply+0x82>
 800c11c:	0800f64c 	.word	0x0800f64c
 800c120:	0800f65d 	.word	0x0800f65d

0800c124 <__pow5mult>:
 800c124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c128:	4615      	mov	r5, r2
 800c12a:	f012 0203 	ands.w	r2, r2, #3
 800c12e:	4606      	mov	r6, r0
 800c130:	460f      	mov	r7, r1
 800c132:	d007      	beq.n	800c144 <__pow5mult+0x20>
 800c134:	4c25      	ldr	r4, [pc, #148]	; (800c1cc <__pow5mult+0xa8>)
 800c136:	3a01      	subs	r2, #1
 800c138:	2300      	movs	r3, #0
 800c13a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c13e:	f7ff fe55 	bl	800bdec <__multadd>
 800c142:	4607      	mov	r7, r0
 800c144:	10ad      	asrs	r5, r5, #2
 800c146:	d03d      	beq.n	800c1c4 <__pow5mult+0xa0>
 800c148:	69f4      	ldr	r4, [r6, #28]
 800c14a:	b97c      	cbnz	r4, 800c16c <__pow5mult+0x48>
 800c14c:	2010      	movs	r0, #16
 800c14e:	f7ff fd37 	bl	800bbc0 <malloc>
 800c152:	4602      	mov	r2, r0
 800c154:	61f0      	str	r0, [r6, #28]
 800c156:	b928      	cbnz	r0, 800c164 <__pow5mult+0x40>
 800c158:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c15c:	4b1c      	ldr	r3, [pc, #112]	; (800c1d0 <__pow5mult+0xac>)
 800c15e:	481d      	ldr	r0, [pc, #116]	; (800c1d4 <__pow5mult+0xb0>)
 800c160:	f001 fae0 	bl	800d724 <__assert_func>
 800c164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c168:	6004      	str	r4, [r0, #0]
 800c16a:	60c4      	str	r4, [r0, #12]
 800c16c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c174:	b94c      	cbnz	r4, 800c18a <__pow5mult+0x66>
 800c176:	f240 2171 	movw	r1, #625	; 0x271
 800c17a:	4630      	mov	r0, r6
 800c17c:	f7ff ff14 	bl	800bfa8 <__i2b>
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	f8c8 0008 	str.w	r0, [r8, #8]
 800c188:	6003      	str	r3, [r0, #0]
 800c18a:	f04f 0900 	mov.w	r9, #0
 800c18e:	07eb      	lsls	r3, r5, #31
 800c190:	d50a      	bpl.n	800c1a8 <__pow5mult+0x84>
 800c192:	4639      	mov	r1, r7
 800c194:	4622      	mov	r2, r4
 800c196:	4630      	mov	r0, r6
 800c198:	f7ff ff1c 	bl	800bfd4 <__multiply>
 800c19c:	4680      	mov	r8, r0
 800c19e:	4639      	mov	r1, r7
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff fe01 	bl	800bda8 <_Bfree>
 800c1a6:	4647      	mov	r7, r8
 800c1a8:	106d      	asrs	r5, r5, #1
 800c1aa:	d00b      	beq.n	800c1c4 <__pow5mult+0xa0>
 800c1ac:	6820      	ldr	r0, [r4, #0]
 800c1ae:	b938      	cbnz	r0, 800c1c0 <__pow5mult+0x9c>
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4621      	mov	r1, r4
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f7ff ff0d 	bl	800bfd4 <__multiply>
 800c1ba:	6020      	str	r0, [r4, #0]
 800c1bc:	f8c0 9000 	str.w	r9, [r0]
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	e7e4      	b.n	800c18e <__pow5mult+0x6a>
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ca:	bf00      	nop
 800c1cc:	0800f7a8 	.word	0x0800f7a8
 800c1d0:	0800f5dd 	.word	0x0800f5dd
 800c1d4:	0800f65d 	.word	0x0800f65d

0800c1d8 <__lshift>:
 800c1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1dc:	460c      	mov	r4, r1
 800c1de:	4607      	mov	r7, r0
 800c1e0:	4691      	mov	r9, r2
 800c1e2:	6923      	ldr	r3, [r4, #16]
 800c1e4:	6849      	ldr	r1, [r1, #4]
 800c1e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1ea:	68a3      	ldr	r3, [r4, #8]
 800c1ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1f0:	f108 0601 	add.w	r6, r8, #1
 800c1f4:	42b3      	cmp	r3, r6
 800c1f6:	db0b      	blt.n	800c210 <__lshift+0x38>
 800c1f8:	4638      	mov	r0, r7
 800c1fa:	f7ff fd95 	bl	800bd28 <_Balloc>
 800c1fe:	4605      	mov	r5, r0
 800c200:	b948      	cbnz	r0, 800c216 <__lshift+0x3e>
 800c202:	4602      	mov	r2, r0
 800c204:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c208:	4b27      	ldr	r3, [pc, #156]	; (800c2a8 <__lshift+0xd0>)
 800c20a:	4828      	ldr	r0, [pc, #160]	; (800c2ac <__lshift+0xd4>)
 800c20c:	f001 fa8a 	bl	800d724 <__assert_func>
 800c210:	3101      	adds	r1, #1
 800c212:	005b      	lsls	r3, r3, #1
 800c214:	e7ee      	b.n	800c1f4 <__lshift+0x1c>
 800c216:	2300      	movs	r3, #0
 800c218:	f100 0114 	add.w	r1, r0, #20
 800c21c:	f100 0210 	add.w	r2, r0, #16
 800c220:	4618      	mov	r0, r3
 800c222:	4553      	cmp	r3, sl
 800c224:	db33      	blt.n	800c28e <__lshift+0xb6>
 800c226:	6920      	ldr	r0, [r4, #16]
 800c228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c22c:	f104 0314 	add.w	r3, r4, #20
 800c230:	f019 091f 	ands.w	r9, r9, #31
 800c234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c23c:	d02b      	beq.n	800c296 <__lshift+0xbe>
 800c23e:	468a      	mov	sl, r1
 800c240:	2200      	movs	r2, #0
 800c242:	f1c9 0e20 	rsb	lr, r9, #32
 800c246:	6818      	ldr	r0, [r3, #0]
 800c248:	fa00 f009 	lsl.w	r0, r0, r9
 800c24c:	4310      	orrs	r0, r2
 800c24e:	f84a 0b04 	str.w	r0, [sl], #4
 800c252:	f853 2b04 	ldr.w	r2, [r3], #4
 800c256:	459c      	cmp	ip, r3
 800c258:	fa22 f20e 	lsr.w	r2, r2, lr
 800c25c:	d8f3      	bhi.n	800c246 <__lshift+0x6e>
 800c25e:	ebac 0304 	sub.w	r3, ip, r4
 800c262:	3b15      	subs	r3, #21
 800c264:	f023 0303 	bic.w	r3, r3, #3
 800c268:	3304      	adds	r3, #4
 800c26a:	f104 0015 	add.w	r0, r4, #21
 800c26e:	4584      	cmp	ip, r0
 800c270:	bf38      	it	cc
 800c272:	2304      	movcc	r3, #4
 800c274:	50ca      	str	r2, [r1, r3]
 800c276:	b10a      	cbz	r2, 800c27c <__lshift+0xa4>
 800c278:	f108 0602 	add.w	r6, r8, #2
 800c27c:	3e01      	subs	r6, #1
 800c27e:	4638      	mov	r0, r7
 800c280:	4621      	mov	r1, r4
 800c282:	612e      	str	r6, [r5, #16]
 800c284:	f7ff fd90 	bl	800bda8 <_Bfree>
 800c288:	4628      	mov	r0, r5
 800c28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c292:	3301      	adds	r3, #1
 800c294:	e7c5      	b.n	800c222 <__lshift+0x4a>
 800c296:	3904      	subs	r1, #4
 800c298:	f853 2b04 	ldr.w	r2, [r3], #4
 800c29c:	459c      	cmp	ip, r3
 800c29e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2a2:	d8f9      	bhi.n	800c298 <__lshift+0xc0>
 800c2a4:	e7ea      	b.n	800c27c <__lshift+0xa4>
 800c2a6:	bf00      	nop
 800c2a8:	0800f64c 	.word	0x0800f64c
 800c2ac:	0800f65d 	.word	0x0800f65d

0800c2b0 <__mcmp>:
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	690a      	ldr	r2, [r1, #16]
 800c2b4:	6900      	ldr	r0, [r0, #16]
 800c2b6:	b530      	push	{r4, r5, lr}
 800c2b8:	1a80      	subs	r0, r0, r2
 800c2ba:	d10d      	bne.n	800c2d8 <__mcmp+0x28>
 800c2bc:	3314      	adds	r3, #20
 800c2be:	3114      	adds	r1, #20
 800c2c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c2c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c2c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c2d0:	4295      	cmp	r5, r2
 800c2d2:	d002      	beq.n	800c2da <__mcmp+0x2a>
 800c2d4:	d304      	bcc.n	800c2e0 <__mcmp+0x30>
 800c2d6:	2001      	movs	r0, #1
 800c2d8:	bd30      	pop	{r4, r5, pc}
 800c2da:	42a3      	cmp	r3, r4
 800c2dc:	d3f4      	bcc.n	800c2c8 <__mcmp+0x18>
 800c2de:	e7fb      	b.n	800c2d8 <__mcmp+0x28>
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	e7f8      	b.n	800c2d8 <__mcmp+0x28>
	...

0800c2e8 <__mdiff>:
 800c2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	4607      	mov	r7, r0
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	4614      	mov	r4, r2
 800c2f6:	f7ff ffdb 	bl	800c2b0 <__mcmp>
 800c2fa:	1e06      	subs	r6, r0, #0
 800c2fc:	d111      	bne.n	800c322 <__mdiff+0x3a>
 800c2fe:	4631      	mov	r1, r6
 800c300:	4638      	mov	r0, r7
 800c302:	f7ff fd11 	bl	800bd28 <_Balloc>
 800c306:	4602      	mov	r2, r0
 800c308:	b928      	cbnz	r0, 800c316 <__mdiff+0x2e>
 800c30a:	f240 2137 	movw	r1, #567	; 0x237
 800c30e:	4b3a      	ldr	r3, [pc, #232]	; (800c3f8 <__mdiff+0x110>)
 800c310:	483a      	ldr	r0, [pc, #232]	; (800c3fc <__mdiff+0x114>)
 800c312:	f001 fa07 	bl	800d724 <__assert_func>
 800c316:	2301      	movs	r3, #1
 800c318:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c31c:	4610      	mov	r0, r2
 800c31e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c322:	bfa4      	itt	ge
 800c324:	4623      	movge	r3, r4
 800c326:	462c      	movge	r4, r5
 800c328:	4638      	mov	r0, r7
 800c32a:	6861      	ldr	r1, [r4, #4]
 800c32c:	bfa6      	itte	ge
 800c32e:	461d      	movge	r5, r3
 800c330:	2600      	movge	r6, #0
 800c332:	2601      	movlt	r6, #1
 800c334:	f7ff fcf8 	bl	800bd28 <_Balloc>
 800c338:	4602      	mov	r2, r0
 800c33a:	b918      	cbnz	r0, 800c344 <__mdiff+0x5c>
 800c33c:	f240 2145 	movw	r1, #581	; 0x245
 800c340:	4b2d      	ldr	r3, [pc, #180]	; (800c3f8 <__mdiff+0x110>)
 800c342:	e7e5      	b.n	800c310 <__mdiff+0x28>
 800c344:	f102 0814 	add.w	r8, r2, #20
 800c348:	46c2      	mov	sl, r8
 800c34a:	f04f 0c00 	mov.w	ip, #0
 800c34e:	6927      	ldr	r7, [r4, #16]
 800c350:	60c6      	str	r6, [r0, #12]
 800c352:	692e      	ldr	r6, [r5, #16]
 800c354:	f104 0014 	add.w	r0, r4, #20
 800c358:	f105 0914 	add.w	r9, r5, #20
 800c35c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c360:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c364:	3410      	adds	r4, #16
 800c366:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c36a:	f859 3b04 	ldr.w	r3, [r9], #4
 800c36e:	fa1f f18b 	uxth.w	r1, fp
 800c372:	4461      	add	r1, ip
 800c374:	fa1f fc83 	uxth.w	ip, r3
 800c378:	0c1b      	lsrs	r3, r3, #16
 800c37a:	eba1 010c 	sub.w	r1, r1, ip
 800c37e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c382:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c386:	b289      	uxth	r1, r1
 800c388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c38c:	454e      	cmp	r6, r9
 800c38e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c392:	f84a 1b04 	str.w	r1, [sl], #4
 800c396:	d8e6      	bhi.n	800c366 <__mdiff+0x7e>
 800c398:	1b73      	subs	r3, r6, r5
 800c39a:	3b15      	subs	r3, #21
 800c39c:	f023 0303 	bic.w	r3, r3, #3
 800c3a0:	3515      	adds	r5, #21
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	42ae      	cmp	r6, r5
 800c3a6:	bf38      	it	cc
 800c3a8:	2304      	movcc	r3, #4
 800c3aa:	4418      	add	r0, r3
 800c3ac:	4443      	add	r3, r8
 800c3ae:	461e      	mov	r6, r3
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	4575      	cmp	r5, lr
 800c3b4:	d30e      	bcc.n	800c3d4 <__mdiff+0xec>
 800c3b6:	f10e 0103 	add.w	r1, lr, #3
 800c3ba:	1a09      	subs	r1, r1, r0
 800c3bc:	f021 0103 	bic.w	r1, r1, #3
 800c3c0:	3803      	subs	r0, #3
 800c3c2:	4586      	cmp	lr, r0
 800c3c4:	bf38      	it	cc
 800c3c6:	2100      	movcc	r1, #0
 800c3c8:	440b      	add	r3, r1
 800c3ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3ce:	b189      	cbz	r1, 800c3f4 <__mdiff+0x10c>
 800c3d0:	6117      	str	r7, [r2, #16]
 800c3d2:	e7a3      	b.n	800c31c <__mdiff+0x34>
 800c3d4:	f855 8b04 	ldr.w	r8, [r5], #4
 800c3d8:	fa1f f188 	uxth.w	r1, r8
 800c3dc:	4461      	add	r1, ip
 800c3de:	140c      	asrs	r4, r1, #16
 800c3e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3e4:	b289      	uxth	r1, r1
 800c3e6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c3ea:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c3ee:	f846 1b04 	str.w	r1, [r6], #4
 800c3f2:	e7de      	b.n	800c3b2 <__mdiff+0xca>
 800c3f4:	3f01      	subs	r7, #1
 800c3f6:	e7e8      	b.n	800c3ca <__mdiff+0xe2>
 800c3f8:	0800f64c 	.word	0x0800f64c
 800c3fc:	0800f65d 	.word	0x0800f65d

0800c400 <__ulp>:
 800c400:	4b0e      	ldr	r3, [pc, #56]	; (800c43c <__ulp+0x3c>)
 800c402:	400b      	ands	r3, r1
 800c404:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	dc08      	bgt.n	800c41e <__ulp+0x1e>
 800c40c:	425b      	negs	r3, r3
 800c40e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c412:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c416:	da04      	bge.n	800c422 <__ulp+0x22>
 800c418:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c41c:	4113      	asrs	r3, r2
 800c41e:	2200      	movs	r2, #0
 800c420:	e008      	b.n	800c434 <__ulp+0x34>
 800c422:	f1a2 0314 	sub.w	r3, r2, #20
 800c426:	2b1e      	cmp	r3, #30
 800c428:	bfd6      	itet	le
 800c42a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c42e:	2201      	movgt	r2, #1
 800c430:	40da      	lsrle	r2, r3
 800c432:	2300      	movs	r3, #0
 800c434:	4619      	mov	r1, r3
 800c436:	4610      	mov	r0, r2
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	7ff00000 	.word	0x7ff00000

0800c440 <__b2d>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	6905      	ldr	r5, [r0, #16]
 800c444:	f100 0714 	add.w	r7, r0, #20
 800c448:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c44c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c450:	1f2e      	subs	r6, r5, #4
 800c452:	4620      	mov	r0, r4
 800c454:	f7ff fd5a 	bl	800bf0c <__hi0bits>
 800c458:	f1c0 0220 	rsb	r2, r0, #32
 800c45c:	280a      	cmp	r0, #10
 800c45e:	4603      	mov	r3, r0
 800c460:	f8df c068 	ldr.w	ip, [pc, #104]	; 800c4cc <__b2d+0x8c>
 800c464:	600a      	str	r2, [r1, #0]
 800c466:	dc12      	bgt.n	800c48e <__b2d+0x4e>
 800c468:	f1c0 0e0b 	rsb	lr, r0, #11
 800c46c:	fa24 f20e 	lsr.w	r2, r4, lr
 800c470:	42b7      	cmp	r7, r6
 800c472:	ea42 010c 	orr.w	r1, r2, ip
 800c476:	bf2c      	ite	cs
 800c478:	2200      	movcs	r2, #0
 800c47a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c47e:	3315      	adds	r3, #21
 800c480:	fa04 f303 	lsl.w	r3, r4, r3
 800c484:	fa22 f20e 	lsr.w	r2, r2, lr
 800c488:	431a      	orrs	r2, r3
 800c48a:	4610      	mov	r0, r2
 800c48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c48e:	42b7      	cmp	r7, r6
 800c490:	bf2e      	itee	cs
 800c492:	2200      	movcs	r2, #0
 800c494:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c498:	f1a5 0608 	subcc.w	r6, r5, #8
 800c49c:	3b0b      	subs	r3, #11
 800c49e:	d012      	beq.n	800c4c6 <__b2d+0x86>
 800c4a0:	f1c3 0520 	rsb	r5, r3, #32
 800c4a4:	fa22 f105 	lsr.w	r1, r2, r5
 800c4a8:	409c      	lsls	r4, r3
 800c4aa:	430c      	orrs	r4, r1
 800c4ac:	42be      	cmp	r6, r7
 800c4ae:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800c4b2:	bf94      	ite	ls
 800c4b4:	2400      	movls	r4, #0
 800c4b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c4ba:	409a      	lsls	r2, r3
 800c4bc:	40ec      	lsrs	r4, r5
 800c4be:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c4c2:	4322      	orrs	r2, r4
 800c4c4:	e7e1      	b.n	800c48a <__b2d+0x4a>
 800c4c6:	ea44 010c 	orr.w	r1, r4, ip
 800c4ca:	e7de      	b.n	800c48a <__b2d+0x4a>
 800c4cc:	3ff00000 	.word	0x3ff00000

0800c4d0 <__d2b>:
 800c4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d2:	2101      	movs	r1, #1
 800c4d4:	4617      	mov	r7, r2
 800c4d6:	461c      	mov	r4, r3
 800c4d8:	9e08      	ldr	r6, [sp, #32]
 800c4da:	f7ff fc25 	bl	800bd28 <_Balloc>
 800c4de:	4605      	mov	r5, r0
 800c4e0:	b930      	cbnz	r0, 800c4f0 <__d2b+0x20>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	f240 310f 	movw	r1, #783	; 0x30f
 800c4e8:	4b22      	ldr	r3, [pc, #136]	; (800c574 <__d2b+0xa4>)
 800c4ea:	4823      	ldr	r0, [pc, #140]	; (800c578 <__d2b+0xa8>)
 800c4ec:	f001 f91a 	bl	800d724 <__assert_func>
 800c4f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c4f4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c4f8:	bb24      	cbnz	r4, 800c544 <__d2b+0x74>
 800c4fa:	2f00      	cmp	r7, #0
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	d026      	beq.n	800c54e <__d2b+0x7e>
 800c500:	4668      	mov	r0, sp
 800c502:	9700      	str	r7, [sp, #0]
 800c504:	f7ff fd22 	bl	800bf4c <__lo0bits>
 800c508:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c50c:	b1e8      	cbz	r0, 800c54a <__d2b+0x7a>
 800c50e:	f1c0 0320 	rsb	r3, r0, #32
 800c512:	fa02 f303 	lsl.w	r3, r2, r3
 800c516:	430b      	orrs	r3, r1
 800c518:	40c2      	lsrs	r2, r0
 800c51a:	616b      	str	r3, [r5, #20]
 800c51c:	9201      	str	r2, [sp, #4]
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	bf14      	ite	ne
 800c524:	2102      	movne	r1, #2
 800c526:	2101      	moveq	r1, #1
 800c528:	61ab      	str	r3, [r5, #24]
 800c52a:	6129      	str	r1, [r5, #16]
 800c52c:	b1bc      	cbz	r4, 800c55e <__d2b+0x8e>
 800c52e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c532:	4404      	add	r4, r0
 800c534:	6034      	str	r4, [r6, #0]
 800c536:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c53c:	6018      	str	r0, [r3, #0]
 800c53e:	4628      	mov	r0, r5
 800c540:	b003      	add	sp, #12
 800c542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c548:	e7d7      	b.n	800c4fa <__d2b+0x2a>
 800c54a:	6169      	str	r1, [r5, #20]
 800c54c:	e7e7      	b.n	800c51e <__d2b+0x4e>
 800c54e:	a801      	add	r0, sp, #4
 800c550:	f7ff fcfc 	bl	800bf4c <__lo0bits>
 800c554:	9b01      	ldr	r3, [sp, #4]
 800c556:	2101      	movs	r1, #1
 800c558:	616b      	str	r3, [r5, #20]
 800c55a:	3020      	adds	r0, #32
 800c55c:	e7e5      	b.n	800c52a <__d2b+0x5a>
 800c55e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c562:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800c566:	6030      	str	r0, [r6, #0]
 800c568:	6918      	ldr	r0, [r3, #16]
 800c56a:	f7ff fccf 	bl	800bf0c <__hi0bits>
 800c56e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c572:	e7e2      	b.n	800c53a <__d2b+0x6a>
 800c574:	0800f64c 	.word	0x0800f64c
 800c578:	0800f65d 	.word	0x0800f65d

0800c57c <__ratio>:
 800c57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	4688      	mov	r8, r1
 800c582:	4669      	mov	r1, sp
 800c584:	4681      	mov	r9, r0
 800c586:	f7ff ff5b 	bl	800c440 <__b2d>
 800c58a:	460f      	mov	r7, r1
 800c58c:	4604      	mov	r4, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	4640      	mov	r0, r8
 800c592:	a901      	add	r1, sp, #4
 800c594:	f7ff ff54 	bl	800c440 <__b2d>
 800c598:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c59c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5a0:	468b      	mov	fp, r1
 800c5a2:	eba3 0c02 	sub.w	ip, r3, r2
 800c5a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5aa:	1a9b      	subs	r3, r3, r2
 800c5ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	bfd5      	itete	le
 800c5b4:	460a      	movle	r2, r1
 800c5b6:	462a      	movgt	r2, r5
 800c5b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c5bc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5c0:	bfd8      	it	le
 800c5c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c5c6:	465b      	mov	r3, fp
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f7f4 f8ad 	bl	800072c <__aeabi_ddiv>
 800c5d2:	b003      	add	sp, #12
 800c5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5d8 <__copybits>:
 800c5d8:	3901      	subs	r1, #1
 800c5da:	b570      	push	{r4, r5, r6, lr}
 800c5dc:	1149      	asrs	r1, r1, #5
 800c5de:	6914      	ldr	r4, [r2, #16]
 800c5e0:	3101      	adds	r1, #1
 800c5e2:	f102 0314 	add.w	r3, r2, #20
 800c5e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c5ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c5ee:	1f05      	subs	r5, r0, #4
 800c5f0:	42a3      	cmp	r3, r4
 800c5f2:	d30c      	bcc.n	800c60e <__copybits+0x36>
 800c5f4:	1aa3      	subs	r3, r4, r2
 800c5f6:	3b11      	subs	r3, #17
 800c5f8:	f023 0303 	bic.w	r3, r3, #3
 800c5fc:	3211      	adds	r2, #17
 800c5fe:	42a2      	cmp	r2, r4
 800c600:	bf88      	it	hi
 800c602:	2300      	movhi	r3, #0
 800c604:	4418      	add	r0, r3
 800c606:	2300      	movs	r3, #0
 800c608:	4288      	cmp	r0, r1
 800c60a:	d305      	bcc.n	800c618 <__copybits+0x40>
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
 800c60e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c612:	f845 6f04 	str.w	r6, [r5, #4]!
 800c616:	e7eb      	b.n	800c5f0 <__copybits+0x18>
 800c618:	f840 3b04 	str.w	r3, [r0], #4
 800c61c:	e7f4      	b.n	800c608 <__copybits+0x30>

0800c61e <__any_on>:
 800c61e:	f100 0214 	add.w	r2, r0, #20
 800c622:	6900      	ldr	r0, [r0, #16]
 800c624:	114b      	asrs	r3, r1, #5
 800c626:	4298      	cmp	r0, r3
 800c628:	b510      	push	{r4, lr}
 800c62a:	db11      	blt.n	800c650 <__any_on+0x32>
 800c62c:	dd0a      	ble.n	800c644 <__any_on+0x26>
 800c62e:	f011 011f 	ands.w	r1, r1, #31
 800c632:	d007      	beq.n	800c644 <__any_on+0x26>
 800c634:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c638:	fa24 f001 	lsr.w	r0, r4, r1
 800c63c:	fa00 f101 	lsl.w	r1, r0, r1
 800c640:	428c      	cmp	r4, r1
 800c642:	d10b      	bne.n	800c65c <__any_on+0x3e>
 800c644:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c648:	4293      	cmp	r3, r2
 800c64a:	d803      	bhi.n	800c654 <__any_on+0x36>
 800c64c:	2000      	movs	r0, #0
 800c64e:	bd10      	pop	{r4, pc}
 800c650:	4603      	mov	r3, r0
 800c652:	e7f7      	b.n	800c644 <__any_on+0x26>
 800c654:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c658:	2900      	cmp	r1, #0
 800c65a:	d0f5      	beq.n	800c648 <__any_on+0x2a>
 800c65c:	2001      	movs	r0, #1
 800c65e:	e7f6      	b.n	800c64e <__any_on+0x30>

0800c660 <sulp>:
 800c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c664:	460f      	mov	r7, r1
 800c666:	4690      	mov	r8, r2
 800c668:	f7ff feca 	bl	800c400 <__ulp>
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	f1b8 0f00 	cmp.w	r8, #0
 800c674:	d011      	beq.n	800c69a <sulp+0x3a>
 800c676:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c67a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c67e:	2b00      	cmp	r3, #0
 800c680:	dd0b      	ble.n	800c69a <sulp+0x3a>
 800c682:	2400      	movs	r4, #0
 800c684:	051b      	lsls	r3, r3, #20
 800c686:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c68a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c68e:	4622      	mov	r2, r4
 800c690:	462b      	mov	r3, r5
 800c692:	f7f3 ff21 	bl	80004d8 <__aeabi_dmul>
 800c696:	4604      	mov	r4, r0
 800c698:	460d      	mov	r5, r1
 800c69a:	4620      	mov	r0, r4
 800c69c:	4629      	mov	r1, r5
 800c69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a2:	0000      	movs	r0, r0
 800c6a4:	0000      	movs	r0, r0
	...

0800c6a8 <_strtod_l>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	b09f      	sub	sp, #124	; 0x7c
 800c6ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	921a      	str	r2, [sp, #104]	; 0x68
 800c6b6:	460d      	mov	r5, r1
 800c6b8:	f04f 0800 	mov.w	r8, #0
 800c6bc:	f04f 0900 	mov.w	r9, #0
 800c6c0:	460a      	mov	r2, r1
 800c6c2:	9219      	str	r2, [sp, #100]	; 0x64
 800c6c4:	7811      	ldrb	r1, [r2, #0]
 800c6c6:	292b      	cmp	r1, #43	; 0x2b
 800c6c8:	d04a      	beq.n	800c760 <_strtod_l+0xb8>
 800c6ca:	d838      	bhi.n	800c73e <_strtod_l+0x96>
 800c6cc:	290d      	cmp	r1, #13
 800c6ce:	d832      	bhi.n	800c736 <_strtod_l+0x8e>
 800c6d0:	2908      	cmp	r1, #8
 800c6d2:	d832      	bhi.n	800c73a <_strtod_l+0x92>
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	d03b      	beq.n	800c750 <_strtod_l+0xa8>
 800c6d8:	2200      	movs	r2, #0
 800c6da:	920e      	str	r2, [sp, #56]	; 0x38
 800c6dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c6de:	7832      	ldrb	r2, [r6, #0]
 800c6e0:	2a30      	cmp	r2, #48	; 0x30
 800c6e2:	f040 80b2 	bne.w	800c84a <_strtod_l+0x1a2>
 800c6e6:	7872      	ldrb	r2, [r6, #1]
 800c6e8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c6ec:	2a58      	cmp	r2, #88	; 0x58
 800c6ee:	d16e      	bne.n	800c7ce <_strtod_l+0x126>
 800c6f0:	9302      	str	r3, [sp, #8]
 800c6f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	ab1a      	add	r3, sp, #104	; 0x68
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	4a8c      	ldr	r2, [pc, #560]	; (800c930 <_strtod_l+0x288>)
 800c6fe:	ab1b      	add	r3, sp, #108	; 0x6c
 800c700:	a919      	add	r1, sp, #100	; 0x64
 800c702:	f001 f8a9 	bl	800d858 <__gethex>
 800c706:	f010 070f 	ands.w	r7, r0, #15
 800c70a:	4605      	mov	r5, r0
 800c70c:	d005      	beq.n	800c71a <_strtod_l+0x72>
 800c70e:	2f06      	cmp	r7, #6
 800c710:	d128      	bne.n	800c764 <_strtod_l+0xbc>
 800c712:	2300      	movs	r3, #0
 800c714:	3601      	adds	r6, #1
 800c716:	9619      	str	r6, [sp, #100]	; 0x64
 800c718:	930e      	str	r3, [sp, #56]	; 0x38
 800c71a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f040 85a0 	bne.w	800d262 <_strtod_l+0xbba>
 800c722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c724:	b1cb      	cbz	r3, 800c75a <_strtod_l+0xb2>
 800c726:	4642      	mov	r2, r8
 800c728:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c72c:	4610      	mov	r0, r2
 800c72e:	4619      	mov	r1, r3
 800c730:	b01f      	add	sp, #124	; 0x7c
 800c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c736:	2920      	cmp	r1, #32
 800c738:	d1ce      	bne.n	800c6d8 <_strtod_l+0x30>
 800c73a:	3201      	adds	r2, #1
 800c73c:	e7c1      	b.n	800c6c2 <_strtod_l+0x1a>
 800c73e:	292d      	cmp	r1, #45	; 0x2d
 800c740:	d1ca      	bne.n	800c6d8 <_strtod_l+0x30>
 800c742:	2101      	movs	r1, #1
 800c744:	910e      	str	r1, [sp, #56]	; 0x38
 800c746:	1c51      	adds	r1, r2, #1
 800c748:	9119      	str	r1, [sp, #100]	; 0x64
 800c74a:	7852      	ldrb	r2, [r2, #1]
 800c74c:	2a00      	cmp	r2, #0
 800c74e:	d1c5      	bne.n	800c6dc <_strtod_l+0x34>
 800c750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c752:	9519      	str	r5, [sp, #100]	; 0x64
 800c754:	2b00      	cmp	r3, #0
 800c756:	f040 8582 	bne.w	800d25e <_strtod_l+0xbb6>
 800c75a:	4642      	mov	r2, r8
 800c75c:	464b      	mov	r3, r9
 800c75e:	e7e5      	b.n	800c72c <_strtod_l+0x84>
 800c760:	2100      	movs	r1, #0
 800c762:	e7ef      	b.n	800c744 <_strtod_l+0x9c>
 800c764:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c766:	b13a      	cbz	r2, 800c778 <_strtod_l+0xd0>
 800c768:	2135      	movs	r1, #53	; 0x35
 800c76a:	a81c      	add	r0, sp, #112	; 0x70
 800c76c:	f7ff ff34 	bl	800c5d8 <__copybits>
 800c770:	4620      	mov	r0, r4
 800c772:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c774:	f7ff fb18 	bl	800bda8 <_Bfree>
 800c778:	3f01      	subs	r7, #1
 800c77a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c77c:	2f04      	cmp	r7, #4
 800c77e:	d806      	bhi.n	800c78e <_strtod_l+0xe6>
 800c780:	e8df f007 	tbb	[pc, r7]
 800c784:	201d0314 	.word	0x201d0314
 800c788:	14          	.byte	0x14
 800c789:	00          	.byte	0x00
 800c78a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800c78e:	05e9      	lsls	r1, r5, #23
 800c790:	bf48      	it	mi
 800c792:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c796:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c79a:	0d1b      	lsrs	r3, r3, #20
 800c79c:	051b      	lsls	r3, r3, #20
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1bb      	bne.n	800c71a <_strtod_l+0x72>
 800c7a2:	f7fe fb09 	bl	800adb8 <__errno>
 800c7a6:	2322      	movs	r3, #34	; 0x22
 800c7a8:	6003      	str	r3, [r0, #0]
 800c7aa:	e7b6      	b.n	800c71a <_strtod_l+0x72>
 800c7ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c7b0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800c7b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c7b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c7bc:	e7e7      	b.n	800c78e <_strtod_l+0xe6>
 800c7be:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c934 <_strtod_l+0x28c>
 800c7c2:	e7e4      	b.n	800c78e <_strtod_l+0xe6>
 800c7c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c7c8:	f04f 38ff 	mov.w	r8, #4294967295
 800c7cc:	e7df      	b.n	800c78e <_strtod_l+0xe6>
 800c7ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7d0:	1c5a      	adds	r2, r3, #1
 800c7d2:	9219      	str	r2, [sp, #100]	; 0x64
 800c7d4:	785b      	ldrb	r3, [r3, #1]
 800c7d6:	2b30      	cmp	r3, #48	; 0x30
 800c7d8:	d0f9      	beq.n	800c7ce <_strtod_l+0x126>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d09d      	beq.n	800c71a <_strtod_l+0x72>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	f04f 0a00 	mov.w	sl, #0
 800c7e4:	220a      	movs	r2, #10
 800c7e6:	46d3      	mov	fp, sl
 800c7e8:	9305      	str	r3, [sp, #20]
 800c7ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7ec:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800c7f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c7f4:	7806      	ldrb	r6, [r0, #0]
 800c7f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c7fa:	b2d9      	uxtb	r1, r3
 800c7fc:	2909      	cmp	r1, #9
 800c7fe:	d926      	bls.n	800c84e <_strtod_l+0x1a6>
 800c800:	2201      	movs	r2, #1
 800c802:	494d      	ldr	r1, [pc, #308]	; (800c938 <_strtod_l+0x290>)
 800c804:	f000 ff66 	bl	800d6d4 <strncmp>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d030      	beq.n	800c86e <_strtod_l+0x1c6>
 800c80c:	2000      	movs	r0, #0
 800c80e:	4632      	mov	r2, r6
 800c810:	4603      	mov	r3, r0
 800c812:	465e      	mov	r6, fp
 800c814:	9008      	str	r0, [sp, #32]
 800c816:	2a65      	cmp	r2, #101	; 0x65
 800c818:	d001      	beq.n	800c81e <_strtod_l+0x176>
 800c81a:	2a45      	cmp	r2, #69	; 0x45
 800c81c:	d113      	bne.n	800c846 <_strtod_l+0x19e>
 800c81e:	b91e      	cbnz	r6, 800c828 <_strtod_l+0x180>
 800c820:	9a05      	ldr	r2, [sp, #20]
 800c822:	4302      	orrs	r2, r0
 800c824:	d094      	beq.n	800c750 <_strtod_l+0xa8>
 800c826:	2600      	movs	r6, #0
 800c828:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c82a:	1c6a      	adds	r2, r5, #1
 800c82c:	9219      	str	r2, [sp, #100]	; 0x64
 800c82e:	786a      	ldrb	r2, [r5, #1]
 800c830:	2a2b      	cmp	r2, #43	; 0x2b
 800c832:	d074      	beq.n	800c91e <_strtod_l+0x276>
 800c834:	2a2d      	cmp	r2, #45	; 0x2d
 800c836:	d078      	beq.n	800c92a <_strtod_l+0x282>
 800c838:	f04f 0c00 	mov.w	ip, #0
 800c83c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c840:	2909      	cmp	r1, #9
 800c842:	d97f      	bls.n	800c944 <_strtod_l+0x29c>
 800c844:	9519      	str	r5, [sp, #100]	; 0x64
 800c846:	2700      	movs	r7, #0
 800c848:	e09e      	b.n	800c988 <_strtod_l+0x2e0>
 800c84a:	2300      	movs	r3, #0
 800c84c:	e7c8      	b.n	800c7e0 <_strtod_l+0x138>
 800c84e:	f1bb 0f08 	cmp.w	fp, #8
 800c852:	bfd8      	it	le
 800c854:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800c856:	f100 0001 	add.w	r0, r0, #1
 800c85a:	bfd6      	itet	le
 800c85c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c860:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c864:	930a      	strle	r3, [sp, #40]	; 0x28
 800c866:	f10b 0b01 	add.w	fp, fp, #1
 800c86a:	9019      	str	r0, [sp, #100]	; 0x64
 800c86c:	e7c1      	b.n	800c7f2 <_strtod_l+0x14a>
 800c86e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	9219      	str	r2, [sp, #100]	; 0x64
 800c874:	785a      	ldrb	r2, [r3, #1]
 800c876:	f1bb 0f00 	cmp.w	fp, #0
 800c87a:	d037      	beq.n	800c8ec <_strtod_l+0x244>
 800c87c:	465e      	mov	r6, fp
 800c87e:	9008      	str	r0, [sp, #32]
 800c880:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c884:	2b09      	cmp	r3, #9
 800c886:	d912      	bls.n	800c8ae <_strtod_l+0x206>
 800c888:	2301      	movs	r3, #1
 800c88a:	e7c4      	b.n	800c816 <_strtod_l+0x16e>
 800c88c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c88e:	3001      	adds	r0, #1
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	9219      	str	r2, [sp, #100]	; 0x64
 800c894:	785a      	ldrb	r2, [r3, #1]
 800c896:	2a30      	cmp	r2, #48	; 0x30
 800c898:	d0f8      	beq.n	800c88c <_strtod_l+0x1e4>
 800c89a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c89e:	2b08      	cmp	r3, #8
 800c8a0:	f200 84e4 	bhi.w	800d26c <_strtod_l+0xbc4>
 800c8a4:	9008      	str	r0, [sp, #32]
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c8ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8ae:	3a30      	subs	r2, #48	; 0x30
 800c8b0:	f100 0301 	add.w	r3, r0, #1
 800c8b4:	d014      	beq.n	800c8e0 <_strtod_l+0x238>
 800c8b6:	9908      	ldr	r1, [sp, #32]
 800c8b8:	eb00 0c06 	add.w	ip, r0, r6
 800c8bc:	4419      	add	r1, r3
 800c8be:	9108      	str	r1, [sp, #32]
 800c8c0:	4633      	mov	r3, r6
 800c8c2:	210a      	movs	r1, #10
 800c8c4:	4563      	cmp	r3, ip
 800c8c6:	d113      	bne.n	800c8f0 <_strtod_l+0x248>
 800c8c8:	1833      	adds	r3, r6, r0
 800c8ca:	2b08      	cmp	r3, #8
 800c8cc:	f106 0601 	add.w	r6, r6, #1
 800c8d0:	4406      	add	r6, r0
 800c8d2:	dc1a      	bgt.n	800c90a <_strtod_l+0x262>
 800c8d4:	230a      	movs	r3, #10
 800c8d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c8d8:	fb03 2301 	mla	r3, r3, r1, r2
 800c8dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c8de:	2300      	movs	r3, #0
 800c8e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	1c51      	adds	r1, r2, #1
 800c8e6:	9119      	str	r1, [sp, #100]	; 0x64
 800c8e8:	7852      	ldrb	r2, [r2, #1]
 800c8ea:	e7c9      	b.n	800c880 <_strtod_l+0x1d8>
 800c8ec:	4658      	mov	r0, fp
 800c8ee:	e7d2      	b.n	800c896 <_strtod_l+0x1ee>
 800c8f0:	2b08      	cmp	r3, #8
 800c8f2:	f103 0301 	add.w	r3, r3, #1
 800c8f6:	dc03      	bgt.n	800c900 <_strtod_l+0x258>
 800c8f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c8fa:	434f      	muls	r7, r1
 800c8fc:	970a      	str	r7, [sp, #40]	; 0x28
 800c8fe:	e7e1      	b.n	800c8c4 <_strtod_l+0x21c>
 800c900:	2b10      	cmp	r3, #16
 800c902:	bfd8      	it	le
 800c904:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c908:	e7dc      	b.n	800c8c4 <_strtod_l+0x21c>
 800c90a:	2e10      	cmp	r6, #16
 800c90c:	bfdc      	itt	le
 800c90e:	230a      	movle	r3, #10
 800c910:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c914:	e7e3      	b.n	800c8de <_strtod_l+0x236>
 800c916:	2300      	movs	r3, #0
 800c918:	9308      	str	r3, [sp, #32]
 800c91a:	2301      	movs	r3, #1
 800c91c:	e780      	b.n	800c820 <_strtod_l+0x178>
 800c91e:	f04f 0c00 	mov.w	ip, #0
 800c922:	1caa      	adds	r2, r5, #2
 800c924:	9219      	str	r2, [sp, #100]	; 0x64
 800c926:	78aa      	ldrb	r2, [r5, #2]
 800c928:	e788      	b.n	800c83c <_strtod_l+0x194>
 800c92a:	f04f 0c01 	mov.w	ip, #1
 800c92e:	e7f8      	b.n	800c922 <_strtod_l+0x27a>
 800c930:	0800f7b8 	.word	0x0800f7b8
 800c934:	7ff00000 	.word	0x7ff00000
 800c938:	0800f7b4 	.word	0x0800f7b4
 800c93c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c93e:	1c51      	adds	r1, r2, #1
 800c940:	9119      	str	r1, [sp, #100]	; 0x64
 800c942:	7852      	ldrb	r2, [r2, #1]
 800c944:	2a30      	cmp	r2, #48	; 0x30
 800c946:	d0f9      	beq.n	800c93c <_strtod_l+0x294>
 800c948:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c94c:	2908      	cmp	r1, #8
 800c94e:	f63f af7a 	bhi.w	800c846 <_strtod_l+0x19e>
 800c952:	3a30      	subs	r2, #48	; 0x30
 800c954:	9209      	str	r2, [sp, #36]	; 0x24
 800c956:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c958:	920c      	str	r2, [sp, #48]	; 0x30
 800c95a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c95c:	1c57      	adds	r7, r2, #1
 800c95e:	9719      	str	r7, [sp, #100]	; 0x64
 800c960:	7852      	ldrb	r2, [r2, #1]
 800c962:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c966:	f1be 0f09 	cmp.w	lr, #9
 800c96a:	d938      	bls.n	800c9de <_strtod_l+0x336>
 800c96c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c96e:	1a7f      	subs	r7, r7, r1
 800c970:	2f08      	cmp	r7, #8
 800c972:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c976:	dc03      	bgt.n	800c980 <_strtod_l+0x2d8>
 800c978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c97a:	428f      	cmp	r7, r1
 800c97c:	bfa8      	it	ge
 800c97e:	460f      	movge	r7, r1
 800c980:	f1bc 0f00 	cmp.w	ip, #0
 800c984:	d000      	beq.n	800c988 <_strtod_l+0x2e0>
 800c986:	427f      	negs	r7, r7
 800c988:	2e00      	cmp	r6, #0
 800c98a:	d14f      	bne.n	800ca2c <_strtod_l+0x384>
 800c98c:	9905      	ldr	r1, [sp, #20]
 800c98e:	4301      	orrs	r1, r0
 800c990:	f47f aec3 	bne.w	800c71a <_strtod_l+0x72>
 800c994:	2b00      	cmp	r3, #0
 800c996:	f47f aedb 	bne.w	800c750 <_strtod_l+0xa8>
 800c99a:	2a69      	cmp	r2, #105	; 0x69
 800c99c:	d029      	beq.n	800c9f2 <_strtod_l+0x34a>
 800c99e:	dc26      	bgt.n	800c9ee <_strtod_l+0x346>
 800c9a0:	2a49      	cmp	r2, #73	; 0x49
 800c9a2:	d026      	beq.n	800c9f2 <_strtod_l+0x34a>
 800c9a4:	2a4e      	cmp	r2, #78	; 0x4e
 800c9a6:	f47f aed3 	bne.w	800c750 <_strtod_l+0xa8>
 800c9aa:	499a      	ldr	r1, [pc, #616]	; (800cc14 <_strtod_l+0x56c>)
 800c9ac:	a819      	add	r0, sp, #100	; 0x64
 800c9ae:	f001 f995 	bl	800dcdc <__match>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	f43f aecc 	beq.w	800c750 <_strtod_l+0xa8>
 800c9b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b28      	cmp	r3, #40	; 0x28
 800c9be:	d12f      	bne.n	800ca20 <_strtod_l+0x378>
 800c9c0:	4995      	ldr	r1, [pc, #596]	; (800cc18 <_strtod_l+0x570>)
 800c9c2:	aa1c      	add	r2, sp, #112	; 0x70
 800c9c4:	a819      	add	r0, sp, #100	; 0x64
 800c9c6:	f001 f99d 	bl	800dd04 <__hexnan>
 800c9ca:	2805      	cmp	r0, #5
 800c9cc:	d128      	bne.n	800ca20 <_strtod_l+0x378>
 800c9ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800c9d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c9d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c9dc:	e69d      	b.n	800c71a <_strtod_l+0x72>
 800c9de:	210a      	movs	r1, #10
 800c9e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c9e2:	fb01 2107 	mla	r1, r1, r7, r2
 800c9e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c9ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c9ec:	e7b5      	b.n	800c95a <_strtod_l+0x2b2>
 800c9ee:	2a6e      	cmp	r2, #110	; 0x6e
 800c9f0:	e7d9      	b.n	800c9a6 <_strtod_l+0x2fe>
 800c9f2:	498a      	ldr	r1, [pc, #552]	; (800cc1c <_strtod_l+0x574>)
 800c9f4:	a819      	add	r0, sp, #100	; 0x64
 800c9f6:	f001 f971 	bl	800dcdc <__match>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	f43f aea8 	beq.w	800c750 <_strtod_l+0xa8>
 800ca00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca02:	4987      	ldr	r1, [pc, #540]	; (800cc20 <_strtod_l+0x578>)
 800ca04:	3b01      	subs	r3, #1
 800ca06:	a819      	add	r0, sp, #100	; 0x64
 800ca08:	9319      	str	r3, [sp, #100]	; 0x64
 800ca0a:	f001 f967 	bl	800dcdc <__match>
 800ca0e:	b910      	cbnz	r0, 800ca16 <_strtod_l+0x36e>
 800ca10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca12:	3301      	adds	r3, #1
 800ca14:	9319      	str	r3, [sp, #100]	; 0x64
 800ca16:	f04f 0800 	mov.w	r8, #0
 800ca1a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800cc24 <_strtod_l+0x57c>
 800ca1e:	e67c      	b.n	800c71a <_strtod_l+0x72>
 800ca20:	4881      	ldr	r0, [pc, #516]	; (800cc28 <_strtod_l+0x580>)
 800ca22:	f000 fe79 	bl	800d718 <nan>
 800ca26:	4680      	mov	r8, r0
 800ca28:	4689      	mov	r9, r1
 800ca2a:	e676      	b.n	800c71a <_strtod_l+0x72>
 800ca2c:	9b08      	ldr	r3, [sp, #32]
 800ca2e:	f1bb 0f00 	cmp.w	fp, #0
 800ca32:	bf08      	it	eq
 800ca34:	46b3      	moveq	fp, r6
 800ca36:	1afb      	subs	r3, r7, r3
 800ca38:	2e10      	cmp	r6, #16
 800ca3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca3c:	4635      	mov	r5, r6
 800ca3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca40:	bfa8      	it	ge
 800ca42:	2510      	movge	r5, #16
 800ca44:	f7f3 fcce 	bl	80003e4 <__aeabi_ui2d>
 800ca48:	2e09      	cmp	r6, #9
 800ca4a:	4680      	mov	r8, r0
 800ca4c:	4689      	mov	r9, r1
 800ca4e:	dd13      	ble.n	800ca78 <_strtod_l+0x3d0>
 800ca50:	4b76      	ldr	r3, [pc, #472]	; (800cc2c <_strtod_l+0x584>)
 800ca52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ca56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ca5a:	f7f3 fd3d 	bl	80004d8 <__aeabi_dmul>
 800ca5e:	4680      	mov	r8, r0
 800ca60:	4650      	mov	r0, sl
 800ca62:	4689      	mov	r9, r1
 800ca64:	f7f3 fcbe 	bl	80003e4 <__aeabi_ui2d>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	4649      	mov	r1, r9
 800ca70:	f7f3 fb7c 	bl	800016c <__adddf3>
 800ca74:	4680      	mov	r8, r0
 800ca76:	4689      	mov	r9, r1
 800ca78:	2e0f      	cmp	r6, #15
 800ca7a:	dc36      	bgt.n	800caea <_strtod_l+0x442>
 800ca7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f43f ae4b 	beq.w	800c71a <_strtod_l+0x72>
 800ca84:	dd22      	ble.n	800cacc <_strtod_l+0x424>
 800ca86:	2b16      	cmp	r3, #22
 800ca88:	dc09      	bgt.n	800ca9e <_strtod_l+0x3f6>
 800ca8a:	4968      	ldr	r1, [pc, #416]	; (800cc2c <_strtod_l+0x584>)
 800ca8c:	4642      	mov	r2, r8
 800ca8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca92:	464b      	mov	r3, r9
 800ca94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca98:	f7f3 fd1e 	bl	80004d8 <__aeabi_dmul>
 800ca9c:	e7c3      	b.n	800ca26 <_strtod_l+0x37e>
 800ca9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caa0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800caa4:	4293      	cmp	r3, r2
 800caa6:	db20      	blt.n	800caea <_strtod_l+0x442>
 800caa8:	4c60      	ldr	r4, [pc, #384]	; (800cc2c <_strtod_l+0x584>)
 800caaa:	f1c6 060f 	rsb	r6, r6, #15
 800caae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800cab2:	4642      	mov	r2, r8
 800cab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cab8:	464b      	mov	r3, r9
 800caba:	f7f3 fd0d 	bl	80004d8 <__aeabi_dmul>
 800cabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac0:	1b9e      	subs	r6, r3, r6
 800cac2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800cac6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800caca:	e7e5      	b.n	800ca98 <_strtod_l+0x3f0>
 800cacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cace:	3316      	adds	r3, #22
 800cad0:	db0b      	blt.n	800caea <_strtod_l+0x442>
 800cad2:	9b08      	ldr	r3, [sp, #32]
 800cad4:	4640      	mov	r0, r8
 800cad6:	1bdf      	subs	r7, r3, r7
 800cad8:	4b54      	ldr	r3, [pc, #336]	; (800cc2c <_strtod_l+0x584>)
 800cada:	4649      	mov	r1, r9
 800cadc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae4:	f7f3 fe22 	bl	800072c <__aeabi_ddiv>
 800cae8:	e79d      	b.n	800ca26 <_strtod_l+0x37e>
 800caea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caec:	1b75      	subs	r5, r6, r5
 800caee:	441d      	add	r5, r3
 800caf0:	2d00      	cmp	r5, #0
 800caf2:	dd70      	ble.n	800cbd6 <_strtod_l+0x52e>
 800caf4:	f015 030f 	ands.w	r3, r5, #15
 800caf8:	d00a      	beq.n	800cb10 <_strtod_l+0x468>
 800cafa:	494c      	ldr	r1, [pc, #304]	; (800cc2c <_strtod_l+0x584>)
 800cafc:	4642      	mov	r2, r8
 800cafe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb06:	464b      	mov	r3, r9
 800cb08:	f7f3 fce6 	bl	80004d8 <__aeabi_dmul>
 800cb0c:	4680      	mov	r8, r0
 800cb0e:	4689      	mov	r9, r1
 800cb10:	f035 050f 	bics.w	r5, r5, #15
 800cb14:	d04d      	beq.n	800cbb2 <_strtod_l+0x50a>
 800cb16:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800cb1a:	dd22      	ble.n	800cb62 <_strtod_l+0x4ba>
 800cb1c:	2600      	movs	r6, #0
 800cb1e:	46b3      	mov	fp, r6
 800cb20:	960b      	str	r6, [sp, #44]	; 0x2c
 800cb22:	9608      	str	r6, [sp, #32]
 800cb24:	2322      	movs	r3, #34	; 0x22
 800cb26:	f04f 0800 	mov.w	r8, #0
 800cb2a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800cc24 <_strtod_l+0x57c>
 800cb2e:	6023      	str	r3, [r4, #0]
 800cb30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f43f adf1 	beq.w	800c71a <_strtod_l+0x72>
 800cb38:	4620      	mov	r0, r4
 800cb3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cb3c:	f7ff f934 	bl	800bda8 <_Bfree>
 800cb40:	4620      	mov	r0, r4
 800cb42:	9908      	ldr	r1, [sp, #32]
 800cb44:	f7ff f930 	bl	800bda8 <_Bfree>
 800cb48:	4659      	mov	r1, fp
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f7ff f92c 	bl	800bda8 <_Bfree>
 800cb50:	4620      	mov	r0, r4
 800cb52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb54:	f7ff f928 	bl	800bda8 <_Bfree>
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f7ff f924 	bl	800bda8 <_Bfree>
 800cb60:	e5db      	b.n	800c71a <_strtod_l+0x72>
 800cb62:	4b33      	ldr	r3, [pc, #204]	; (800cc30 <_strtod_l+0x588>)
 800cb64:	4640      	mov	r0, r8
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	469a      	mov	sl, r3
 800cb6e:	112d      	asrs	r5, r5, #4
 800cb70:	2d01      	cmp	r5, #1
 800cb72:	dc21      	bgt.n	800cbb8 <_strtod_l+0x510>
 800cb74:	b10b      	cbz	r3, 800cb7a <_strtod_l+0x4d2>
 800cb76:	4680      	mov	r8, r0
 800cb78:	4689      	mov	r9, r1
 800cb7a:	492d      	ldr	r1, [pc, #180]	; (800cc30 <_strtod_l+0x588>)
 800cb7c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cb80:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cb84:	4642      	mov	r2, r8
 800cb86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb8a:	464b      	mov	r3, r9
 800cb8c:	f7f3 fca4 	bl	80004d8 <__aeabi_dmul>
 800cb90:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <_strtod_l+0x57c>)
 800cb92:	460a      	mov	r2, r1
 800cb94:	400b      	ands	r3, r1
 800cb96:	4927      	ldr	r1, [pc, #156]	; (800cc34 <_strtod_l+0x58c>)
 800cb98:	4680      	mov	r8, r0
 800cb9a:	428b      	cmp	r3, r1
 800cb9c:	d8be      	bhi.n	800cb1c <_strtod_l+0x474>
 800cb9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cba2:	428b      	cmp	r3, r1
 800cba4:	bf86      	itte	hi
 800cba6:	f04f 38ff 	movhi.w	r8, #4294967295
 800cbaa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800cc38 <_strtod_l+0x590>
 800cbae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9305      	str	r3, [sp, #20]
 800cbb6:	e07b      	b.n	800ccb0 <_strtod_l+0x608>
 800cbb8:	07ea      	lsls	r2, r5, #31
 800cbba:	d505      	bpl.n	800cbc8 <_strtod_l+0x520>
 800cbbc:	9b05      	ldr	r3, [sp, #20]
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fc89 	bl	80004d8 <__aeabi_dmul>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	9a05      	ldr	r2, [sp, #20]
 800cbca:	f10a 0a01 	add.w	sl, sl, #1
 800cbce:	3208      	adds	r2, #8
 800cbd0:	106d      	asrs	r5, r5, #1
 800cbd2:	9205      	str	r2, [sp, #20]
 800cbd4:	e7cc      	b.n	800cb70 <_strtod_l+0x4c8>
 800cbd6:	d0ec      	beq.n	800cbb2 <_strtod_l+0x50a>
 800cbd8:	426d      	negs	r5, r5
 800cbda:	f015 020f 	ands.w	r2, r5, #15
 800cbde:	d00a      	beq.n	800cbf6 <_strtod_l+0x54e>
 800cbe0:	4b12      	ldr	r3, [pc, #72]	; (800cc2c <_strtod_l+0x584>)
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbe8:	4649      	mov	r1, r9
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f7f3 fd9d 	bl	800072c <__aeabi_ddiv>
 800cbf2:	4680      	mov	r8, r0
 800cbf4:	4689      	mov	r9, r1
 800cbf6:	112d      	asrs	r5, r5, #4
 800cbf8:	d0db      	beq.n	800cbb2 <_strtod_l+0x50a>
 800cbfa:	2d1f      	cmp	r5, #31
 800cbfc:	dd1e      	ble.n	800cc3c <_strtod_l+0x594>
 800cbfe:	2600      	movs	r6, #0
 800cc00:	46b3      	mov	fp, r6
 800cc02:	960b      	str	r6, [sp, #44]	; 0x2c
 800cc04:	9608      	str	r6, [sp, #32]
 800cc06:	2322      	movs	r3, #34	; 0x22
 800cc08:	f04f 0800 	mov.w	r8, #0
 800cc0c:	f04f 0900 	mov.w	r9, #0
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	e78d      	b.n	800cb30 <_strtod_l+0x488>
 800cc14:	0800f5a4 	.word	0x0800f5a4
 800cc18:	0800f7cc 	.word	0x0800f7cc
 800cc1c:	0800f59c 	.word	0x0800f59c
 800cc20:	0800f5d3 	.word	0x0800f5d3
 800cc24:	7ff00000 	.word	0x7ff00000
 800cc28:	0800f85c 	.word	0x0800f85c
 800cc2c:	0800f6e0 	.word	0x0800f6e0
 800cc30:	0800f6b8 	.word	0x0800f6b8
 800cc34:	7ca00000 	.word	0x7ca00000
 800cc38:	7fefffff 	.word	0x7fefffff
 800cc3c:	f015 0310 	ands.w	r3, r5, #16
 800cc40:	bf18      	it	ne
 800cc42:	236a      	movne	r3, #106	; 0x6a
 800cc44:	4640      	mov	r0, r8
 800cc46:	9305      	str	r3, [sp, #20]
 800cc48:	4649      	mov	r1, r9
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800cf18 <_strtod_l+0x870>
 800cc50:	07ea      	lsls	r2, r5, #31
 800cc52:	d504      	bpl.n	800cc5e <_strtod_l+0x5b6>
 800cc54:	e9da 2300 	ldrd	r2, r3, [sl]
 800cc58:	f7f3 fc3e 	bl	80004d8 <__aeabi_dmul>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	106d      	asrs	r5, r5, #1
 800cc60:	f10a 0a08 	add.w	sl, sl, #8
 800cc64:	d1f4      	bne.n	800cc50 <_strtod_l+0x5a8>
 800cc66:	b10b      	cbz	r3, 800cc6c <_strtod_l+0x5c4>
 800cc68:	4680      	mov	r8, r0
 800cc6a:	4689      	mov	r9, r1
 800cc6c:	9b05      	ldr	r3, [sp, #20]
 800cc6e:	b1bb      	cbz	r3, 800cca0 <_strtod_l+0x5f8>
 800cc70:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800cc74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	4649      	mov	r1, r9
 800cc7c:	dd10      	ble.n	800cca0 <_strtod_l+0x5f8>
 800cc7e:	2b1f      	cmp	r3, #31
 800cc80:	f340 8128 	ble.w	800ced4 <_strtod_l+0x82c>
 800cc84:	2b34      	cmp	r3, #52	; 0x34
 800cc86:	bfd8      	it	le
 800cc88:	f04f 33ff 	movle.w	r3, #4294967295
 800cc8c:	f04f 0800 	mov.w	r8, #0
 800cc90:	bfcf      	iteee	gt
 800cc92:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cc96:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cc9a:	4093      	lslle	r3, r2
 800cc9c:	ea03 0901 	andle.w	r9, r3, r1
 800cca0:	2200      	movs	r2, #0
 800cca2:	2300      	movs	r3, #0
 800cca4:	4640      	mov	r0, r8
 800cca6:	4649      	mov	r1, r9
 800cca8:	f7f3 fe7e 	bl	80009a8 <__aeabi_dcmpeq>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d1a6      	bne.n	800cbfe <_strtod_l+0x556>
 800ccb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb2:	465a      	mov	r2, fp
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	4633      	mov	r3, r6
 800ccba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccbc:	f7ff f8dc 	bl	800be78 <__s2b>
 800ccc0:	900b      	str	r0, [sp, #44]	; 0x2c
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	f43f af2a 	beq.w	800cb1c <_strtod_l+0x474>
 800ccc8:	2600      	movs	r6, #0
 800ccca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cccc:	9b08      	ldr	r3, [sp, #32]
 800ccce:	2a00      	cmp	r2, #0
 800ccd0:	eba3 0307 	sub.w	r3, r3, r7
 800ccd4:	bfa8      	it	ge
 800ccd6:	2300      	movge	r3, #0
 800ccd8:	46b3      	mov	fp, r6
 800ccda:	9312      	str	r3, [sp, #72]	; 0x48
 800ccdc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cce0:	9316      	str	r3, [sp, #88]	; 0x58
 800cce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cce4:	4620      	mov	r0, r4
 800cce6:	6859      	ldr	r1, [r3, #4]
 800cce8:	f7ff f81e 	bl	800bd28 <_Balloc>
 800ccec:	9008      	str	r0, [sp, #32]
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	f43f af18 	beq.w	800cb24 <_strtod_l+0x47c>
 800ccf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccf6:	300c      	adds	r0, #12
 800ccf8:	691a      	ldr	r2, [r3, #16]
 800ccfa:	f103 010c 	add.w	r1, r3, #12
 800ccfe:	3202      	adds	r2, #2
 800cd00:	0092      	lsls	r2, r2, #2
 800cd02:	f7fe f893 	bl	800ae2c <memcpy>
 800cd06:	ab1c      	add	r3, sp, #112	; 0x70
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	ab1b      	add	r3, sp, #108	; 0x6c
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	4642      	mov	r2, r8
 800cd10:	464b      	mov	r3, r9
 800cd12:	4620      	mov	r0, r4
 800cd14:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800cd18:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800cd1c:	f7ff fbd8 	bl	800c4d0 <__d2b>
 800cd20:	901a      	str	r0, [sp, #104]	; 0x68
 800cd22:	2800      	cmp	r0, #0
 800cd24:	f43f aefe 	beq.w	800cb24 <_strtod_l+0x47c>
 800cd28:	2101      	movs	r1, #1
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f7ff f93c 	bl	800bfa8 <__i2b>
 800cd30:	4683      	mov	fp, r0
 800cd32:	2800      	cmp	r0, #0
 800cd34:	f43f aef6 	beq.w	800cb24 <_strtod_l+0x47c>
 800cd38:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cd3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cd3c:	2f00      	cmp	r7, #0
 800cd3e:	bfab      	itete	ge
 800cd40:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800cd42:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800cd44:	eb07 0a03 	addge.w	sl, r7, r3
 800cd48:	1bdd      	sublt	r5, r3, r7
 800cd4a:	9b05      	ldr	r3, [sp, #20]
 800cd4c:	bfa8      	it	ge
 800cd4e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800cd50:	eba7 0703 	sub.w	r7, r7, r3
 800cd54:	4417      	add	r7, r2
 800cd56:	4b71      	ldr	r3, [pc, #452]	; (800cf1c <_strtod_l+0x874>)
 800cd58:	f107 37ff 	add.w	r7, r7, #4294967295
 800cd5c:	bfb8      	it	lt
 800cd5e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800cd62:	429f      	cmp	r7, r3
 800cd64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cd68:	f280 80c7 	bge.w	800cefa <_strtod_l+0x852>
 800cd6c:	1bdb      	subs	r3, r3, r7
 800cd6e:	2b1f      	cmp	r3, #31
 800cd70:	f04f 0101 	mov.w	r1, #1
 800cd74:	eba2 0203 	sub.w	r2, r2, r3
 800cd78:	f300 80b3 	bgt.w	800cee2 <_strtod_l+0x83a>
 800cd7c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd80:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd82:	2300      	movs	r3, #0
 800cd84:	9310      	str	r3, [sp, #64]	; 0x40
 800cd86:	eb0a 0702 	add.w	r7, sl, r2
 800cd8a:	9b05      	ldr	r3, [sp, #20]
 800cd8c:	45ba      	cmp	sl, r7
 800cd8e:	4415      	add	r5, r2
 800cd90:	441d      	add	r5, r3
 800cd92:	4653      	mov	r3, sl
 800cd94:	bfa8      	it	ge
 800cd96:	463b      	movge	r3, r7
 800cd98:	42ab      	cmp	r3, r5
 800cd9a:	bfa8      	it	ge
 800cd9c:	462b      	movge	r3, r5
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	bfc2      	ittt	gt
 800cda2:	1aff      	subgt	r7, r7, r3
 800cda4:	1aed      	subgt	r5, r5, r3
 800cda6:	ebaa 0a03 	subgt.w	sl, sl, r3
 800cdaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	dd17      	ble.n	800cde0 <_strtod_l+0x738>
 800cdb0:	4659      	mov	r1, fp
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f7ff f9b5 	bl	800c124 <__pow5mult>
 800cdba:	4683      	mov	fp, r0
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	f43f aeb1 	beq.w	800cb24 <_strtod_l+0x47c>
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7ff f904 	bl	800bfd4 <__multiply>
 800cdcc:	900a      	str	r0, [sp, #40]	; 0x28
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	f43f aea8 	beq.w	800cb24 <_strtod_l+0x47c>
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cdd8:	f7fe ffe6 	bl	800bda8 <_Bfree>
 800cddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdde:	931a      	str	r3, [sp, #104]	; 0x68
 800cde0:	2f00      	cmp	r7, #0
 800cde2:	f300 808f 	bgt.w	800cf04 <_strtod_l+0x85c>
 800cde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	dd08      	ble.n	800cdfe <_strtod_l+0x756>
 800cdec:	4620      	mov	r0, r4
 800cdee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cdf0:	9908      	ldr	r1, [sp, #32]
 800cdf2:	f7ff f997 	bl	800c124 <__pow5mult>
 800cdf6:	9008      	str	r0, [sp, #32]
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	f43f ae93 	beq.w	800cb24 <_strtod_l+0x47c>
 800cdfe:	2d00      	cmp	r5, #0
 800ce00:	dd08      	ble.n	800ce14 <_strtod_l+0x76c>
 800ce02:	462a      	mov	r2, r5
 800ce04:	4620      	mov	r0, r4
 800ce06:	9908      	ldr	r1, [sp, #32]
 800ce08:	f7ff f9e6 	bl	800c1d8 <__lshift>
 800ce0c:	9008      	str	r0, [sp, #32]
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	f43f ae88 	beq.w	800cb24 <_strtod_l+0x47c>
 800ce14:	f1ba 0f00 	cmp.w	sl, #0
 800ce18:	dd08      	ble.n	800ce2c <_strtod_l+0x784>
 800ce1a:	4659      	mov	r1, fp
 800ce1c:	4652      	mov	r2, sl
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f7ff f9da 	bl	800c1d8 <__lshift>
 800ce24:	4683      	mov	fp, r0
 800ce26:	2800      	cmp	r0, #0
 800ce28:	f43f ae7c 	beq.w	800cb24 <_strtod_l+0x47c>
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	9a08      	ldr	r2, [sp, #32]
 800ce30:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ce32:	f7ff fa59 	bl	800c2e8 <__mdiff>
 800ce36:	4606      	mov	r6, r0
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	f43f ae73 	beq.w	800cb24 <_strtod_l+0x47c>
 800ce3e:	2500      	movs	r5, #0
 800ce40:	68c3      	ldr	r3, [r0, #12]
 800ce42:	4659      	mov	r1, fp
 800ce44:	60c5      	str	r5, [r0, #12]
 800ce46:	930a      	str	r3, [sp, #40]	; 0x28
 800ce48:	f7ff fa32 	bl	800c2b0 <__mcmp>
 800ce4c:	42a8      	cmp	r0, r5
 800ce4e:	da6b      	bge.n	800cf28 <_strtod_l+0x880>
 800ce50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce52:	ea53 0308 	orrs.w	r3, r3, r8
 800ce56:	f040 808f 	bne.w	800cf78 <_strtod_l+0x8d0>
 800ce5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f040 808a 	bne.w	800cf78 <_strtod_l+0x8d0>
 800ce64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce68:	0d1b      	lsrs	r3, r3, #20
 800ce6a:	051b      	lsls	r3, r3, #20
 800ce6c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ce70:	f240 8082 	bls.w	800cf78 <_strtod_l+0x8d0>
 800ce74:	6973      	ldr	r3, [r6, #20]
 800ce76:	b913      	cbnz	r3, 800ce7e <_strtod_l+0x7d6>
 800ce78:	6933      	ldr	r3, [r6, #16]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	dd7c      	ble.n	800cf78 <_strtod_l+0x8d0>
 800ce7e:	4631      	mov	r1, r6
 800ce80:	2201      	movs	r2, #1
 800ce82:	4620      	mov	r0, r4
 800ce84:	f7ff f9a8 	bl	800c1d8 <__lshift>
 800ce88:	4659      	mov	r1, fp
 800ce8a:	4606      	mov	r6, r0
 800ce8c:	f7ff fa10 	bl	800c2b0 <__mcmp>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	dd71      	ble.n	800cf78 <_strtod_l+0x8d0>
 800ce94:	9905      	ldr	r1, [sp, #20]
 800ce96:	464b      	mov	r3, r9
 800ce98:	4a21      	ldr	r2, [pc, #132]	; (800cf20 <_strtod_l+0x878>)
 800ce9a:	2900      	cmp	r1, #0
 800ce9c:	f000 808d 	beq.w	800cfba <_strtod_l+0x912>
 800cea0:	ea02 0109 	and.w	r1, r2, r9
 800cea4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cea8:	f300 8087 	bgt.w	800cfba <_strtod_l+0x912>
 800ceac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ceb0:	f77f aea9 	ble.w	800cc06 <_strtod_l+0x55e>
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	4b1a      	ldr	r3, [pc, #104]	; (800cf24 <_strtod_l+0x87c>)
 800ceba:	2200      	movs	r2, #0
 800cebc:	f7f3 fb0c 	bl	80004d8 <__aeabi_dmul>
 800cec0:	4b17      	ldr	r3, [pc, #92]	; (800cf20 <_strtod_l+0x878>)
 800cec2:	4680      	mov	r8, r0
 800cec4:	400b      	ands	r3, r1
 800cec6:	4689      	mov	r9, r1
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f47f ae35 	bne.w	800cb38 <_strtod_l+0x490>
 800cece:	2322      	movs	r3, #34	; 0x22
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	e631      	b.n	800cb38 <_strtod_l+0x490>
 800ced4:	f04f 32ff 	mov.w	r2, #4294967295
 800ced8:	fa02 f303 	lsl.w	r3, r2, r3
 800cedc:	ea03 0808 	and.w	r8, r3, r8
 800cee0:	e6de      	b.n	800cca0 <_strtod_l+0x5f8>
 800cee2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800cee6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800ceea:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800ceee:	37e2      	adds	r7, #226	; 0xe2
 800cef0:	fa01 f307 	lsl.w	r3, r1, r7
 800cef4:	9310      	str	r3, [sp, #64]	; 0x40
 800cef6:	9113      	str	r1, [sp, #76]	; 0x4c
 800cef8:	e745      	b.n	800cd86 <_strtod_l+0x6de>
 800cefa:	2300      	movs	r3, #0
 800cefc:	9310      	str	r3, [sp, #64]	; 0x40
 800cefe:	2301      	movs	r3, #1
 800cf00:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf02:	e740      	b.n	800cd86 <_strtod_l+0x6de>
 800cf04:	463a      	mov	r2, r7
 800cf06:	4620      	mov	r0, r4
 800cf08:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cf0a:	f7ff f965 	bl	800c1d8 <__lshift>
 800cf0e:	901a      	str	r0, [sp, #104]	; 0x68
 800cf10:	2800      	cmp	r0, #0
 800cf12:	f47f af68 	bne.w	800cde6 <_strtod_l+0x73e>
 800cf16:	e605      	b.n	800cb24 <_strtod_l+0x47c>
 800cf18:	0800f7e0 	.word	0x0800f7e0
 800cf1c:	fffffc02 	.word	0xfffffc02
 800cf20:	7ff00000 	.word	0x7ff00000
 800cf24:	39500000 	.word	0x39500000
 800cf28:	46ca      	mov	sl, r9
 800cf2a:	d165      	bne.n	800cff8 <_strtod_l+0x950>
 800cf2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf32:	b352      	cbz	r2, 800cf8a <_strtod_l+0x8e2>
 800cf34:	4a9e      	ldr	r2, [pc, #632]	; (800d1b0 <_strtod_l+0xb08>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d12a      	bne.n	800cf90 <_strtod_l+0x8e8>
 800cf3a:	9b05      	ldr	r3, [sp, #20]
 800cf3c:	4641      	mov	r1, r8
 800cf3e:	b1fb      	cbz	r3, 800cf80 <_strtod_l+0x8d8>
 800cf40:	4b9c      	ldr	r3, [pc, #624]	; (800d1b4 <_strtod_l+0xb0c>)
 800cf42:	f04f 32ff 	mov.w	r2, #4294967295
 800cf46:	ea09 0303 	and.w	r3, r9, r3
 800cf4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cf4e:	d81a      	bhi.n	800cf86 <_strtod_l+0x8de>
 800cf50:	0d1b      	lsrs	r3, r3, #20
 800cf52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf56:	fa02 f303 	lsl.w	r3, r2, r3
 800cf5a:	4299      	cmp	r1, r3
 800cf5c:	d118      	bne.n	800cf90 <_strtod_l+0x8e8>
 800cf5e:	4b96      	ldr	r3, [pc, #600]	; (800d1b8 <_strtod_l+0xb10>)
 800cf60:	459a      	cmp	sl, r3
 800cf62:	d102      	bne.n	800cf6a <_strtod_l+0x8c2>
 800cf64:	3101      	adds	r1, #1
 800cf66:	f43f addd 	beq.w	800cb24 <_strtod_l+0x47c>
 800cf6a:	f04f 0800 	mov.w	r8, #0
 800cf6e:	4b91      	ldr	r3, [pc, #580]	; (800d1b4 <_strtod_l+0xb0c>)
 800cf70:	ea0a 0303 	and.w	r3, sl, r3
 800cf74:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cf78:	9b05      	ldr	r3, [sp, #20]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d19a      	bne.n	800ceb4 <_strtod_l+0x80c>
 800cf7e:	e5db      	b.n	800cb38 <_strtod_l+0x490>
 800cf80:	f04f 33ff 	mov.w	r3, #4294967295
 800cf84:	e7e9      	b.n	800cf5a <_strtod_l+0x8b2>
 800cf86:	4613      	mov	r3, r2
 800cf88:	e7e7      	b.n	800cf5a <_strtod_l+0x8b2>
 800cf8a:	ea53 0308 	orrs.w	r3, r3, r8
 800cf8e:	d081      	beq.n	800ce94 <_strtod_l+0x7ec>
 800cf90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf92:	b1e3      	cbz	r3, 800cfce <_strtod_l+0x926>
 800cf94:	ea13 0f0a 	tst.w	r3, sl
 800cf98:	d0ee      	beq.n	800cf78 <_strtod_l+0x8d0>
 800cf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	9a05      	ldr	r2, [sp, #20]
 800cfa2:	b1c3      	cbz	r3, 800cfd6 <_strtod_l+0x92e>
 800cfa4:	f7ff fb5c 	bl	800c660 <sulp>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cfae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cfb0:	f7f3 f8dc 	bl	800016c <__adddf3>
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	4689      	mov	r9, r1
 800cfb8:	e7de      	b.n	800cf78 <_strtod_l+0x8d0>
 800cfba:	4013      	ands	r3, r2
 800cfbc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cfc0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cfc4:	f04f 38ff 	mov.w	r8, #4294967295
 800cfc8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cfcc:	e7d4      	b.n	800cf78 <_strtod_l+0x8d0>
 800cfce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfd0:	ea13 0f08 	tst.w	r3, r8
 800cfd4:	e7e0      	b.n	800cf98 <_strtod_l+0x8f0>
 800cfd6:	f7ff fb43 	bl	800c660 <sulp>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	460b      	mov	r3, r1
 800cfde:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cfe0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cfe2:	f7f3 f8c1 	bl	8000168 <__aeabi_dsub>
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2300      	movs	r3, #0
 800cfea:	4680      	mov	r8, r0
 800cfec:	4689      	mov	r9, r1
 800cfee:	f7f3 fcdb 	bl	80009a8 <__aeabi_dcmpeq>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d0c0      	beq.n	800cf78 <_strtod_l+0x8d0>
 800cff6:	e606      	b.n	800cc06 <_strtod_l+0x55e>
 800cff8:	4659      	mov	r1, fp
 800cffa:	4630      	mov	r0, r6
 800cffc:	f7ff fabe 	bl	800c57c <__ratio>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d008:	2200      	movs	r2, #0
 800d00a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d00e:	f7f3 fcdf 	bl	80009d0 <__aeabi_dcmple>
 800d012:	2800      	cmp	r0, #0
 800d014:	d06f      	beq.n	800d0f6 <_strtod_l+0xa4e>
 800d016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d17c      	bne.n	800d116 <_strtod_l+0xa6e>
 800d01c:	f1b8 0f00 	cmp.w	r8, #0
 800d020:	d159      	bne.n	800d0d6 <_strtod_l+0xa2e>
 800d022:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d026:	2b00      	cmp	r3, #0
 800d028:	d17b      	bne.n	800d122 <_strtod_l+0xa7a>
 800d02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d02e:	2200      	movs	r2, #0
 800d030:	4b62      	ldr	r3, [pc, #392]	; (800d1bc <_strtod_l+0xb14>)
 800d032:	f7f3 fcc3 	bl	80009bc <__aeabi_dcmplt>
 800d036:	2800      	cmp	r0, #0
 800d038:	d15a      	bne.n	800d0f0 <_strtod_l+0xa48>
 800d03a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d03e:	2200      	movs	r2, #0
 800d040:	4b5f      	ldr	r3, [pc, #380]	; (800d1c0 <_strtod_l+0xb18>)
 800d042:	f7f3 fa49 	bl	80004d8 <__aeabi_dmul>
 800d046:	4605      	mov	r5, r0
 800d048:	460f      	mov	r7, r1
 800d04a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d04e:	9506      	str	r5, [sp, #24]
 800d050:	9307      	str	r3, [sp, #28]
 800d052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d056:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d05a:	4b56      	ldr	r3, [pc, #344]	; (800d1b4 <_strtod_l+0xb0c>)
 800d05c:	4a55      	ldr	r2, [pc, #340]	; (800d1b4 <_strtod_l+0xb0c>)
 800d05e:	ea0a 0303 	and.w	r3, sl, r3
 800d062:	9313      	str	r3, [sp, #76]	; 0x4c
 800d064:	4b57      	ldr	r3, [pc, #348]	; (800d1c4 <_strtod_l+0xb1c>)
 800d066:	ea0a 0202 	and.w	r2, sl, r2
 800d06a:	429a      	cmp	r2, r3
 800d06c:	f040 80b0 	bne.w	800d1d0 <_strtod_l+0xb28>
 800d070:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d074:	4640      	mov	r0, r8
 800d076:	4649      	mov	r1, r9
 800d078:	f7ff f9c2 	bl	800c400 <__ulp>
 800d07c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d080:	f7f3 fa2a 	bl	80004d8 <__aeabi_dmul>
 800d084:	4642      	mov	r2, r8
 800d086:	464b      	mov	r3, r9
 800d088:	f7f3 f870 	bl	800016c <__adddf3>
 800d08c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800d1b4 <_strtod_l+0xb0c>
 800d090:	4a4d      	ldr	r2, [pc, #308]	; (800d1c8 <_strtod_l+0xb20>)
 800d092:	ea01 0a0a 	and.w	sl, r1, sl
 800d096:	4592      	cmp	sl, r2
 800d098:	4680      	mov	r8, r0
 800d09a:	d948      	bls.n	800d12e <_strtod_l+0xa86>
 800d09c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d09e:	4b46      	ldr	r3, [pc, #280]	; (800d1b8 <_strtod_l+0xb10>)
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d103      	bne.n	800d0ac <_strtod_l+0xa04>
 800d0a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	f43f ad3c 	beq.w	800cb24 <_strtod_l+0x47c>
 800d0ac:	f04f 38ff 	mov.w	r8, #4294967295
 800d0b0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800d1b8 <_strtod_l+0xb10>
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d0b8:	f7fe fe76 	bl	800bda8 <_Bfree>
 800d0bc:	4620      	mov	r0, r4
 800d0be:	9908      	ldr	r1, [sp, #32]
 800d0c0:	f7fe fe72 	bl	800bda8 <_Bfree>
 800d0c4:	4659      	mov	r1, fp
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f7fe fe6e 	bl	800bda8 <_Bfree>
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f7fe fe6a 	bl	800bda8 <_Bfree>
 800d0d4:	e605      	b.n	800cce2 <_strtod_l+0x63a>
 800d0d6:	f1b8 0f01 	cmp.w	r8, #1
 800d0da:	d103      	bne.n	800d0e4 <_strtod_l+0xa3c>
 800d0dc:	f1b9 0f00 	cmp.w	r9, #0
 800d0e0:	f43f ad91 	beq.w	800cc06 <_strtod_l+0x55e>
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	4b39      	ldr	r3, [pc, #228]	; (800d1cc <_strtod_l+0xb24>)
 800d0e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d0ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d0ee:	e016      	b.n	800d11e <_strtod_l+0xa76>
 800d0f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d0f2:	4f33      	ldr	r7, [pc, #204]	; (800d1c0 <_strtod_l+0xb18>)
 800d0f4:	e7a9      	b.n	800d04a <_strtod_l+0x9a2>
 800d0f6:	4b32      	ldr	r3, [pc, #200]	; (800d1c0 <_strtod_l+0xb18>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d0fe:	f7f3 f9eb 	bl	80004d8 <__aeabi_dmul>
 800d102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d104:	4605      	mov	r5, r0
 800d106:	460f      	mov	r7, r1
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d09e      	beq.n	800d04a <_strtod_l+0x9a2>
 800d10c:	4602      	mov	r2, r0
 800d10e:	460b      	mov	r3, r1
 800d110:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d114:	e79d      	b.n	800d052 <_strtod_l+0x9aa>
 800d116:	2200      	movs	r2, #0
 800d118:	4b28      	ldr	r3, [pc, #160]	; (800d1bc <_strtod_l+0xb14>)
 800d11a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d11e:	4f27      	ldr	r7, [pc, #156]	; (800d1bc <_strtod_l+0xb14>)
 800d120:	e797      	b.n	800d052 <_strtod_l+0x9aa>
 800d122:	2200      	movs	r2, #0
 800d124:	4b29      	ldr	r3, [pc, #164]	; (800d1cc <_strtod_l+0xb24>)
 800d126:	4645      	mov	r5, r8
 800d128:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d12c:	e7f7      	b.n	800d11e <_strtod_l+0xa76>
 800d12e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800d132:	9b05      	ldr	r3, [sp, #20]
 800d134:	46ca      	mov	sl, r9
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1bc      	bne.n	800d0b4 <_strtod_l+0xa0c>
 800d13a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d13e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d140:	0d1b      	lsrs	r3, r3, #20
 800d142:	051b      	lsls	r3, r3, #20
 800d144:	429a      	cmp	r2, r3
 800d146:	d1b5      	bne.n	800d0b4 <_strtod_l+0xa0c>
 800d148:	4628      	mov	r0, r5
 800d14a:	4639      	mov	r1, r7
 800d14c:	f7f3 ff90 	bl	8001070 <__aeabi_d2lz>
 800d150:	f7f3 f994 	bl	800047c <__aeabi_l2d>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4628      	mov	r0, r5
 800d15a:	4639      	mov	r1, r7
 800d15c:	f7f3 f804 	bl	8000168 <__aeabi_dsub>
 800d160:	460b      	mov	r3, r1
 800d162:	4602      	mov	r2, r0
 800d164:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800d168:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d16e:	ea4a 0a08 	orr.w	sl, sl, r8
 800d172:	ea5a 0a03 	orrs.w	sl, sl, r3
 800d176:	d06c      	beq.n	800d252 <_strtod_l+0xbaa>
 800d178:	a309      	add	r3, pc, #36	; (adr r3, 800d1a0 <_strtod_l+0xaf8>)
 800d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17e:	f7f3 fc1d 	bl	80009bc <__aeabi_dcmplt>
 800d182:	2800      	cmp	r0, #0
 800d184:	f47f acd8 	bne.w	800cb38 <_strtod_l+0x490>
 800d188:	a307      	add	r3, pc, #28	; (adr r3, 800d1a8 <_strtod_l+0xb00>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d192:	f7f3 fc31 	bl	80009f8 <__aeabi_dcmpgt>
 800d196:	2800      	cmp	r0, #0
 800d198:	d08c      	beq.n	800d0b4 <_strtod_l+0xa0c>
 800d19a:	e4cd      	b.n	800cb38 <_strtod_l+0x490>
 800d19c:	f3af 8000 	nop.w
 800d1a0:	94a03595 	.word	0x94a03595
 800d1a4:	3fdfffff 	.word	0x3fdfffff
 800d1a8:	35afe535 	.word	0x35afe535
 800d1ac:	3fe00000 	.word	0x3fe00000
 800d1b0:	000fffff 	.word	0x000fffff
 800d1b4:	7ff00000 	.word	0x7ff00000
 800d1b8:	7fefffff 	.word	0x7fefffff
 800d1bc:	3ff00000 	.word	0x3ff00000
 800d1c0:	3fe00000 	.word	0x3fe00000
 800d1c4:	7fe00000 	.word	0x7fe00000
 800d1c8:	7c9fffff 	.word	0x7c9fffff
 800d1cc:	bff00000 	.word	0xbff00000
 800d1d0:	9b05      	ldr	r3, [sp, #20]
 800d1d2:	b333      	cbz	r3, 800d222 <_strtod_l+0xb7a>
 800d1d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d1da:	d822      	bhi.n	800d222 <_strtod_l+0xb7a>
 800d1dc:	a328      	add	r3, pc, #160	; (adr r3, 800d280 <_strtod_l+0xbd8>)
 800d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	f7f3 fbf3 	bl	80009d0 <__aeabi_dcmple>
 800d1ea:	b1a0      	cbz	r0, 800d216 <_strtod_l+0xb6e>
 800d1ec:	4639      	mov	r1, r7
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f7f3 fc4a 	bl	8000a88 <__aeabi_d2uiz>
 800d1f4:	2801      	cmp	r0, #1
 800d1f6:	bf38      	it	cc
 800d1f8:	2001      	movcc	r0, #1
 800d1fa:	f7f3 f8f3 	bl	80003e4 <__aeabi_ui2d>
 800d1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d200:	4605      	mov	r5, r0
 800d202:	460f      	mov	r7, r1
 800d204:	bb03      	cbnz	r3, 800d248 <_strtod_l+0xba0>
 800d206:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d20a:	9014      	str	r0, [sp, #80]	; 0x50
 800d20c:	9315      	str	r3, [sp, #84]	; 0x54
 800d20e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d212:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800d216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d21a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d21e:	1a9b      	subs	r3, r3, r2
 800d220:	9311      	str	r3, [sp, #68]	; 0x44
 800d222:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d224:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d226:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800d22a:	f7ff f8e9 	bl	800c400 <__ulp>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4640      	mov	r0, r8
 800d234:	4649      	mov	r1, r9
 800d236:	f7f3 f94f 	bl	80004d8 <__aeabi_dmul>
 800d23a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d23e:	f7f2 ff95 	bl	800016c <__adddf3>
 800d242:	4680      	mov	r8, r0
 800d244:	4689      	mov	r9, r1
 800d246:	e774      	b.n	800d132 <_strtod_l+0xa8a>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d250:	e7dd      	b.n	800d20e <_strtod_l+0xb66>
 800d252:	a30d      	add	r3, pc, #52	; (adr r3, 800d288 <_strtod_l+0xbe0>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	f7f3 fbb0 	bl	80009bc <__aeabi_dcmplt>
 800d25c:	e79b      	b.n	800d196 <_strtod_l+0xaee>
 800d25e:	2300      	movs	r3, #0
 800d260:	930e      	str	r3, [sp, #56]	; 0x38
 800d262:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d264:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d266:	6013      	str	r3, [r2, #0]
 800d268:	f7ff ba5b 	b.w	800c722 <_strtod_l+0x7a>
 800d26c:	2a65      	cmp	r2, #101	; 0x65
 800d26e:	f43f ab52 	beq.w	800c916 <_strtod_l+0x26e>
 800d272:	2a45      	cmp	r2, #69	; 0x45
 800d274:	f43f ab4f 	beq.w	800c916 <_strtod_l+0x26e>
 800d278:	2301      	movs	r3, #1
 800d27a:	f7ff bb87 	b.w	800c98c <_strtod_l+0x2e4>
 800d27e:	bf00      	nop
 800d280:	ffc00000 	.word	0xffc00000
 800d284:	41dfffff 	.word	0x41dfffff
 800d288:	94a03595 	.word	0x94a03595
 800d28c:	3fcfffff 	.word	0x3fcfffff

0800d290 <_strtod_r>:
 800d290:	4b01      	ldr	r3, [pc, #4]	; (800d298 <_strtod_r+0x8>)
 800d292:	f7ff ba09 	b.w	800c6a8 <_strtod_l>
 800d296:	bf00      	nop
 800d298:	20000070 	.word	0x20000070

0800d29c <__ssputs_r>:
 800d29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a0:	461f      	mov	r7, r3
 800d2a2:	688e      	ldr	r6, [r1, #8]
 800d2a4:	4682      	mov	sl, r0
 800d2a6:	42be      	cmp	r6, r7
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	4690      	mov	r8, r2
 800d2ac:	680b      	ldr	r3, [r1, #0]
 800d2ae:	d82c      	bhi.n	800d30a <__ssputs_r+0x6e>
 800d2b0:	898a      	ldrh	r2, [r1, #12]
 800d2b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2b6:	d026      	beq.n	800d306 <__ssputs_r+0x6a>
 800d2b8:	6965      	ldr	r5, [r4, #20]
 800d2ba:	6909      	ldr	r1, [r1, #16]
 800d2bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2c0:	eba3 0901 	sub.w	r9, r3, r1
 800d2c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2c8:	1c7b      	adds	r3, r7, #1
 800d2ca:	444b      	add	r3, r9
 800d2cc:	106d      	asrs	r5, r5, #1
 800d2ce:	429d      	cmp	r5, r3
 800d2d0:	bf38      	it	cc
 800d2d2:	461d      	movcc	r5, r3
 800d2d4:	0553      	lsls	r3, r2, #21
 800d2d6:	d527      	bpl.n	800d328 <__ssputs_r+0x8c>
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7fe fc99 	bl	800bc10 <_malloc_r>
 800d2de:	4606      	mov	r6, r0
 800d2e0:	b360      	cbz	r0, 800d33c <__ssputs_r+0xa0>
 800d2e2:	464a      	mov	r2, r9
 800d2e4:	6921      	ldr	r1, [r4, #16]
 800d2e6:	f7fd fda1 	bl	800ae2c <memcpy>
 800d2ea:	89a3      	ldrh	r3, [r4, #12]
 800d2ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2f4:	81a3      	strh	r3, [r4, #12]
 800d2f6:	6126      	str	r6, [r4, #16]
 800d2f8:	444e      	add	r6, r9
 800d2fa:	6026      	str	r6, [r4, #0]
 800d2fc:	463e      	mov	r6, r7
 800d2fe:	6165      	str	r5, [r4, #20]
 800d300:	eba5 0509 	sub.w	r5, r5, r9
 800d304:	60a5      	str	r5, [r4, #8]
 800d306:	42be      	cmp	r6, r7
 800d308:	d900      	bls.n	800d30c <__ssputs_r+0x70>
 800d30a:	463e      	mov	r6, r7
 800d30c:	4632      	mov	r2, r6
 800d30e:	4641      	mov	r1, r8
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	f000 f9c5 	bl	800d6a0 <memmove>
 800d316:	2000      	movs	r0, #0
 800d318:	68a3      	ldr	r3, [r4, #8]
 800d31a:	1b9b      	subs	r3, r3, r6
 800d31c:	60a3      	str	r3, [r4, #8]
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	4433      	add	r3, r6
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d328:	462a      	mov	r2, r5
 800d32a:	f000 fd98 	bl	800de5e <_realloc_r>
 800d32e:	4606      	mov	r6, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	d1e0      	bne.n	800d2f6 <__ssputs_r+0x5a>
 800d334:	4650      	mov	r0, sl
 800d336:	6921      	ldr	r1, [r4, #16]
 800d338:	f7fe fbfa 	bl	800bb30 <_free_r>
 800d33c:	230c      	movs	r3, #12
 800d33e:	f8ca 3000 	str.w	r3, [sl]
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	f04f 30ff 	mov.w	r0, #4294967295
 800d348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d34c:	81a3      	strh	r3, [r4, #12]
 800d34e:	e7e9      	b.n	800d324 <__ssputs_r+0x88>

0800d350 <_svfiprintf_r>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	4698      	mov	r8, r3
 800d356:	898b      	ldrh	r3, [r1, #12]
 800d358:	4607      	mov	r7, r0
 800d35a:	061b      	lsls	r3, r3, #24
 800d35c:	460d      	mov	r5, r1
 800d35e:	4614      	mov	r4, r2
 800d360:	b09d      	sub	sp, #116	; 0x74
 800d362:	d50e      	bpl.n	800d382 <_svfiprintf_r+0x32>
 800d364:	690b      	ldr	r3, [r1, #16]
 800d366:	b963      	cbnz	r3, 800d382 <_svfiprintf_r+0x32>
 800d368:	2140      	movs	r1, #64	; 0x40
 800d36a:	f7fe fc51 	bl	800bc10 <_malloc_r>
 800d36e:	6028      	str	r0, [r5, #0]
 800d370:	6128      	str	r0, [r5, #16]
 800d372:	b920      	cbnz	r0, 800d37e <_svfiprintf_r+0x2e>
 800d374:	230c      	movs	r3, #12
 800d376:	603b      	str	r3, [r7, #0]
 800d378:	f04f 30ff 	mov.w	r0, #4294967295
 800d37c:	e0d0      	b.n	800d520 <_svfiprintf_r+0x1d0>
 800d37e:	2340      	movs	r3, #64	; 0x40
 800d380:	616b      	str	r3, [r5, #20]
 800d382:	2300      	movs	r3, #0
 800d384:	9309      	str	r3, [sp, #36]	; 0x24
 800d386:	2320      	movs	r3, #32
 800d388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d38c:	2330      	movs	r3, #48	; 0x30
 800d38e:	f04f 0901 	mov.w	r9, #1
 800d392:	f8cd 800c 	str.w	r8, [sp, #12]
 800d396:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d538 <_svfiprintf_r+0x1e8>
 800d39a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d39e:	4623      	mov	r3, r4
 800d3a0:	469a      	mov	sl, r3
 800d3a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3a6:	b10a      	cbz	r2, 800d3ac <_svfiprintf_r+0x5c>
 800d3a8:	2a25      	cmp	r2, #37	; 0x25
 800d3aa:	d1f9      	bne.n	800d3a0 <_svfiprintf_r+0x50>
 800d3ac:	ebba 0b04 	subs.w	fp, sl, r4
 800d3b0:	d00b      	beq.n	800d3ca <_svfiprintf_r+0x7a>
 800d3b2:	465b      	mov	r3, fp
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	4638      	mov	r0, r7
 800d3ba:	f7ff ff6f 	bl	800d29c <__ssputs_r>
 800d3be:	3001      	adds	r0, #1
 800d3c0:	f000 80a9 	beq.w	800d516 <_svfiprintf_r+0x1c6>
 800d3c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3c6:	445a      	add	r2, fp
 800d3c8:	9209      	str	r2, [sp, #36]	; 0x24
 800d3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 80a1 	beq.w	800d516 <_svfiprintf_r+0x1c6>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3de:	f10a 0a01 	add.w	sl, sl, #1
 800d3e2:	9304      	str	r3, [sp, #16]
 800d3e4:	9307      	str	r3, [sp, #28]
 800d3e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3ea:	931a      	str	r3, [sp, #104]	; 0x68
 800d3ec:	4654      	mov	r4, sl
 800d3ee:	2205      	movs	r2, #5
 800d3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f4:	4850      	ldr	r0, [pc, #320]	; (800d538 <_svfiprintf_r+0x1e8>)
 800d3f6:	f7fd fd0b 	bl	800ae10 <memchr>
 800d3fa:	9a04      	ldr	r2, [sp, #16]
 800d3fc:	b9d8      	cbnz	r0, 800d436 <_svfiprintf_r+0xe6>
 800d3fe:	06d0      	lsls	r0, r2, #27
 800d400:	bf44      	itt	mi
 800d402:	2320      	movmi	r3, #32
 800d404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d408:	0711      	lsls	r1, r2, #28
 800d40a:	bf44      	itt	mi
 800d40c:	232b      	movmi	r3, #43	; 0x2b
 800d40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d412:	f89a 3000 	ldrb.w	r3, [sl]
 800d416:	2b2a      	cmp	r3, #42	; 0x2a
 800d418:	d015      	beq.n	800d446 <_svfiprintf_r+0xf6>
 800d41a:	4654      	mov	r4, sl
 800d41c:	2000      	movs	r0, #0
 800d41e:	f04f 0c0a 	mov.w	ip, #10
 800d422:	9a07      	ldr	r2, [sp, #28]
 800d424:	4621      	mov	r1, r4
 800d426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d42a:	3b30      	subs	r3, #48	; 0x30
 800d42c:	2b09      	cmp	r3, #9
 800d42e:	d94d      	bls.n	800d4cc <_svfiprintf_r+0x17c>
 800d430:	b1b0      	cbz	r0, 800d460 <_svfiprintf_r+0x110>
 800d432:	9207      	str	r2, [sp, #28]
 800d434:	e014      	b.n	800d460 <_svfiprintf_r+0x110>
 800d436:	eba0 0308 	sub.w	r3, r0, r8
 800d43a:	fa09 f303 	lsl.w	r3, r9, r3
 800d43e:	4313      	orrs	r3, r2
 800d440:	46a2      	mov	sl, r4
 800d442:	9304      	str	r3, [sp, #16]
 800d444:	e7d2      	b.n	800d3ec <_svfiprintf_r+0x9c>
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	1d19      	adds	r1, r3, #4
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	9103      	str	r1, [sp, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bfbb      	ittet	lt
 800d452:	425b      	neglt	r3, r3
 800d454:	f042 0202 	orrlt.w	r2, r2, #2
 800d458:	9307      	strge	r3, [sp, #28]
 800d45a:	9307      	strlt	r3, [sp, #28]
 800d45c:	bfb8      	it	lt
 800d45e:	9204      	strlt	r2, [sp, #16]
 800d460:	7823      	ldrb	r3, [r4, #0]
 800d462:	2b2e      	cmp	r3, #46	; 0x2e
 800d464:	d10c      	bne.n	800d480 <_svfiprintf_r+0x130>
 800d466:	7863      	ldrb	r3, [r4, #1]
 800d468:	2b2a      	cmp	r3, #42	; 0x2a
 800d46a:	d134      	bne.n	800d4d6 <_svfiprintf_r+0x186>
 800d46c:	9b03      	ldr	r3, [sp, #12]
 800d46e:	3402      	adds	r4, #2
 800d470:	1d1a      	adds	r2, r3, #4
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	9203      	str	r2, [sp, #12]
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfb8      	it	lt
 800d47a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d47e:	9305      	str	r3, [sp, #20]
 800d480:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d53c <_svfiprintf_r+0x1ec>
 800d484:	2203      	movs	r2, #3
 800d486:	4650      	mov	r0, sl
 800d488:	7821      	ldrb	r1, [r4, #0]
 800d48a:	f7fd fcc1 	bl	800ae10 <memchr>
 800d48e:	b138      	cbz	r0, 800d4a0 <_svfiprintf_r+0x150>
 800d490:	2240      	movs	r2, #64	; 0x40
 800d492:	9b04      	ldr	r3, [sp, #16]
 800d494:	eba0 000a 	sub.w	r0, r0, sl
 800d498:	4082      	lsls	r2, r0
 800d49a:	4313      	orrs	r3, r2
 800d49c:	3401      	adds	r4, #1
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a4:	2206      	movs	r2, #6
 800d4a6:	4826      	ldr	r0, [pc, #152]	; (800d540 <_svfiprintf_r+0x1f0>)
 800d4a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4ac:	f7fd fcb0 	bl	800ae10 <memchr>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d038      	beq.n	800d526 <_svfiprintf_r+0x1d6>
 800d4b4:	4b23      	ldr	r3, [pc, #140]	; (800d544 <_svfiprintf_r+0x1f4>)
 800d4b6:	bb1b      	cbnz	r3, 800d500 <_svfiprintf_r+0x1b0>
 800d4b8:	9b03      	ldr	r3, [sp, #12]
 800d4ba:	3307      	adds	r3, #7
 800d4bc:	f023 0307 	bic.w	r3, r3, #7
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	9303      	str	r3, [sp, #12]
 800d4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c6:	4433      	add	r3, r6
 800d4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ca:	e768      	b.n	800d39e <_svfiprintf_r+0x4e>
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	2001      	movs	r0, #1
 800d4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d4:	e7a6      	b.n	800d424 <_svfiprintf_r+0xd4>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f04f 0c0a 	mov.w	ip, #10
 800d4dc:	4619      	mov	r1, r3
 800d4de:	3401      	adds	r4, #1
 800d4e0:	9305      	str	r3, [sp, #20]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4e8:	3a30      	subs	r2, #48	; 0x30
 800d4ea:	2a09      	cmp	r2, #9
 800d4ec:	d903      	bls.n	800d4f6 <_svfiprintf_r+0x1a6>
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d0c6      	beq.n	800d480 <_svfiprintf_r+0x130>
 800d4f2:	9105      	str	r1, [sp, #20]
 800d4f4:	e7c4      	b.n	800d480 <_svfiprintf_r+0x130>
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4fe:	e7f0      	b.n	800d4e2 <_svfiprintf_r+0x192>
 800d500:	ab03      	add	r3, sp, #12
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	462a      	mov	r2, r5
 800d506:	4638      	mov	r0, r7
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <_svfiprintf_r+0x1f8>)
 800d50a:	a904      	add	r1, sp, #16
 800d50c:	f7fc fcc8 	bl	8009ea0 <_printf_float>
 800d510:	1c42      	adds	r2, r0, #1
 800d512:	4606      	mov	r6, r0
 800d514:	d1d6      	bne.n	800d4c4 <_svfiprintf_r+0x174>
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	065b      	lsls	r3, r3, #25
 800d51a:	f53f af2d 	bmi.w	800d378 <_svfiprintf_r+0x28>
 800d51e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d520:	b01d      	add	sp, #116	; 0x74
 800d522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d526:	ab03      	add	r3, sp, #12
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	462a      	mov	r2, r5
 800d52c:	4638      	mov	r0, r7
 800d52e:	4b06      	ldr	r3, [pc, #24]	; (800d548 <_svfiprintf_r+0x1f8>)
 800d530:	a904      	add	r1, sp, #16
 800d532:	f7fc ff55 	bl	800a3e0 <_printf_i>
 800d536:	e7eb      	b.n	800d510 <_svfiprintf_r+0x1c0>
 800d538:	0800f808 	.word	0x0800f808
 800d53c:	0800f80e 	.word	0x0800f80e
 800d540:	0800f812 	.word	0x0800f812
 800d544:	08009ea1 	.word	0x08009ea1
 800d548:	0800d29d 	.word	0x0800d29d

0800d54c <__sflush_r>:
 800d54c:	898a      	ldrh	r2, [r1, #12]
 800d54e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d550:	4605      	mov	r5, r0
 800d552:	0710      	lsls	r0, r2, #28
 800d554:	460c      	mov	r4, r1
 800d556:	d457      	bmi.n	800d608 <__sflush_r+0xbc>
 800d558:	684b      	ldr	r3, [r1, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	dc04      	bgt.n	800d568 <__sflush_r+0x1c>
 800d55e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d560:	2b00      	cmp	r3, #0
 800d562:	dc01      	bgt.n	800d568 <__sflush_r+0x1c>
 800d564:	2000      	movs	r0, #0
 800d566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d56a:	2e00      	cmp	r6, #0
 800d56c:	d0fa      	beq.n	800d564 <__sflush_r+0x18>
 800d56e:	2300      	movs	r3, #0
 800d570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d574:	682f      	ldr	r7, [r5, #0]
 800d576:	6a21      	ldr	r1, [r4, #32]
 800d578:	602b      	str	r3, [r5, #0]
 800d57a:	d032      	beq.n	800d5e2 <__sflush_r+0x96>
 800d57c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d57e:	89a3      	ldrh	r3, [r4, #12]
 800d580:	075a      	lsls	r2, r3, #29
 800d582:	d505      	bpl.n	800d590 <__sflush_r+0x44>
 800d584:	6863      	ldr	r3, [r4, #4]
 800d586:	1ac0      	subs	r0, r0, r3
 800d588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d58a:	b10b      	cbz	r3, 800d590 <__sflush_r+0x44>
 800d58c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d58e:	1ac0      	subs	r0, r0, r3
 800d590:	2300      	movs	r3, #0
 800d592:	4602      	mov	r2, r0
 800d594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d596:	4628      	mov	r0, r5
 800d598:	6a21      	ldr	r1, [r4, #32]
 800d59a:	47b0      	blx	r6
 800d59c:	1c43      	adds	r3, r0, #1
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	d106      	bne.n	800d5b0 <__sflush_r+0x64>
 800d5a2:	6829      	ldr	r1, [r5, #0]
 800d5a4:	291d      	cmp	r1, #29
 800d5a6:	d82b      	bhi.n	800d600 <__sflush_r+0xb4>
 800d5a8:	4a28      	ldr	r2, [pc, #160]	; (800d64c <__sflush_r+0x100>)
 800d5aa:	410a      	asrs	r2, r1
 800d5ac:	07d6      	lsls	r6, r2, #31
 800d5ae:	d427      	bmi.n	800d600 <__sflush_r+0xb4>
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	6062      	str	r2, [r4, #4]
 800d5b4:	6922      	ldr	r2, [r4, #16]
 800d5b6:	04d9      	lsls	r1, r3, #19
 800d5b8:	6022      	str	r2, [r4, #0]
 800d5ba:	d504      	bpl.n	800d5c6 <__sflush_r+0x7a>
 800d5bc:	1c42      	adds	r2, r0, #1
 800d5be:	d101      	bne.n	800d5c4 <__sflush_r+0x78>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	b903      	cbnz	r3, 800d5c6 <__sflush_r+0x7a>
 800d5c4:	6560      	str	r0, [r4, #84]	; 0x54
 800d5c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5c8:	602f      	str	r7, [r5, #0]
 800d5ca:	2900      	cmp	r1, #0
 800d5cc:	d0ca      	beq.n	800d564 <__sflush_r+0x18>
 800d5ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5d2:	4299      	cmp	r1, r3
 800d5d4:	d002      	beq.n	800d5dc <__sflush_r+0x90>
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f7fe faaa 	bl	800bb30 <_free_r>
 800d5dc:	2000      	movs	r0, #0
 800d5de:	6360      	str	r0, [r4, #52]	; 0x34
 800d5e0:	e7c1      	b.n	800d566 <__sflush_r+0x1a>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	47b0      	blx	r6
 800d5e8:	1c41      	adds	r1, r0, #1
 800d5ea:	d1c8      	bne.n	800d57e <__sflush_r+0x32>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d0c5      	beq.n	800d57e <__sflush_r+0x32>
 800d5f2:	2b1d      	cmp	r3, #29
 800d5f4:	d001      	beq.n	800d5fa <__sflush_r+0xae>
 800d5f6:	2b16      	cmp	r3, #22
 800d5f8:	d101      	bne.n	800d5fe <__sflush_r+0xb2>
 800d5fa:	602f      	str	r7, [r5, #0]
 800d5fc:	e7b2      	b.n	800d564 <__sflush_r+0x18>
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d604:	81a3      	strh	r3, [r4, #12]
 800d606:	e7ae      	b.n	800d566 <__sflush_r+0x1a>
 800d608:	690f      	ldr	r7, [r1, #16]
 800d60a:	2f00      	cmp	r7, #0
 800d60c:	d0aa      	beq.n	800d564 <__sflush_r+0x18>
 800d60e:	0793      	lsls	r3, r2, #30
 800d610:	bf18      	it	ne
 800d612:	2300      	movne	r3, #0
 800d614:	680e      	ldr	r6, [r1, #0]
 800d616:	bf08      	it	eq
 800d618:	694b      	ldreq	r3, [r1, #20]
 800d61a:	1bf6      	subs	r6, r6, r7
 800d61c:	600f      	str	r7, [r1, #0]
 800d61e:	608b      	str	r3, [r1, #8]
 800d620:	2e00      	cmp	r6, #0
 800d622:	dd9f      	ble.n	800d564 <__sflush_r+0x18>
 800d624:	4633      	mov	r3, r6
 800d626:	463a      	mov	r2, r7
 800d628:	4628      	mov	r0, r5
 800d62a:	6a21      	ldr	r1, [r4, #32]
 800d62c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d630:	47e0      	blx	ip
 800d632:	2800      	cmp	r0, #0
 800d634:	dc06      	bgt.n	800d644 <__sflush_r+0xf8>
 800d636:	89a3      	ldrh	r3, [r4, #12]
 800d638:	f04f 30ff 	mov.w	r0, #4294967295
 800d63c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d640:	81a3      	strh	r3, [r4, #12]
 800d642:	e790      	b.n	800d566 <__sflush_r+0x1a>
 800d644:	4407      	add	r7, r0
 800d646:	1a36      	subs	r6, r6, r0
 800d648:	e7ea      	b.n	800d620 <__sflush_r+0xd4>
 800d64a:	bf00      	nop
 800d64c:	dfbffffe 	.word	0xdfbffffe

0800d650 <_fflush_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	690b      	ldr	r3, [r1, #16]
 800d654:	4605      	mov	r5, r0
 800d656:	460c      	mov	r4, r1
 800d658:	b913      	cbnz	r3, 800d660 <_fflush_r+0x10>
 800d65a:	2500      	movs	r5, #0
 800d65c:	4628      	mov	r0, r5
 800d65e:	bd38      	pop	{r3, r4, r5, pc}
 800d660:	b118      	cbz	r0, 800d66a <_fflush_r+0x1a>
 800d662:	6a03      	ldr	r3, [r0, #32]
 800d664:	b90b      	cbnz	r3, 800d66a <_fflush_r+0x1a>
 800d666:	f7fd fa65 	bl	800ab34 <__sinit>
 800d66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d0f3      	beq.n	800d65a <_fflush_r+0xa>
 800d672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d674:	07d0      	lsls	r0, r2, #31
 800d676:	d404      	bmi.n	800d682 <_fflush_r+0x32>
 800d678:	0599      	lsls	r1, r3, #22
 800d67a:	d402      	bmi.n	800d682 <_fflush_r+0x32>
 800d67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d67e:	f7fd fbc5 	bl	800ae0c <__retarget_lock_acquire_recursive>
 800d682:	4628      	mov	r0, r5
 800d684:	4621      	mov	r1, r4
 800d686:	f7ff ff61 	bl	800d54c <__sflush_r>
 800d68a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d68c:	4605      	mov	r5, r0
 800d68e:	07da      	lsls	r2, r3, #31
 800d690:	d4e4      	bmi.n	800d65c <_fflush_r+0xc>
 800d692:	89a3      	ldrh	r3, [r4, #12]
 800d694:	059b      	lsls	r3, r3, #22
 800d696:	d4e1      	bmi.n	800d65c <_fflush_r+0xc>
 800d698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d69a:	f7fd fbb8 	bl	800ae0e <__retarget_lock_release_recursive>
 800d69e:	e7dd      	b.n	800d65c <_fflush_r+0xc>

0800d6a0 <memmove>:
 800d6a0:	4288      	cmp	r0, r1
 800d6a2:	b510      	push	{r4, lr}
 800d6a4:	eb01 0402 	add.w	r4, r1, r2
 800d6a8:	d902      	bls.n	800d6b0 <memmove+0x10>
 800d6aa:	4284      	cmp	r4, r0
 800d6ac:	4623      	mov	r3, r4
 800d6ae:	d807      	bhi.n	800d6c0 <memmove+0x20>
 800d6b0:	1e43      	subs	r3, r0, #1
 800d6b2:	42a1      	cmp	r1, r4
 800d6b4:	d008      	beq.n	800d6c8 <memmove+0x28>
 800d6b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6be:	e7f8      	b.n	800d6b2 <memmove+0x12>
 800d6c0:	4601      	mov	r1, r0
 800d6c2:	4402      	add	r2, r0
 800d6c4:	428a      	cmp	r2, r1
 800d6c6:	d100      	bne.n	800d6ca <memmove+0x2a>
 800d6c8:	bd10      	pop	{r4, pc}
 800d6ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6d2:	e7f7      	b.n	800d6c4 <memmove+0x24>

0800d6d4 <strncmp>:
 800d6d4:	b510      	push	{r4, lr}
 800d6d6:	b16a      	cbz	r2, 800d6f4 <strncmp+0x20>
 800d6d8:	3901      	subs	r1, #1
 800d6da:	1884      	adds	r4, r0, r2
 800d6dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d103      	bne.n	800d6f0 <strncmp+0x1c>
 800d6e8:	42a0      	cmp	r0, r4
 800d6ea:	d001      	beq.n	800d6f0 <strncmp+0x1c>
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	d1f5      	bne.n	800d6dc <strncmp+0x8>
 800d6f0:	1ad0      	subs	r0, r2, r3
 800d6f2:	bd10      	pop	{r4, pc}
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	e7fc      	b.n	800d6f2 <strncmp+0x1e>

0800d6f8 <_sbrk_r>:
 800d6f8:	b538      	push	{r3, r4, r5, lr}
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	4d05      	ldr	r5, [pc, #20]	; (800d714 <_sbrk_r+0x1c>)
 800d6fe:	4604      	mov	r4, r0
 800d700:	4608      	mov	r0, r1
 800d702:	602b      	str	r3, [r5, #0]
 800d704:	f7f6 f9c2 	bl	8003a8c <_sbrk>
 800d708:	1c43      	adds	r3, r0, #1
 800d70a:	d102      	bne.n	800d712 <_sbrk_r+0x1a>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	b103      	cbz	r3, 800d712 <_sbrk_r+0x1a>
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	bd38      	pop	{r3, r4, r5, pc}
 800d714:	20003f8c 	.word	0x20003f8c

0800d718 <nan>:
 800d718:	2000      	movs	r0, #0
 800d71a:	4901      	ldr	r1, [pc, #4]	; (800d720 <nan+0x8>)
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	7ff80000 	.word	0x7ff80000

0800d724 <__assert_func>:
 800d724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d726:	4614      	mov	r4, r2
 800d728:	461a      	mov	r2, r3
 800d72a:	4b09      	ldr	r3, [pc, #36]	; (800d750 <__assert_func+0x2c>)
 800d72c:	4605      	mov	r5, r0
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	68d8      	ldr	r0, [r3, #12]
 800d732:	b14c      	cbz	r4, 800d748 <__assert_func+0x24>
 800d734:	4b07      	ldr	r3, [pc, #28]	; (800d754 <__assert_func+0x30>)
 800d736:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d73a:	9100      	str	r1, [sp, #0]
 800d73c:	462b      	mov	r3, r5
 800d73e:	4906      	ldr	r1, [pc, #24]	; (800d758 <__assert_func+0x34>)
 800d740:	f000 fbca 	bl	800ded8 <fiprintf>
 800d744:	f000 fbda 	bl	800defc <abort>
 800d748:	4b04      	ldr	r3, [pc, #16]	; (800d75c <__assert_func+0x38>)
 800d74a:	461c      	mov	r4, r3
 800d74c:	e7f3      	b.n	800d736 <__assert_func+0x12>
 800d74e:	bf00      	nop
 800d750:	2000006c 	.word	0x2000006c
 800d754:	0800f821 	.word	0x0800f821
 800d758:	0800f82e 	.word	0x0800f82e
 800d75c:	0800f85c 	.word	0x0800f85c

0800d760 <_calloc_r>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	fba1 5402 	umull	r5, r4, r1, r2
 800d766:	b934      	cbnz	r4, 800d776 <_calloc_r+0x16>
 800d768:	4629      	mov	r1, r5
 800d76a:	f7fe fa51 	bl	800bc10 <_malloc_r>
 800d76e:	4606      	mov	r6, r0
 800d770:	b928      	cbnz	r0, 800d77e <_calloc_r+0x1e>
 800d772:	4630      	mov	r0, r6
 800d774:	bd70      	pop	{r4, r5, r6, pc}
 800d776:	220c      	movs	r2, #12
 800d778:	2600      	movs	r6, #0
 800d77a:	6002      	str	r2, [r0, #0]
 800d77c:	e7f9      	b.n	800d772 <_calloc_r+0x12>
 800d77e:	462a      	mov	r2, r5
 800d780:	4621      	mov	r1, r4
 800d782:	f7fd fa70 	bl	800ac66 <memset>
 800d786:	e7f4      	b.n	800d772 <_calloc_r+0x12>

0800d788 <rshift>:
 800d788:	6903      	ldr	r3, [r0, #16]
 800d78a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d78e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d792:	f100 0414 	add.w	r4, r0, #20
 800d796:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d79a:	dd46      	ble.n	800d82a <rshift+0xa2>
 800d79c:	f011 011f 	ands.w	r1, r1, #31
 800d7a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7a8:	d10c      	bne.n	800d7c4 <rshift+0x3c>
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	f100 0710 	add.w	r7, r0, #16
 800d7b0:	42b1      	cmp	r1, r6
 800d7b2:	d335      	bcc.n	800d820 <rshift+0x98>
 800d7b4:	1a9b      	subs	r3, r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	1eea      	subs	r2, r5, #3
 800d7ba:	4296      	cmp	r6, r2
 800d7bc:	bf38      	it	cc
 800d7be:	2300      	movcc	r3, #0
 800d7c0:	4423      	add	r3, r4
 800d7c2:	e015      	b.n	800d7f0 <rshift+0x68>
 800d7c4:	46a1      	mov	r9, r4
 800d7c6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d7ca:	f1c1 0820 	rsb	r8, r1, #32
 800d7ce:	40cf      	lsrs	r7, r1
 800d7d0:	f105 0e04 	add.w	lr, r5, #4
 800d7d4:	4576      	cmp	r6, lr
 800d7d6:	46f4      	mov	ip, lr
 800d7d8:	d816      	bhi.n	800d808 <rshift+0x80>
 800d7da:	1a9a      	subs	r2, r3, r2
 800d7dc:	0092      	lsls	r2, r2, #2
 800d7de:	3a04      	subs	r2, #4
 800d7e0:	3501      	adds	r5, #1
 800d7e2:	42ae      	cmp	r6, r5
 800d7e4:	bf38      	it	cc
 800d7e6:	2200      	movcc	r2, #0
 800d7e8:	18a3      	adds	r3, r4, r2
 800d7ea:	50a7      	str	r7, [r4, r2]
 800d7ec:	b107      	cbz	r7, 800d7f0 <rshift+0x68>
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	42a3      	cmp	r3, r4
 800d7f2:	eba3 0204 	sub.w	r2, r3, r4
 800d7f6:	bf08      	it	eq
 800d7f8:	2300      	moveq	r3, #0
 800d7fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7fe:	6102      	str	r2, [r0, #16]
 800d800:	bf08      	it	eq
 800d802:	6143      	streq	r3, [r0, #20]
 800d804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d808:	f8dc c000 	ldr.w	ip, [ip]
 800d80c:	fa0c fc08 	lsl.w	ip, ip, r8
 800d810:	ea4c 0707 	orr.w	r7, ip, r7
 800d814:	f849 7b04 	str.w	r7, [r9], #4
 800d818:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d81c:	40cf      	lsrs	r7, r1
 800d81e:	e7d9      	b.n	800d7d4 <rshift+0x4c>
 800d820:	f851 cb04 	ldr.w	ip, [r1], #4
 800d824:	f847 cf04 	str.w	ip, [r7, #4]!
 800d828:	e7c2      	b.n	800d7b0 <rshift+0x28>
 800d82a:	4623      	mov	r3, r4
 800d82c:	e7e0      	b.n	800d7f0 <rshift+0x68>

0800d82e <__hexdig_fun>:
 800d82e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d832:	2b09      	cmp	r3, #9
 800d834:	d802      	bhi.n	800d83c <__hexdig_fun+0xe>
 800d836:	3820      	subs	r0, #32
 800d838:	b2c0      	uxtb	r0, r0
 800d83a:	4770      	bx	lr
 800d83c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d840:	2b05      	cmp	r3, #5
 800d842:	d801      	bhi.n	800d848 <__hexdig_fun+0x1a>
 800d844:	3847      	subs	r0, #71	; 0x47
 800d846:	e7f7      	b.n	800d838 <__hexdig_fun+0xa>
 800d848:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d84c:	2b05      	cmp	r3, #5
 800d84e:	d801      	bhi.n	800d854 <__hexdig_fun+0x26>
 800d850:	3827      	subs	r0, #39	; 0x27
 800d852:	e7f1      	b.n	800d838 <__hexdig_fun+0xa>
 800d854:	2000      	movs	r0, #0
 800d856:	4770      	bx	lr

0800d858 <__gethex>:
 800d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85c:	4681      	mov	r9, r0
 800d85e:	468a      	mov	sl, r1
 800d860:	4617      	mov	r7, r2
 800d862:	680a      	ldr	r2, [r1, #0]
 800d864:	b085      	sub	sp, #20
 800d866:	f102 0b02 	add.w	fp, r2, #2
 800d86a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d86e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d872:	9302      	str	r3, [sp, #8]
 800d874:	32fe      	adds	r2, #254	; 0xfe
 800d876:	eb02 030b 	add.w	r3, r2, fp
 800d87a:	46d8      	mov	r8, fp
 800d87c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d880:	9301      	str	r3, [sp, #4]
 800d882:	2830      	cmp	r0, #48	; 0x30
 800d884:	d0f7      	beq.n	800d876 <__gethex+0x1e>
 800d886:	f7ff ffd2 	bl	800d82e <__hexdig_fun>
 800d88a:	4604      	mov	r4, r0
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d138      	bne.n	800d902 <__gethex+0xaa>
 800d890:	2201      	movs	r2, #1
 800d892:	4640      	mov	r0, r8
 800d894:	49a7      	ldr	r1, [pc, #668]	; (800db34 <__gethex+0x2dc>)
 800d896:	f7ff ff1d 	bl	800d6d4 <strncmp>
 800d89a:	4606      	mov	r6, r0
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d169      	bne.n	800d974 <__gethex+0x11c>
 800d8a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d8a4:	465d      	mov	r5, fp
 800d8a6:	f7ff ffc2 	bl	800d82e <__hexdig_fun>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d064      	beq.n	800d978 <__gethex+0x120>
 800d8ae:	465a      	mov	r2, fp
 800d8b0:	7810      	ldrb	r0, [r2, #0]
 800d8b2:	4690      	mov	r8, r2
 800d8b4:	2830      	cmp	r0, #48	; 0x30
 800d8b6:	f102 0201 	add.w	r2, r2, #1
 800d8ba:	d0f9      	beq.n	800d8b0 <__gethex+0x58>
 800d8bc:	f7ff ffb7 	bl	800d82e <__hexdig_fun>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	fab0 f480 	clz	r4, r0
 800d8c6:	465e      	mov	r6, fp
 800d8c8:	0964      	lsrs	r4, r4, #5
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	4642      	mov	r2, r8
 800d8ce:	4615      	mov	r5, r2
 800d8d0:	7828      	ldrb	r0, [r5, #0]
 800d8d2:	3201      	adds	r2, #1
 800d8d4:	f7ff ffab 	bl	800d82e <__hexdig_fun>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	d1f8      	bne.n	800d8ce <__gethex+0x76>
 800d8dc:	2201      	movs	r2, #1
 800d8de:	4628      	mov	r0, r5
 800d8e0:	4994      	ldr	r1, [pc, #592]	; (800db34 <__gethex+0x2dc>)
 800d8e2:	f7ff fef7 	bl	800d6d4 <strncmp>
 800d8e6:	b978      	cbnz	r0, 800d908 <__gethex+0xb0>
 800d8e8:	b946      	cbnz	r6, 800d8fc <__gethex+0xa4>
 800d8ea:	1c6e      	adds	r6, r5, #1
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	4615      	mov	r5, r2
 800d8f0:	7828      	ldrb	r0, [r5, #0]
 800d8f2:	3201      	adds	r2, #1
 800d8f4:	f7ff ff9b 	bl	800d82e <__hexdig_fun>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d1f8      	bne.n	800d8ee <__gethex+0x96>
 800d8fc:	1b73      	subs	r3, r6, r5
 800d8fe:	009e      	lsls	r6, r3, #2
 800d900:	e004      	b.n	800d90c <__gethex+0xb4>
 800d902:	2400      	movs	r4, #0
 800d904:	4626      	mov	r6, r4
 800d906:	e7e1      	b.n	800d8cc <__gethex+0x74>
 800d908:	2e00      	cmp	r6, #0
 800d90a:	d1f7      	bne.n	800d8fc <__gethex+0xa4>
 800d90c:	782b      	ldrb	r3, [r5, #0]
 800d90e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d912:	2b50      	cmp	r3, #80	; 0x50
 800d914:	d13d      	bne.n	800d992 <__gethex+0x13a>
 800d916:	786b      	ldrb	r3, [r5, #1]
 800d918:	2b2b      	cmp	r3, #43	; 0x2b
 800d91a:	d02f      	beq.n	800d97c <__gethex+0x124>
 800d91c:	2b2d      	cmp	r3, #45	; 0x2d
 800d91e:	d031      	beq.n	800d984 <__gethex+0x12c>
 800d920:	f04f 0b00 	mov.w	fp, #0
 800d924:	1c69      	adds	r1, r5, #1
 800d926:	7808      	ldrb	r0, [r1, #0]
 800d928:	f7ff ff81 	bl	800d82e <__hexdig_fun>
 800d92c:	1e42      	subs	r2, r0, #1
 800d92e:	b2d2      	uxtb	r2, r2
 800d930:	2a18      	cmp	r2, #24
 800d932:	d82e      	bhi.n	800d992 <__gethex+0x13a>
 800d934:	f1a0 0210 	sub.w	r2, r0, #16
 800d938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d93c:	f7ff ff77 	bl	800d82e <__hexdig_fun>
 800d940:	f100 3cff 	add.w	ip, r0, #4294967295
 800d944:	fa5f fc8c 	uxtb.w	ip, ip
 800d948:	f1bc 0f18 	cmp.w	ip, #24
 800d94c:	d91d      	bls.n	800d98a <__gethex+0x132>
 800d94e:	f1bb 0f00 	cmp.w	fp, #0
 800d952:	d000      	beq.n	800d956 <__gethex+0xfe>
 800d954:	4252      	negs	r2, r2
 800d956:	4416      	add	r6, r2
 800d958:	f8ca 1000 	str.w	r1, [sl]
 800d95c:	b1dc      	cbz	r4, 800d996 <__gethex+0x13e>
 800d95e:	9b01      	ldr	r3, [sp, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	bf14      	ite	ne
 800d964:	f04f 0800 	movne.w	r8, #0
 800d968:	f04f 0806 	moveq.w	r8, #6
 800d96c:	4640      	mov	r0, r8
 800d96e:	b005      	add	sp, #20
 800d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d974:	4645      	mov	r5, r8
 800d976:	4626      	mov	r6, r4
 800d978:	2401      	movs	r4, #1
 800d97a:	e7c7      	b.n	800d90c <__gethex+0xb4>
 800d97c:	f04f 0b00 	mov.w	fp, #0
 800d980:	1ca9      	adds	r1, r5, #2
 800d982:	e7d0      	b.n	800d926 <__gethex+0xce>
 800d984:	f04f 0b01 	mov.w	fp, #1
 800d988:	e7fa      	b.n	800d980 <__gethex+0x128>
 800d98a:	230a      	movs	r3, #10
 800d98c:	fb03 0002 	mla	r0, r3, r2, r0
 800d990:	e7d0      	b.n	800d934 <__gethex+0xdc>
 800d992:	4629      	mov	r1, r5
 800d994:	e7e0      	b.n	800d958 <__gethex+0x100>
 800d996:	4621      	mov	r1, r4
 800d998:	eba5 0308 	sub.w	r3, r5, r8
 800d99c:	3b01      	subs	r3, #1
 800d99e:	2b07      	cmp	r3, #7
 800d9a0:	dc0a      	bgt.n	800d9b8 <__gethex+0x160>
 800d9a2:	4648      	mov	r0, r9
 800d9a4:	f7fe f9c0 	bl	800bd28 <_Balloc>
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	b940      	cbnz	r0, 800d9be <__gethex+0x166>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	21e4      	movs	r1, #228	; 0xe4
 800d9b0:	4b61      	ldr	r3, [pc, #388]	; (800db38 <__gethex+0x2e0>)
 800d9b2:	4862      	ldr	r0, [pc, #392]	; (800db3c <__gethex+0x2e4>)
 800d9b4:	f7ff feb6 	bl	800d724 <__assert_func>
 800d9b8:	3101      	adds	r1, #1
 800d9ba:	105b      	asrs	r3, r3, #1
 800d9bc:	e7ef      	b.n	800d99e <__gethex+0x146>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	469b      	mov	fp, r3
 800d9c2:	f100 0a14 	add.w	sl, r0, #20
 800d9c6:	f8cd a004 	str.w	sl, [sp, #4]
 800d9ca:	45a8      	cmp	r8, r5
 800d9cc:	d344      	bcc.n	800da58 <__gethex+0x200>
 800d9ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d9d2:	4658      	mov	r0, fp
 800d9d4:	f848 bb04 	str.w	fp, [r8], #4
 800d9d8:	eba8 080a 	sub.w	r8, r8, sl
 800d9dc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800d9e0:	6122      	str	r2, [r4, #16]
 800d9e2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800d9e6:	f7fe fa91 	bl	800bf0c <__hi0bits>
 800d9ea:	683d      	ldr	r5, [r7, #0]
 800d9ec:	eba8 0800 	sub.w	r8, r8, r0
 800d9f0:	45a8      	cmp	r8, r5
 800d9f2:	dd59      	ble.n	800daa8 <__gethex+0x250>
 800d9f4:	eba8 0805 	sub.w	r8, r8, r5
 800d9f8:	4641      	mov	r1, r8
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f7fe fe0f 	bl	800c61e <__any_on>
 800da00:	4683      	mov	fp, r0
 800da02:	b1b8      	cbz	r0, 800da34 <__gethex+0x1dc>
 800da04:	f04f 0b01 	mov.w	fp, #1
 800da08:	f108 33ff 	add.w	r3, r8, #4294967295
 800da0c:	1159      	asrs	r1, r3, #5
 800da0e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800da12:	f003 021f 	and.w	r2, r3, #31
 800da16:	fa0b f202 	lsl.w	r2, fp, r2
 800da1a:	420a      	tst	r2, r1
 800da1c:	d00a      	beq.n	800da34 <__gethex+0x1dc>
 800da1e:	455b      	cmp	r3, fp
 800da20:	dd06      	ble.n	800da30 <__gethex+0x1d8>
 800da22:	4620      	mov	r0, r4
 800da24:	f1a8 0102 	sub.w	r1, r8, #2
 800da28:	f7fe fdf9 	bl	800c61e <__any_on>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d138      	bne.n	800daa2 <__gethex+0x24a>
 800da30:	f04f 0b02 	mov.w	fp, #2
 800da34:	4641      	mov	r1, r8
 800da36:	4620      	mov	r0, r4
 800da38:	f7ff fea6 	bl	800d788 <rshift>
 800da3c:	4446      	add	r6, r8
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	42b3      	cmp	r3, r6
 800da42:	da41      	bge.n	800dac8 <__gethex+0x270>
 800da44:	4621      	mov	r1, r4
 800da46:	4648      	mov	r0, r9
 800da48:	f7fe f9ae 	bl	800bda8 <_Bfree>
 800da4c:	2300      	movs	r3, #0
 800da4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da50:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800da54:	6013      	str	r3, [r2, #0]
 800da56:	e789      	b.n	800d96c <__gethex+0x114>
 800da58:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800da5c:	2a2e      	cmp	r2, #46	; 0x2e
 800da5e:	d014      	beq.n	800da8a <__gethex+0x232>
 800da60:	2b20      	cmp	r3, #32
 800da62:	d106      	bne.n	800da72 <__gethex+0x21a>
 800da64:	9b01      	ldr	r3, [sp, #4]
 800da66:	f843 bb04 	str.w	fp, [r3], #4
 800da6a:	f04f 0b00 	mov.w	fp, #0
 800da6e:	9301      	str	r3, [sp, #4]
 800da70:	465b      	mov	r3, fp
 800da72:	7828      	ldrb	r0, [r5, #0]
 800da74:	9303      	str	r3, [sp, #12]
 800da76:	f7ff feda 	bl	800d82e <__hexdig_fun>
 800da7a:	9b03      	ldr	r3, [sp, #12]
 800da7c:	f000 000f 	and.w	r0, r0, #15
 800da80:	4098      	lsls	r0, r3
 800da82:	ea4b 0b00 	orr.w	fp, fp, r0
 800da86:	3304      	adds	r3, #4
 800da88:	e79f      	b.n	800d9ca <__gethex+0x172>
 800da8a:	45a8      	cmp	r8, r5
 800da8c:	d8e8      	bhi.n	800da60 <__gethex+0x208>
 800da8e:	2201      	movs	r2, #1
 800da90:	4628      	mov	r0, r5
 800da92:	4928      	ldr	r1, [pc, #160]	; (800db34 <__gethex+0x2dc>)
 800da94:	9303      	str	r3, [sp, #12]
 800da96:	f7ff fe1d 	bl	800d6d4 <strncmp>
 800da9a:	9b03      	ldr	r3, [sp, #12]
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d1df      	bne.n	800da60 <__gethex+0x208>
 800daa0:	e793      	b.n	800d9ca <__gethex+0x172>
 800daa2:	f04f 0b03 	mov.w	fp, #3
 800daa6:	e7c5      	b.n	800da34 <__gethex+0x1dc>
 800daa8:	da0b      	bge.n	800dac2 <__gethex+0x26a>
 800daaa:	eba5 0808 	sub.w	r8, r5, r8
 800daae:	4621      	mov	r1, r4
 800dab0:	4642      	mov	r2, r8
 800dab2:	4648      	mov	r0, r9
 800dab4:	f7fe fb90 	bl	800c1d8 <__lshift>
 800dab8:	4604      	mov	r4, r0
 800daba:	eba6 0608 	sub.w	r6, r6, r8
 800dabe:	f100 0a14 	add.w	sl, r0, #20
 800dac2:	f04f 0b00 	mov.w	fp, #0
 800dac6:	e7ba      	b.n	800da3e <__gethex+0x1e6>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	42b3      	cmp	r3, r6
 800dacc:	dd74      	ble.n	800dbb8 <__gethex+0x360>
 800dace:	1b9e      	subs	r6, r3, r6
 800dad0:	42b5      	cmp	r5, r6
 800dad2:	dc35      	bgt.n	800db40 <__gethex+0x2e8>
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	d023      	beq.n	800db22 <__gethex+0x2ca>
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d025      	beq.n	800db2a <__gethex+0x2d2>
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d115      	bne.n	800db0e <__gethex+0x2b6>
 800dae2:	42b5      	cmp	r5, r6
 800dae4:	d113      	bne.n	800db0e <__gethex+0x2b6>
 800dae6:	2d01      	cmp	r5, #1
 800dae8:	d10b      	bne.n	800db02 <__gethex+0x2aa>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	9a02      	ldr	r2, [sp, #8]
 800daee:	f04f 0862 	mov.w	r8, #98	; 0x62
 800daf2:	6013      	str	r3, [r2, #0]
 800daf4:	2301      	movs	r3, #1
 800daf6:	6123      	str	r3, [r4, #16]
 800daf8:	f8ca 3000 	str.w	r3, [sl]
 800dafc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dafe:	601c      	str	r4, [r3, #0]
 800db00:	e734      	b.n	800d96c <__gethex+0x114>
 800db02:	4620      	mov	r0, r4
 800db04:	1e69      	subs	r1, r5, #1
 800db06:	f7fe fd8a 	bl	800c61e <__any_on>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d1ed      	bne.n	800daea <__gethex+0x292>
 800db0e:	4621      	mov	r1, r4
 800db10:	4648      	mov	r0, r9
 800db12:	f7fe f949 	bl	800bda8 <_Bfree>
 800db16:	2300      	movs	r3, #0
 800db18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800db1e:	6013      	str	r3, [r2, #0]
 800db20:	e724      	b.n	800d96c <__gethex+0x114>
 800db22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1f2      	bne.n	800db0e <__gethex+0x2b6>
 800db28:	e7df      	b.n	800daea <__gethex+0x292>
 800db2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1dc      	bne.n	800daea <__gethex+0x292>
 800db30:	e7ed      	b.n	800db0e <__gethex+0x2b6>
 800db32:	bf00      	nop
 800db34:	0800f7b4 	.word	0x0800f7b4
 800db38:	0800f64c 	.word	0x0800f64c
 800db3c:	0800f85d 	.word	0x0800f85d
 800db40:	f106 38ff 	add.w	r8, r6, #4294967295
 800db44:	f1bb 0f00 	cmp.w	fp, #0
 800db48:	d133      	bne.n	800dbb2 <__gethex+0x35a>
 800db4a:	f1b8 0f00 	cmp.w	r8, #0
 800db4e:	d004      	beq.n	800db5a <__gethex+0x302>
 800db50:	4641      	mov	r1, r8
 800db52:	4620      	mov	r0, r4
 800db54:	f7fe fd63 	bl	800c61e <__any_on>
 800db58:	4683      	mov	fp, r0
 800db5a:	2301      	movs	r3, #1
 800db5c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800db60:	f008 081f 	and.w	r8, r8, #31
 800db64:	fa03 f308 	lsl.w	r3, r3, r8
 800db68:	f04f 0802 	mov.w	r8, #2
 800db6c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800db70:	4631      	mov	r1, r6
 800db72:	4213      	tst	r3, r2
 800db74:	4620      	mov	r0, r4
 800db76:	bf18      	it	ne
 800db78:	f04b 0b02 	orrne.w	fp, fp, #2
 800db7c:	1bad      	subs	r5, r5, r6
 800db7e:	f7ff fe03 	bl	800d788 <rshift>
 800db82:	687e      	ldr	r6, [r7, #4]
 800db84:	f1bb 0f00 	cmp.w	fp, #0
 800db88:	d04a      	beq.n	800dc20 <__gethex+0x3c8>
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d016      	beq.n	800dbbe <__gethex+0x366>
 800db90:	2b03      	cmp	r3, #3
 800db92:	d018      	beq.n	800dbc6 <__gethex+0x36e>
 800db94:	2b01      	cmp	r3, #1
 800db96:	d109      	bne.n	800dbac <__gethex+0x354>
 800db98:	f01b 0f02 	tst.w	fp, #2
 800db9c:	d006      	beq.n	800dbac <__gethex+0x354>
 800db9e:	f8da 3000 	ldr.w	r3, [sl]
 800dba2:	ea4b 0b03 	orr.w	fp, fp, r3
 800dba6:	f01b 0f01 	tst.w	fp, #1
 800dbaa:	d10f      	bne.n	800dbcc <__gethex+0x374>
 800dbac:	f048 0810 	orr.w	r8, r8, #16
 800dbb0:	e036      	b.n	800dc20 <__gethex+0x3c8>
 800dbb2:	f04f 0b01 	mov.w	fp, #1
 800dbb6:	e7d0      	b.n	800db5a <__gethex+0x302>
 800dbb8:	f04f 0801 	mov.w	r8, #1
 800dbbc:	e7e2      	b.n	800db84 <__gethex+0x32c>
 800dbbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbc0:	f1c3 0301 	rsb	r3, r3, #1
 800dbc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d0ef      	beq.n	800dbac <__gethex+0x354>
 800dbcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbd0:	f104 0214 	add.w	r2, r4, #20
 800dbd4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800dbd8:	9301      	str	r3, [sp, #4]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800dbe0:	4694      	mov	ip, r2
 800dbe2:	f852 1b04 	ldr.w	r1, [r2], #4
 800dbe6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800dbea:	d01e      	beq.n	800dc2a <__gethex+0x3d2>
 800dbec:	3101      	adds	r1, #1
 800dbee:	f8cc 1000 	str.w	r1, [ip]
 800dbf2:	f1b8 0f02 	cmp.w	r8, #2
 800dbf6:	f104 0214 	add.w	r2, r4, #20
 800dbfa:	d13d      	bne.n	800dc78 <__gethex+0x420>
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	42ab      	cmp	r3, r5
 800dc02:	d10b      	bne.n	800dc1c <__gethex+0x3c4>
 800dc04:	2301      	movs	r3, #1
 800dc06:	1169      	asrs	r1, r5, #5
 800dc08:	f005 051f 	and.w	r5, r5, #31
 800dc0c:	fa03 f505 	lsl.w	r5, r3, r5
 800dc10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc14:	421d      	tst	r5, r3
 800dc16:	bf18      	it	ne
 800dc18:	f04f 0801 	movne.w	r8, #1
 800dc1c:	f048 0820 	orr.w	r8, r8, #32
 800dc20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc22:	601c      	str	r4, [r3, #0]
 800dc24:	9b02      	ldr	r3, [sp, #8]
 800dc26:	601e      	str	r6, [r3, #0]
 800dc28:	e6a0      	b.n	800d96c <__gethex+0x114>
 800dc2a:	4290      	cmp	r0, r2
 800dc2c:	f842 3c04 	str.w	r3, [r2, #-4]
 800dc30:	d8d6      	bhi.n	800dbe0 <__gethex+0x388>
 800dc32:	68a2      	ldr	r2, [r4, #8]
 800dc34:	4593      	cmp	fp, r2
 800dc36:	db17      	blt.n	800dc68 <__gethex+0x410>
 800dc38:	6861      	ldr	r1, [r4, #4]
 800dc3a:	4648      	mov	r0, r9
 800dc3c:	3101      	adds	r1, #1
 800dc3e:	f7fe f873 	bl	800bd28 <_Balloc>
 800dc42:	4682      	mov	sl, r0
 800dc44:	b918      	cbnz	r0, 800dc4e <__gethex+0x3f6>
 800dc46:	4602      	mov	r2, r0
 800dc48:	2184      	movs	r1, #132	; 0x84
 800dc4a:	4b1a      	ldr	r3, [pc, #104]	; (800dcb4 <__gethex+0x45c>)
 800dc4c:	e6b1      	b.n	800d9b2 <__gethex+0x15a>
 800dc4e:	6922      	ldr	r2, [r4, #16]
 800dc50:	f104 010c 	add.w	r1, r4, #12
 800dc54:	3202      	adds	r2, #2
 800dc56:	0092      	lsls	r2, r2, #2
 800dc58:	300c      	adds	r0, #12
 800dc5a:	f7fd f8e7 	bl	800ae2c <memcpy>
 800dc5e:	4621      	mov	r1, r4
 800dc60:	4648      	mov	r0, r9
 800dc62:	f7fe f8a1 	bl	800bda8 <_Bfree>
 800dc66:	4654      	mov	r4, sl
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	1c51      	adds	r1, r2, #1
 800dc6c:	6121      	str	r1, [r4, #16]
 800dc6e:	2101      	movs	r1, #1
 800dc70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dc74:	6151      	str	r1, [r2, #20]
 800dc76:	e7bc      	b.n	800dbf2 <__gethex+0x39a>
 800dc78:	6921      	ldr	r1, [r4, #16]
 800dc7a:	4559      	cmp	r1, fp
 800dc7c:	dd0b      	ble.n	800dc96 <__gethex+0x43e>
 800dc7e:	2101      	movs	r1, #1
 800dc80:	4620      	mov	r0, r4
 800dc82:	f7ff fd81 	bl	800d788 <rshift>
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	3601      	adds	r6, #1
 800dc8a:	42b3      	cmp	r3, r6
 800dc8c:	f6ff aeda 	blt.w	800da44 <__gethex+0x1ec>
 800dc90:	f04f 0801 	mov.w	r8, #1
 800dc94:	e7c2      	b.n	800dc1c <__gethex+0x3c4>
 800dc96:	f015 051f 	ands.w	r5, r5, #31
 800dc9a:	d0f9      	beq.n	800dc90 <__gethex+0x438>
 800dc9c:	9b01      	ldr	r3, [sp, #4]
 800dc9e:	f1c5 0520 	rsb	r5, r5, #32
 800dca2:	441a      	add	r2, r3
 800dca4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800dca8:	f7fe f930 	bl	800bf0c <__hi0bits>
 800dcac:	42a8      	cmp	r0, r5
 800dcae:	dbe6      	blt.n	800dc7e <__gethex+0x426>
 800dcb0:	e7ee      	b.n	800dc90 <__gethex+0x438>
 800dcb2:	bf00      	nop
 800dcb4:	0800f64c 	.word	0x0800f64c

0800dcb8 <L_shift>:
 800dcb8:	f1c2 0208 	rsb	r2, r2, #8
 800dcbc:	0092      	lsls	r2, r2, #2
 800dcbe:	b570      	push	{r4, r5, r6, lr}
 800dcc0:	f1c2 0620 	rsb	r6, r2, #32
 800dcc4:	6843      	ldr	r3, [r0, #4]
 800dcc6:	6804      	ldr	r4, [r0, #0]
 800dcc8:	fa03 f506 	lsl.w	r5, r3, r6
 800dccc:	432c      	orrs	r4, r5
 800dcce:	40d3      	lsrs	r3, r2
 800dcd0:	6004      	str	r4, [r0, #0]
 800dcd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcd6:	4288      	cmp	r0, r1
 800dcd8:	d3f4      	bcc.n	800dcc4 <L_shift+0xc>
 800dcda:	bd70      	pop	{r4, r5, r6, pc}

0800dcdc <__match>:
 800dcdc:	b530      	push	{r4, r5, lr}
 800dcde:	6803      	ldr	r3, [r0, #0]
 800dce0:	3301      	adds	r3, #1
 800dce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dce6:	b914      	cbnz	r4, 800dcee <__match+0x12>
 800dce8:	6003      	str	r3, [r0, #0]
 800dcea:	2001      	movs	r0, #1
 800dcec:	bd30      	pop	{r4, r5, pc}
 800dcee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dcf6:	2d19      	cmp	r5, #25
 800dcf8:	bf98      	it	ls
 800dcfa:	3220      	addls	r2, #32
 800dcfc:	42a2      	cmp	r2, r4
 800dcfe:	d0f0      	beq.n	800dce2 <__match+0x6>
 800dd00:	2000      	movs	r0, #0
 800dd02:	e7f3      	b.n	800dcec <__match+0x10>

0800dd04 <__hexnan>:
 800dd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd08:	2500      	movs	r5, #0
 800dd0a:	680b      	ldr	r3, [r1, #0]
 800dd0c:	4682      	mov	sl, r0
 800dd0e:	115e      	asrs	r6, r3, #5
 800dd10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd14:	f013 031f 	ands.w	r3, r3, #31
 800dd18:	bf18      	it	ne
 800dd1a:	3604      	addne	r6, #4
 800dd1c:	1f37      	subs	r7, r6, #4
 800dd1e:	4690      	mov	r8, r2
 800dd20:	46b9      	mov	r9, r7
 800dd22:	463c      	mov	r4, r7
 800dd24:	46ab      	mov	fp, r5
 800dd26:	b087      	sub	sp, #28
 800dd28:	6801      	ldr	r1, [r0, #0]
 800dd2a:	9301      	str	r3, [sp, #4]
 800dd2c:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd30:	9502      	str	r5, [sp, #8]
 800dd32:	784a      	ldrb	r2, [r1, #1]
 800dd34:	1c4b      	adds	r3, r1, #1
 800dd36:	9303      	str	r3, [sp, #12]
 800dd38:	b342      	cbz	r2, 800dd8c <__hexnan+0x88>
 800dd3a:	4610      	mov	r0, r2
 800dd3c:	9105      	str	r1, [sp, #20]
 800dd3e:	9204      	str	r2, [sp, #16]
 800dd40:	f7ff fd75 	bl	800d82e <__hexdig_fun>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d14f      	bne.n	800dde8 <__hexnan+0xe4>
 800dd48:	9a04      	ldr	r2, [sp, #16]
 800dd4a:	9905      	ldr	r1, [sp, #20]
 800dd4c:	2a20      	cmp	r2, #32
 800dd4e:	d818      	bhi.n	800dd82 <__hexnan+0x7e>
 800dd50:	9b02      	ldr	r3, [sp, #8]
 800dd52:	459b      	cmp	fp, r3
 800dd54:	dd13      	ble.n	800dd7e <__hexnan+0x7a>
 800dd56:	454c      	cmp	r4, r9
 800dd58:	d206      	bcs.n	800dd68 <__hexnan+0x64>
 800dd5a:	2d07      	cmp	r5, #7
 800dd5c:	dc04      	bgt.n	800dd68 <__hexnan+0x64>
 800dd5e:	462a      	mov	r2, r5
 800dd60:	4649      	mov	r1, r9
 800dd62:	4620      	mov	r0, r4
 800dd64:	f7ff ffa8 	bl	800dcb8 <L_shift>
 800dd68:	4544      	cmp	r4, r8
 800dd6a:	d950      	bls.n	800de0e <__hexnan+0x10a>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f1a4 0904 	sub.w	r9, r4, #4
 800dd72:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd76:	461d      	mov	r5, r3
 800dd78:	464c      	mov	r4, r9
 800dd7a:	f8cd b008 	str.w	fp, [sp, #8]
 800dd7e:	9903      	ldr	r1, [sp, #12]
 800dd80:	e7d7      	b.n	800dd32 <__hexnan+0x2e>
 800dd82:	2a29      	cmp	r2, #41	; 0x29
 800dd84:	d155      	bne.n	800de32 <__hexnan+0x12e>
 800dd86:	3102      	adds	r1, #2
 800dd88:	f8ca 1000 	str.w	r1, [sl]
 800dd8c:	f1bb 0f00 	cmp.w	fp, #0
 800dd90:	d04f      	beq.n	800de32 <__hexnan+0x12e>
 800dd92:	454c      	cmp	r4, r9
 800dd94:	d206      	bcs.n	800dda4 <__hexnan+0xa0>
 800dd96:	2d07      	cmp	r5, #7
 800dd98:	dc04      	bgt.n	800dda4 <__hexnan+0xa0>
 800dd9a:	462a      	mov	r2, r5
 800dd9c:	4649      	mov	r1, r9
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f7ff ff8a 	bl	800dcb8 <L_shift>
 800dda4:	4544      	cmp	r4, r8
 800dda6:	d934      	bls.n	800de12 <__hexnan+0x10e>
 800dda8:	4623      	mov	r3, r4
 800ddaa:	f1a8 0204 	sub.w	r2, r8, #4
 800ddae:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddb2:	429f      	cmp	r7, r3
 800ddb4:	f842 1f04 	str.w	r1, [r2, #4]!
 800ddb8:	d2f9      	bcs.n	800ddae <__hexnan+0xaa>
 800ddba:	1b3b      	subs	r3, r7, r4
 800ddbc:	f023 0303 	bic.w	r3, r3, #3
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	3e03      	subs	r6, #3
 800ddc4:	3401      	adds	r4, #1
 800ddc6:	42a6      	cmp	r6, r4
 800ddc8:	bf38      	it	cc
 800ddca:	2304      	movcc	r3, #4
 800ddcc:	2200      	movs	r2, #0
 800ddce:	4443      	add	r3, r8
 800ddd0:	f843 2b04 	str.w	r2, [r3], #4
 800ddd4:	429f      	cmp	r7, r3
 800ddd6:	d2fb      	bcs.n	800ddd0 <__hexnan+0xcc>
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	b91b      	cbnz	r3, 800dde4 <__hexnan+0xe0>
 800dddc:	4547      	cmp	r7, r8
 800ddde:	d126      	bne.n	800de2e <__hexnan+0x12a>
 800dde0:	2301      	movs	r3, #1
 800dde2:	603b      	str	r3, [r7, #0]
 800dde4:	2005      	movs	r0, #5
 800dde6:	e025      	b.n	800de34 <__hexnan+0x130>
 800dde8:	3501      	adds	r5, #1
 800ddea:	2d08      	cmp	r5, #8
 800ddec:	f10b 0b01 	add.w	fp, fp, #1
 800ddf0:	dd06      	ble.n	800de00 <__hexnan+0xfc>
 800ddf2:	4544      	cmp	r4, r8
 800ddf4:	d9c3      	bls.n	800dd7e <__hexnan+0x7a>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	2501      	movs	r5, #1
 800ddfa:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddfe:	3c04      	subs	r4, #4
 800de00:	6822      	ldr	r2, [r4, #0]
 800de02:	f000 000f 	and.w	r0, r0, #15
 800de06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de0a:	6020      	str	r0, [r4, #0]
 800de0c:	e7b7      	b.n	800dd7e <__hexnan+0x7a>
 800de0e:	2508      	movs	r5, #8
 800de10:	e7b5      	b.n	800dd7e <__hexnan+0x7a>
 800de12:	9b01      	ldr	r3, [sp, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d0df      	beq.n	800ddd8 <__hexnan+0xd4>
 800de18:	f04f 32ff 	mov.w	r2, #4294967295
 800de1c:	f1c3 0320 	rsb	r3, r3, #32
 800de20:	40da      	lsrs	r2, r3
 800de22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de26:	4013      	ands	r3, r2
 800de28:	f846 3c04 	str.w	r3, [r6, #-4]
 800de2c:	e7d4      	b.n	800ddd8 <__hexnan+0xd4>
 800de2e:	3f04      	subs	r7, #4
 800de30:	e7d2      	b.n	800ddd8 <__hexnan+0xd4>
 800de32:	2004      	movs	r0, #4
 800de34:	b007      	add	sp, #28
 800de36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de3a <__ascii_mbtowc>:
 800de3a:	b082      	sub	sp, #8
 800de3c:	b901      	cbnz	r1, 800de40 <__ascii_mbtowc+0x6>
 800de3e:	a901      	add	r1, sp, #4
 800de40:	b142      	cbz	r2, 800de54 <__ascii_mbtowc+0x1a>
 800de42:	b14b      	cbz	r3, 800de58 <__ascii_mbtowc+0x1e>
 800de44:	7813      	ldrb	r3, [r2, #0]
 800de46:	600b      	str	r3, [r1, #0]
 800de48:	7812      	ldrb	r2, [r2, #0]
 800de4a:	1e10      	subs	r0, r2, #0
 800de4c:	bf18      	it	ne
 800de4e:	2001      	movne	r0, #1
 800de50:	b002      	add	sp, #8
 800de52:	4770      	bx	lr
 800de54:	4610      	mov	r0, r2
 800de56:	e7fb      	b.n	800de50 <__ascii_mbtowc+0x16>
 800de58:	f06f 0001 	mvn.w	r0, #1
 800de5c:	e7f8      	b.n	800de50 <__ascii_mbtowc+0x16>

0800de5e <_realloc_r>:
 800de5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de62:	4680      	mov	r8, r0
 800de64:	4614      	mov	r4, r2
 800de66:	460e      	mov	r6, r1
 800de68:	b921      	cbnz	r1, 800de74 <_realloc_r+0x16>
 800de6a:	4611      	mov	r1, r2
 800de6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de70:	f7fd bece 	b.w	800bc10 <_malloc_r>
 800de74:	b92a      	cbnz	r2, 800de82 <_realloc_r+0x24>
 800de76:	f7fd fe5b 	bl	800bb30 <_free_r>
 800de7a:	4625      	mov	r5, r4
 800de7c:	4628      	mov	r0, r5
 800de7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de82:	f000 f842 	bl	800df0a <_malloc_usable_size_r>
 800de86:	4284      	cmp	r4, r0
 800de88:	4607      	mov	r7, r0
 800de8a:	d802      	bhi.n	800de92 <_realloc_r+0x34>
 800de8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de90:	d812      	bhi.n	800deb8 <_realloc_r+0x5a>
 800de92:	4621      	mov	r1, r4
 800de94:	4640      	mov	r0, r8
 800de96:	f7fd febb 	bl	800bc10 <_malloc_r>
 800de9a:	4605      	mov	r5, r0
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d0ed      	beq.n	800de7c <_realloc_r+0x1e>
 800dea0:	42bc      	cmp	r4, r7
 800dea2:	4622      	mov	r2, r4
 800dea4:	4631      	mov	r1, r6
 800dea6:	bf28      	it	cs
 800dea8:	463a      	movcs	r2, r7
 800deaa:	f7fc ffbf 	bl	800ae2c <memcpy>
 800deae:	4631      	mov	r1, r6
 800deb0:	4640      	mov	r0, r8
 800deb2:	f7fd fe3d 	bl	800bb30 <_free_r>
 800deb6:	e7e1      	b.n	800de7c <_realloc_r+0x1e>
 800deb8:	4635      	mov	r5, r6
 800deba:	e7df      	b.n	800de7c <_realloc_r+0x1e>

0800debc <__ascii_wctomb>:
 800debc:	4603      	mov	r3, r0
 800debe:	4608      	mov	r0, r1
 800dec0:	b141      	cbz	r1, 800ded4 <__ascii_wctomb+0x18>
 800dec2:	2aff      	cmp	r2, #255	; 0xff
 800dec4:	d904      	bls.n	800ded0 <__ascii_wctomb+0x14>
 800dec6:	228a      	movs	r2, #138	; 0x8a
 800dec8:	f04f 30ff 	mov.w	r0, #4294967295
 800decc:	601a      	str	r2, [r3, #0]
 800dece:	4770      	bx	lr
 800ded0:	2001      	movs	r0, #1
 800ded2:	700a      	strb	r2, [r1, #0]
 800ded4:	4770      	bx	lr
	...

0800ded8 <fiprintf>:
 800ded8:	b40e      	push	{r1, r2, r3}
 800deda:	b503      	push	{r0, r1, lr}
 800dedc:	4601      	mov	r1, r0
 800dede:	ab03      	add	r3, sp, #12
 800dee0:	4805      	ldr	r0, [pc, #20]	; (800def8 <fiprintf+0x20>)
 800dee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee6:	6800      	ldr	r0, [r0, #0]
 800dee8:	9301      	str	r3, [sp, #4]
 800deea:	f000 f83d 	bl	800df68 <_vfiprintf_r>
 800deee:	b002      	add	sp, #8
 800def0:	f85d eb04 	ldr.w	lr, [sp], #4
 800def4:	b003      	add	sp, #12
 800def6:	4770      	bx	lr
 800def8:	2000006c 	.word	0x2000006c

0800defc <abort>:
 800defc:	2006      	movs	r0, #6
 800defe:	b508      	push	{r3, lr}
 800df00:	f000 fa0a 	bl	800e318 <raise>
 800df04:	2001      	movs	r0, #1
 800df06:	f7f5 fd4e 	bl	80039a6 <_exit>

0800df0a <_malloc_usable_size_r>:
 800df0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df0e:	1f18      	subs	r0, r3, #4
 800df10:	2b00      	cmp	r3, #0
 800df12:	bfbc      	itt	lt
 800df14:	580b      	ldrlt	r3, [r1, r0]
 800df16:	18c0      	addlt	r0, r0, r3
 800df18:	4770      	bx	lr

0800df1a <__sfputc_r>:
 800df1a:	6893      	ldr	r3, [r2, #8]
 800df1c:	b410      	push	{r4}
 800df1e:	3b01      	subs	r3, #1
 800df20:	2b00      	cmp	r3, #0
 800df22:	6093      	str	r3, [r2, #8]
 800df24:	da07      	bge.n	800df36 <__sfputc_r+0x1c>
 800df26:	6994      	ldr	r4, [r2, #24]
 800df28:	42a3      	cmp	r3, r4
 800df2a:	db01      	blt.n	800df30 <__sfputc_r+0x16>
 800df2c:	290a      	cmp	r1, #10
 800df2e:	d102      	bne.n	800df36 <__sfputc_r+0x1c>
 800df30:	bc10      	pop	{r4}
 800df32:	f000 b933 	b.w	800e19c <__swbuf_r>
 800df36:	6813      	ldr	r3, [r2, #0]
 800df38:	1c58      	adds	r0, r3, #1
 800df3a:	6010      	str	r0, [r2, #0]
 800df3c:	7019      	strb	r1, [r3, #0]
 800df3e:	4608      	mov	r0, r1
 800df40:	bc10      	pop	{r4}
 800df42:	4770      	bx	lr

0800df44 <__sfputs_r>:
 800df44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df46:	4606      	mov	r6, r0
 800df48:	460f      	mov	r7, r1
 800df4a:	4614      	mov	r4, r2
 800df4c:	18d5      	adds	r5, r2, r3
 800df4e:	42ac      	cmp	r4, r5
 800df50:	d101      	bne.n	800df56 <__sfputs_r+0x12>
 800df52:	2000      	movs	r0, #0
 800df54:	e007      	b.n	800df66 <__sfputs_r+0x22>
 800df56:	463a      	mov	r2, r7
 800df58:	4630      	mov	r0, r6
 800df5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df5e:	f7ff ffdc 	bl	800df1a <__sfputc_r>
 800df62:	1c43      	adds	r3, r0, #1
 800df64:	d1f3      	bne.n	800df4e <__sfputs_r+0xa>
 800df66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df68 <_vfiprintf_r>:
 800df68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df6c:	460d      	mov	r5, r1
 800df6e:	4614      	mov	r4, r2
 800df70:	4698      	mov	r8, r3
 800df72:	4606      	mov	r6, r0
 800df74:	b09d      	sub	sp, #116	; 0x74
 800df76:	b118      	cbz	r0, 800df80 <_vfiprintf_r+0x18>
 800df78:	6a03      	ldr	r3, [r0, #32]
 800df7a:	b90b      	cbnz	r3, 800df80 <_vfiprintf_r+0x18>
 800df7c:	f7fc fdda 	bl	800ab34 <__sinit>
 800df80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df82:	07d9      	lsls	r1, r3, #31
 800df84:	d405      	bmi.n	800df92 <_vfiprintf_r+0x2a>
 800df86:	89ab      	ldrh	r3, [r5, #12]
 800df88:	059a      	lsls	r2, r3, #22
 800df8a:	d402      	bmi.n	800df92 <_vfiprintf_r+0x2a>
 800df8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df8e:	f7fc ff3d 	bl	800ae0c <__retarget_lock_acquire_recursive>
 800df92:	89ab      	ldrh	r3, [r5, #12]
 800df94:	071b      	lsls	r3, r3, #28
 800df96:	d501      	bpl.n	800df9c <_vfiprintf_r+0x34>
 800df98:	692b      	ldr	r3, [r5, #16]
 800df9a:	b99b      	cbnz	r3, 800dfc4 <_vfiprintf_r+0x5c>
 800df9c:	4629      	mov	r1, r5
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f000 f93a 	bl	800e218 <__swsetup_r>
 800dfa4:	b170      	cbz	r0, 800dfc4 <_vfiprintf_r+0x5c>
 800dfa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfa8:	07dc      	lsls	r4, r3, #31
 800dfaa:	d504      	bpl.n	800dfb6 <_vfiprintf_r+0x4e>
 800dfac:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb0:	b01d      	add	sp, #116	; 0x74
 800dfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb6:	89ab      	ldrh	r3, [r5, #12]
 800dfb8:	0598      	lsls	r0, r3, #22
 800dfba:	d4f7      	bmi.n	800dfac <_vfiprintf_r+0x44>
 800dfbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfbe:	f7fc ff26 	bl	800ae0e <__retarget_lock_release_recursive>
 800dfc2:	e7f3      	b.n	800dfac <_vfiprintf_r+0x44>
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc8:	2320      	movs	r3, #32
 800dfca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfce:	2330      	movs	r3, #48	; 0x30
 800dfd0:	f04f 0901 	mov.w	r9, #1
 800dfd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e188 <_vfiprintf_r+0x220>
 800dfdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfe0:	4623      	mov	r3, r4
 800dfe2:	469a      	mov	sl, r3
 800dfe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfe8:	b10a      	cbz	r2, 800dfee <_vfiprintf_r+0x86>
 800dfea:	2a25      	cmp	r2, #37	; 0x25
 800dfec:	d1f9      	bne.n	800dfe2 <_vfiprintf_r+0x7a>
 800dfee:	ebba 0b04 	subs.w	fp, sl, r4
 800dff2:	d00b      	beq.n	800e00c <_vfiprintf_r+0xa4>
 800dff4:	465b      	mov	r3, fp
 800dff6:	4622      	mov	r2, r4
 800dff8:	4629      	mov	r1, r5
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7ff ffa2 	bl	800df44 <__sfputs_r>
 800e000:	3001      	adds	r0, #1
 800e002:	f000 80a9 	beq.w	800e158 <_vfiprintf_r+0x1f0>
 800e006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e008:	445a      	add	r2, fp
 800e00a:	9209      	str	r2, [sp, #36]	; 0x24
 800e00c:	f89a 3000 	ldrb.w	r3, [sl]
 800e010:	2b00      	cmp	r3, #0
 800e012:	f000 80a1 	beq.w	800e158 <_vfiprintf_r+0x1f0>
 800e016:	2300      	movs	r3, #0
 800e018:	f04f 32ff 	mov.w	r2, #4294967295
 800e01c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e020:	f10a 0a01 	add.w	sl, sl, #1
 800e024:	9304      	str	r3, [sp, #16]
 800e026:	9307      	str	r3, [sp, #28]
 800e028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e02c:	931a      	str	r3, [sp, #104]	; 0x68
 800e02e:	4654      	mov	r4, sl
 800e030:	2205      	movs	r2, #5
 800e032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e036:	4854      	ldr	r0, [pc, #336]	; (800e188 <_vfiprintf_r+0x220>)
 800e038:	f7fc feea 	bl	800ae10 <memchr>
 800e03c:	9a04      	ldr	r2, [sp, #16]
 800e03e:	b9d8      	cbnz	r0, 800e078 <_vfiprintf_r+0x110>
 800e040:	06d1      	lsls	r1, r2, #27
 800e042:	bf44      	itt	mi
 800e044:	2320      	movmi	r3, #32
 800e046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e04a:	0713      	lsls	r3, r2, #28
 800e04c:	bf44      	itt	mi
 800e04e:	232b      	movmi	r3, #43	; 0x2b
 800e050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e054:	f89a 3000 	ldrb.w	r3, [sl]
 800e058:	2b2a      	cmp	r3, #42	; 0x2a
 800e05a:	d015      	beq.n	800e088 <_vfiprintf_r+0x120>
 800e05c:	4654      	mov	r4, sl
 800e05e:	2000      	movs	r0, #0
 800e060:	f04f 0c0a 	mov.w	ip, #10
 800e064:	9a07      	ldr	r2, [sp, #28]
 800e066:	4621      	mov	r1, r4
 800e068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e06c:	3b30      	subs	r3, #48	; 0x30
 800e06e:	2b09      	cmp	r3, #9
 800e070:	d94d      	bls.n	800e10e <_vfiprintf_r+0x1a6>
 800e072:	b1b0      	cbz	r0, 800e0a2 <_vfiprintf_r+0x13a>
 800e074:	9207      	str	r2, [sp, #28]
 800e076:	e014      	b.n	800e0a2 <_vfiprintf_r+0x13a>
 800e078:	eba0 0308 	sub.w	r3, r0, r8
 800e07c:	fa09 f303 	lsl.w	r3, r9, r3
 800e080:	4313      	orrs	r3, r2
 800e082:	46a2      	mov	sl, r4
 800e084:	9304      	str	r3, [sp, #16]
 800e086:	e7d2      	b.n	800e02e <_vfiprintf_r+0xc6>
 800e088:	9b03      	ldr	r3, [sp, #12]
 800e08a:	1d19      	adds	r1, r3, #4
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	9103      	str	r1, [sp, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	bfbb      	ittet	lt
 800e094:	425b      	neglt	r3, r3
 800e096:	f042 0202 	orrlt.w	r2, r2, #2
 800e09a:	9307      	strge	r3, [sp, #28]
 800e09c:	9307      	strlt	r3, [sp, #28]
 800e09e:	bfb8      	it	lt
 800e0a0:	9204      	strlt	r2, [sp, #16]
 800e0a2:	7823      	ldrb	r3, [r4, #0]
 800e0a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e0a6:	d10c      	bne.n	800e0c2 <_vfiprintf_r+0x15a>
 800e0a8:	7863      	ldrb	r3, [r4, #1]
 800e0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ac:	d134      	bne.n	800e118 <_vfiprintf_r+0x1b0>
 800e0ae:	9b03      	ldr	r3, [sp, #12]
 800e0b0:	3402      	adds	r4, #2
 800e0b2:	1d1a      	adds	r2, r3, #4
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	9203      	str	r2, [sp, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	bfb8      	it	lt
 800e0bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0c0:	9305      	str	r3, [sp, #20]
 800e0c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e18c <_vfiprintf_r+0x224>
 800e0c6:	2203      	movs	r2, #3
 800e0c8:	4650      	mov	r0, sl
 800e0ca:	7821      	ldrb	r1, [r4, #0]
 800e0cc:	f7fc fea0 	bl	800ae10 <memchr>
 800e0d0:	b138      	cbz	r0, 800e0e2 <_vfiprintf_r+0x17a>
 800e0d2:	2240      	movs	r2, #64	; 0x40
 800e0d4:	9b04      	ldr	r3, [sp, #16]
 800e0d6:	eba0 000a 	sub.w	r0, r0, sl
 800e0da:	4082      	lsls	r2, r0
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	3401      	adds	r4, #1
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e6:	2206      	movs	r2, #6
 800e0e8:	4829      	ldr	r0, [pc, #164]	; (800e190 <_vfiprintf_r+0x228>)
 800e0ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0ee:	f7fc fe8f 	bl	800ae10 <memchr>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d03f      	beq.n	800e176 <_vfiprintf_r+0x20e>
 800e0f6:	4b27      	ldr	r3, [pc, #156]	; (800e194 <_vfiprintf_r+0x22c>)
 800e0f8:	bb1b      	cbnz	r3, 800e142 <_vfiprintf_r+0x1da>
 800e0fa:	9b03      	ldr	r3, [sp, #12]
 800e0fc:	3307      	adds	r3, #7
 800e0fe:	f023 0307 	bic.w	r3, r3, #7
 800e102:	3308      	adds	r3, #8
 800e104:	9303      	str	r3, [sp, #12]
 800e106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e108:	443b      	add	r3, r7
 800e10a:	9309      	str	r3, [sp, #36]	; 0x24
 800e10c:	e768      	b.n	800dfe0 <_vfiprintf_r+0x78>
 800e10e:	460c      	mov	r4, r1
 800e110:	2001      	movs	r0, #1
 800e112:	fb0c 3202 	mla	r2, ip, r2, r3
 800e116:	e7a6      	b.n	800e066 <_vfiprintf_r+0xfe>
 800e118:	2300      	movs	r3, #0
 800e11a:	f04f 0c0a 	mov.w	ip, #10
 800e11e:	4619      	mov	r1, r3
 800e120:	3401      	adds	r4, #1
 800e122:	9305      	str	r3, [sp, #20]
 800e124:	4620      	mov	r0, r4
 800e126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e12a:	3a30      	subs	r2, #48	; 0x30
 800e12c:	2a09      	cmp	r2, #9
 800e12e:	d903      	bls.n	800e138 <_vfiprintf_r+0x1d0>
 800e130:	2b00      	cmp	r3, #0
 800e132:	d0c6      	beq.n	800e0c2 <_vfiprintf_r+0x15a>
 800e134:	9105      	str	r1, [sp, #20]
 800e136:	e7c4      	b.n	800e0c2 <_vfiprintf_r+0x15a>
 800e138:	4604      	mov	r4, r0
 800e13a:	2301      	movs	r3, #1
 800e13c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e140:	e7f0      	b.n	800e124 <_vfiprintf_r+0x1bc>
 800e142:	ab03      	add	r3, sp, #12
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	462a      	mov	r2, r5
 800e148:	4630      	mov	r0, r6
 800e14a:	4b13      	ldr	r3, [pc, #76]	; (800e198 <_vfiprintf_r+0x230>)
 800e14c:	a904      	add	r1, sp, #16
 800e14e:	f7fb fea7 	bl	8009ea0 <_printf_float>
 800e152:	4607      	mov	r7, r0
 800e154:	1c78      	adds	r0, r7, #1
 800e156:	d1d6      	bne.n	800e106 <_vfiprintf_r+0x19e>
 800e158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e15a:	07d9      	lsls	r1, r3, #31
 800e15c:	d405      	bmi.n	800e16a <_vfiprintf_r+0x202>
 800e15e:	89ab      	ldrh	r3, [r5, #12]
 800e160:	059a      	lsls	r2, r3, #22
 800e162:	d402      	bmi.n	800e16a <_vfiprintf_r+0x202>
 800e164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e166:	f7fc fe52 	bl	800ae0e <__retarget_lock_release_recursive>
 800e16a:	89ab      	ldrh	r3, [r5, #12]
 800e16c:	065b      	lsls	r3, r3, #25
 800e16e:	f53f af1d 	bmi.w	800dfac <_vfiprintf_r+0x44>
 800e172:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e174:	e71c      	b.n	800dfb0 <_vfiprintf_r+0x48>
 800e176:	ab03      	add	r3, sp, #12
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	462a      	mov	r2, r5
 800e17c:	4630      	mov	r0, r6
 800e17e:	4b06      	ldr	r3, [pc, #24]	; (800e198 <_vfiprintf_r+0x230>)
 800e180:	a904      	add	r1, sp, #16
 800e182:	f7fc f92d 	bl	800a3e0 <_printf_i>
 800e186:	e7e4      	b.n	800e152 <_vfiprintf_r+0x1ea>
 800e188:	0800f808 	.word	0x0800f808
 800e18c:	0800f80e 	.word	0x0800f80e
 800e190:	0800f812 	.word	0x0800f812
 800e194:	08009ea1 	.word	0x08009ea1
 800e198:	0800df45 	.word	0x0800df45

0800e19c <__swbuf_r>:
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	460e      	mov	r6, r1
 800e1a0:	4614      	mov	r4, r2
 800e1a2:	4605      	mov	r5, r0
 800e1a4:	b118      	cbz	r0, 800e1ae <__swbuf_r+0x12>
 800e1a6:	6a03      	ldr	r3, [r0, #32]
 800e1a8:	b90b      	cbnz	r3, 800e1ae <__swbuf_r+0x12>
 800e1aa:	f7fc fcc3 	bl	800ab34 <__sinit>
 800e1ae:	69a3      	ldr	r3, [r4, #24]
 800e1b0:	60a3      	str	r3, [r4, #8]
 800e1b2:	89a3      	ldrh	r3, [r4, #12]
 800e1b4:	071a      	lsls	r2, r3, #28
 800e1b6:	d525      	bpl.n	800e204 <__swbuf_r+0x68>
 800e1b8:	6923      	ldr	r3, [r4, #16]
 800e1ba:	b31b      	cbz	r3, 800e204 <__swbuf_r+0x68>
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	6922      	ldr	r2, [r4, #16]
 800e1c0:	b2f6      	uxtb	r6, r6
 800e1c2:	1a98      	subs	r0, r3, r2
 800e1c4:	6963      	ldr	r3, [r4, #20]
 800e1c6:	4637      	mov	r7, r6
 800e1c8:	4283      	cmp	r3, r0
 800e1ca:	dc04      	bgt.n	800e1d6 <__swbuf_r+0x3a>
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f7ff fa3e 	bl	800d650 <_fflush_r>
 800e1d4:	b9e0      	cbnz	r0, 800e210 <__swbuf_r+0x74>
 800e1d6:	68a3      	ldr	r3, [r4, #8]
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	60a3      	str	r3, [r4, #8]
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	1c5a      	adds	r2, r3, #1
 800e1e0:	6022      	str	r2, [r4, #0]
 800e1e2:	701e      	strb	r6, [r3, #0]
 800e1e4:	6962      	ldr	r2, [r4, #20]
 800e1e6:	1c43      	adds	r3, r0, #1
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d004      	beq.n	800e1f6 <__swbuf_r+0x5a>
 800e1ec:	89a3      	ldrh	r3, [r4, #12]
 800e1ee:	07db      	lsls	r3, r3, #31
 800e1f0:	d506      	bpl.n	800e200 <__swbuf_r+0x64>
 800e1f2:	2e0a      	cmp	r6, #10
 800e1f4:	d104      	bne.n	800e200 <__swbuf_r+0x64>
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	f7ff fa29 	bl	800d650 <_fflush_r>
 800e1fe:	b938      	cbnz	r0, 800e210 <__swbuf_r+0x74>
 800e200:	4638      	mov	r0, r7
 800e202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e204:	4621      	mov	r1, r4
 800e206:	4628      	mov	r0, r5
 800e208:	f000 f806 	bl	800e218 <__swsetup_r>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d0d5      	beq.n	800e1bc <__swbuf_r+0x20>
 800e210:	f04f 37ff 	mov.w	r7, #4294967295
 800e214:	e7f4      	b.n	800e200 <__swbuf_r+0x64>
	...

0800e218 <__swsetup_r>:
 800e218:	b538      	push	{r3, r4, r5, lr}
 800e21a:	4b2a      	ldr	r3, [pc, #168]	; (800e2c4 <__swsetup_r+0xac>)
 800e21c:	4605      	mov	r5, r0
 800e21e:	6818      	ldr	r0, [r3, #0]
 800e220:	460c      	mov	r4, r1
 800e222:	b118      	cbz	r0, 800e22c <__swsetup_r+0x14>
 800e224:	6a03      	ldr	r3, [r0, #32]
 800e226:	b90b      	cbnz	r3, 800e22c <__swsetup_r+0x14>
 800e228:	f7fc fc84 	bl	800ab34 <__sinit>
 800e22c:	89a3      	ldrh	r3, [r4, #12]
 800e22e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e232:	0718      	lsls	r0, r3, #28
 800e234:	d422      	bmi.n	800e27c <__swsetup_r+0x64>
 800e236:	06d9      	lsls	r1, r3, #27
 800e238:	d407      	bmi.n	800e24a <__swsetup_r+0x32>
 800e23a:	2309      	movs	r3, #9
 800e23c:	602b      	str	r3, [r5, #0]
 800e23e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e242:	f04f 30ff 	mov.w	r0, #4294967295
 800e246:	81a3      	strh	r3, [r4, #12]
 800e248:	e034      	b.n	800e2b4 <__swsetup_r+0x9c>
 800e24a:	0758      	lsls	r0, r3, #29
 800e24c:	d512      	bpl.n	800e274 <__swsetup_r+0x5c>
 800e24e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e250:	b141      	cbz	r1, 800e264 <__swsetup_r+0x4c>
 800e252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e256:	4299      	cmp	r1, r3
 800e258:	d002      	beq.n	800e260 <__swsetup_r+0x48>
 800e25a:	4628      	mov	r0, r5
 800e25c:	f7fd fc68 	bl	800bb30 <_free_r>
 800e260:	2300      	movs	r3, #0
 800e262:	6363      	str	r3, [r4, #52]	; 0x34
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e26a:	81a3      	strh	r3, [r4, #12]
 800e26c:	2300      	movs	r3, #0
 800e26e:	6063      	str	r3, [r4, #4]
 800e270:	6923      	ldr	r3, [r4, #16]
 800e272:	6023      	str	r3, [r4, #0]
 800e274:	89a3      	ldrh	r3, [r4, #12]
 800e276:	f043 0308 	orr.w	r3, r3, #8
 800e27a:	81a3      	strh	r3, [r4, #12]
 800e27c:	6923      	ldr	r3, [r4, #16]
 800e27e:	b94b      	cbnz	r3, 800e294 <__swsetup_r+0x7c>
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e28a:	d003      	beq.n	800e294 <__swsetup_r+0x7c>
 800e28c:	4621      	mov	r1, r4
 800e28e:	4628      	mov	r0, r5
 800e290:	f000 f883 	bl	800e39a <__smakebuf_r>
 800e294:	89a0      	ldrh	r0, [r4, #12]
 800e296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e29a:	f010 0301 	ands.w	r3, r0, #1
 800e29e:	d00a      	beq.n	800e2b6 <__swsetup_r+0x9e>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	60a3      	str	r3, [r4, #8]
 800e2a4:	6963      	ldr	r3, [r4, #20]
 800e2a6:	425b      	negs	r3, r3
 800e2a8:	61a3      	str	r3, [r4, #24]
 800e2aa:	6923      	ldr	r3, [r4, #16]
 800e2ac:	b943      	cbnz	r3, 800e2c0 <__swsetup_r+0xa8>
 800e2ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2b2:	d1c4      	bne.n	800e23e <__swsetup_r+0x26>
 800e2b4:	bd38      	pop	{r3, r4, r5, pc}
 800e2b6:	0781      	lsls	r1, r0, #30
 800e2b8:	bf58      	it	pl
 800e2ba:	6963      	ldrpl	r3, [r4, #20]
 800e2bc:	60a3      	str	r3, [r4, #8]
 800e2be:	e7f4      	b.n	800e2aa <__swsetup_r+0x92>
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	e7f7      	b.n	800e2b4 <__swsetup_r+0x9c>
 800e2c4:	2000006c 	.word	0x2000006c

0800e2c8 <_raise_r>:
 800e2c8:	291f      	cmp	r1, #31
 800e2ca:	b538      	push	{r3, r4, r5, lr}
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	460d      	mov	r5, r1
 800e2d0:	d904      	bls.n	800e2dc <_raise_r+0x14>
 800e2d2:	2316      	movs	r3, #22
 800e2d4:	6003      	str	r3, [r0, #0]
 800e2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2da:	bd38      	pop	{r3, r4, r5, pc}
 800e2dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e2de:	b112      	cbz	r2, 800e2e6 <_raise_r+0x1e>
 800e2e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2e4:	b94b      	cbnz	r3, 800e2fa <_raise_r+0x32>
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	f000 f830 	bl	800e34c <_getpid_r>
 800e2ec:	462a      	mov	r2, r5
 800e2ee:	4601      	mov	r1, r0
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2f6:	f000 b817 	b.w	800e328 <_kill_r>
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d00a      	beq.n	800e314 <_raise_r+0x4c>
 800e2fe:	1c59      	adds	r1, r3, #1
 800e300:	d103      	bne.n	800e30a <_raise_r+0x42>
 800e302:	2316      	movs	r3, #22
 800e304:	6003      	str	r3, [r0, #0]
 800e306:	2001      	movs	r0, #1
 800e308:	e7e7      	b.n	800e2da <_raise_r+0x12>
 800e30a:	2400      	movs	r4, #0
 800e30c:	4628      	mov	r0, r5
 800e30e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e312:	4798      	blx	r3
 800e314:	2000      	movs	r0, #0
 800e316:	e7e0      	b.n	800e2da <_raise_r+0x12>

0800e318 <raise>:
 800e318:	4b02      	ldr	r3, [pc, #8]	; (800e324 <raise+0xc>)
 800e31a:	4601      	mov	r1, r0
 800e31c:	6818      	ldr	r0, [r3, #0]
 800e31e:	f7ff bfd3 	b.w	800e2c8 <_raise_r>
 800e322:	bf00      	nop
 800e324:	2000006c 	.word	0x2000006c

0800e328 <_kill_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	2300      	movs	r3, #0
 800e32c:	4d06      	ldr	r5, [pc, #24]	; (800e348 <_kill_r+0x20>)
 800e32e:	4604      	mov	r4, r0
 800e330:	4608      	mov	r0, r1
 800e332:	4611      	mov	r1, r2
 800e334:	602b      	str	r3, [r5, #0]
 800e336:	f7f5 fb26 	bl	8003986 <_kill>
 800e33a:	1c43      	adds	r3, r0, #1
 800e33c:	d102      	bne.n	800e344 <_kill_r+0x1c>
 800e33e:	682b      	ldr	r3, [r5, #0]
 800e340:	b103      	cbz	r3, 800e344 <_kill_r+0x1c>
 800e342:	6023      	str	r3, [r4, #0]
 800e344:	bd38      	pop	{r3, r4, r5, pc}
 800e346:	bf00      	nop
 800e348:	20003f8c 	.word	0x20003f8c

0800e34c <_getpid_r>:
 800e34c:	f7f5 bb14 	b.w	8003978 <_getpid>

0800e350 <__swhatbuf_r>:
 800e350:	b570      	push	{r4, r5, r6, lr}
 800e352:	460c      	mov	r4, r1
 800e354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e358:	4615      	mov	r5, r2
 800e35a:	2900      	cmp	r1, #0
 800e35c:	461e      	mov	r6, r3
 800e35e:	b096      	sub	sp, #88	; 0x58
 800e360:	da0c      	bge.n	800e37c <__swhatbuf_r+0x2c>
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	2100      	movs	r1, #0
 800e366:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e36a:	bf0c      	ite	eq
 800e36c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e370:	2340      	movne	r3, #64	; 0x40
 800e372:	2000      	movs	r0, #0
 800e374:	6031      	str	r1, [r6, #0]
 800e376:	602b      	str	r3, [r5, #0]
 800e378:	b016      	add	sp, #88	; 0x58
 800e37a:	bd70      	pop	{r4, r5, r6, pc}
 800e37c:	466a      	mov	r2, sp
 800e37e:	f000 f849 	bl	800e414 <_fstat_r>
 800e382:	2800      	cmp	r0, #0
 800e384:	dbed      	blt.n	800e362 <__swhatbuf_r+0x12>
 800e386:	9901      	ldr	r1, [sp, #4]
 800e388:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e38c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e390:	4259      	negs	r1, r3
 800e392:	4159      	adcs	r1, r3
 800e394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e398:	e7eb      	b.n	800e372 <__swhatbuf_r+0x22>

0800e39a <__smakebuf_r>:
 800e39a:	898b      	ldrh	r3, [r1, #12]
 800e39c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e39e:	079d      	lsls	r5, r3, #30
 800e3a0:	4606      	mov	r6, r0
 800e3a2:	460c      	mov	r4, r1
 800e3a4:	d507      	bpl.n	800e3b6 <__smakebuf_r+0x1c>
 800e3a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3aa:	6023      	str	r3, [r4, #0]
 800e3ac:	6123      	str	r3, [r4, #16]
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	6163      	str	r3, [r4, #20]
 800e3b2:	b002      	add	sp, #8
 800e3b4:	bd70      	pop	{r4, r5, r6, pc}
 800e3b6:	466a      	mov	r2, sp
 800e3b8:	ab01      	add	r3, sp, #4
 800e3ba:	f7ff ffc9 	bl	800e350 <__swhatbuf_r>
 800e3be:	9900      	ldr	r1, [sp, #0]
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f7fd fc24 	bl	800bc10 <_malloc_r>
 800e3c8:	b948      	cbnz	r0, 800e3de <__smakebuf_r+0x44>
 800e3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ce:	059a      	lsls	r2, r3, #22
 800e3d0:	d4ef      	bmi.n	800e3b2 <__smakebuf_r+0x18>
 800e3d2:	f023 0303 	bic.w	r3, r3, #3
 800e3d6:	f043 0302 	orr.w	r3, r3, #2
 800e3da:	81a3      	strh	r3, [r4, #12]
 800e3dc:	e7e3      	b.n	800e3a6 <__smakebuf_r+0xc>
 800e3de:	89a3      	ldrh	r3, [r4, #12]
 800e3e0:	6020      	str	r0, [r4, #0]
 800e3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3e6:	81a3      	strh	r3, [r4, #12]
 800e3e8:	9b00      	ldr	r3, [sp, #0]
 800e3ea:	6120      	str	r0, [r4, #16]
 800e3ec:	6163      	str	r3, [r4, #20]
 800e3ee:	9b01      	ldr	r3, [sp, #4]
 800e3f0:	b15b      	cbz	r3, 800e40a <__smakebuf_r+0x70>
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3f8:	f000 f81e 	bl	800e438 <_isatty_r>
 800e3fc:	b128      	cbz	r0, 800e40a <__smakebuf_r+0x70>
 800e3fe:	89a3      	ldrh	r3, [r4, #12]
 800e400:	f023 0303 	bic.w	r3, r3, #3
 800e404:	f043 0301 	orr.w	r3, r3, #1
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	89a3      	ldrh	r3, [r4, #12]
 800e40c:	431d      	orrs	r5, r3
 800e40e:	81a5      	strh	r5, [r4, #12]
 800e410:	e7cf      	b.n	800e3b2 <__smakebuf_r+0x18>
	...

0800e414 <_fstat_r>:
 800e414:	b538      	push	{r3, r4, r5, lr}
 800e416:	2300      	movs	r3, #0
 800e418:	4d06      	ldr	r5, [pc, #24]	; (800e434 <_fstat_r+0x20>)
 800e41a:	4604      	mov	r4, r0
 800e41c:	4608      	mov	r0, r1
 800e41e:	4611      	mov	r1, r2
 800e420:	602b      	str	r3, [r5, #0]
 800e422:	f7f5 fb0e 	bl	8003a42 <_fstat>
 800e426:	1c43      	adds	r3, r0, #1
 800e428:	d102      	bne.n	800e430 <_fstat_r+0x1c>
 800e42a:	682b      	ldr	r3, [r5, #0]
 800e42c:	b103      	cbz	r3, 800e430 <_fstat_r+0x1c>
 800e42e:	6023      	str	r3, [r4, #0]
 800e430:	bd38      	pop	{r3, r4, r5, pc}
 800e432:	bf00      	nop
 800e434:	20003f8c 	.word	0x20003f8c

0800e438 <_isatty_r>:
 800e438:	b538      	push	{r3, r4, r5, lr}
 800e43a:	2300      	movs	r3, #0
 800e43c:	4d05      	ldr	r5, [pc, #20]	; (800e454 <_isatty_r+0x1c>)
 800e43e:	4604      	mov	r4, r0
 800e440:	4608      	mov	r0, r1
 800e442:	602b      	str	r3, [r5, #0]
 800e444:	f7f5 fb0c 	bl	8003a60 <_isatty>
 800e448:	1c43      	adds	r3, r0, #1
 800e44a:	d102      	bne.n	800e452 <_isatty_r+0x1a>
 800e44c:	682b      	ldr	r3, [r5, #0]
 800e44e:	b103      	cbz	r3, 800e452 <_isatty_r+0x1a>
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	bd38      	pop	{r3, r4, r5, pc}
 800e454:	20003f8c 	.word	0x20003f8c

0800e458 <pow>:
 800e458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e45c:	4614      	mov	r4, r2
 800e45e:	461d      	mov	r5, r3
 800e460:	4680      	mov	r8, r0
 800e462:	4689      	mov	r9, r1
 800e464:	f000 f868 	bl	800e538 <__ieee754_pow>
 800e468:	4622      	mov	r2, r4
 800e46a:	4606      	mov	r6, r0
 800e46c:	460f      	mov	r7, r1
 800e46e:	462b      	mov	r3, r5
 800e470:	4620      	mov	r0, r4
 800e472:	4629      	mov	r1, r5
 800e474:	f7f2 faca 	bl	8000a0c <__aeabi_dcmpun>
 800e478:	bbc8      	cbnz	r0, 800e4ee <pow+0x96>
 800e47a:	2200      	movs	r2, #0
 800e47c:	2300      	movs	r3, #0
 800e47e:	4640      	mov	r0, r8
 800e480:	4649      	mov	r1, r9
 800e482:	f7f2 fa91 	bl	80009a8 <__aeabi_dcmpeq>
 800e486:	b1b8      	cbz	r0, 800e4b8 <pow+0x60>
 800e488:	2200      	movs	r2, #0
 800e48a:	2300      	movs	r3, #0
 800e48c:	4620      	mov	r0, r4
 800e48e:	4629      	mov	r1, r5
 800e490:	f7f2 fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 800e494:	2800      	cmp	r0, #0
 800e496:	d141      	bne.n	800e51c <pow+0xc4>
 800e498:	4620      	mov	r0, r4
 800e49a:	4629      	mov	r1, r5
 800e49c:	f000 f844 	bl	800e528 <finite>
 800e4a0:	b328      	cbz	r0, 800e4ee <pow+0x96>
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	f7f2 fa87 	bl	80009bc <__aeabi_dcmplt>
 800e4ae:	b1f0      	cbz	r0, 800e4ee <pow+0x96>
 800e4b0:	f7fc fc82 	bl	800adb8 <__errno>
 800e4b4:	2322      	movs	r3, #34	; 0x22
 800e4b6:	e019      	b.n	800e4ec <pow+0x94>
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	f000 f834 	bl	800e528 <finite>
 800e4c0:	b9c8      	cbnz	r0, 800e4f6 <pow+0x9e>
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	4649      	mov	r1, r9
 800e4c6:	f000 f82f 	bl	800e528 <finite>
 800e4ca:	b1a0      	cbz	r0, 800e4f6 <pow+0x9e>
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	f000 f82a 	bl	800e528 <finite>
 800e4d4:	b178      	cbz	r0, 800e4f6 <pow+0x9e>
 800e4d6:	4632      	mov	r2, r6
 800e4d8:	463b      	mov	r3, r7
 800e4da:	4630      	mov	r0, r6
 800e4dc:	4639      	mov	r1, r7
 800e4de:	f7f2 fa95 	bl	8000a0c <__aeabi_dcmpun>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d0e4      	beq.n	800e4b0 <pow+0x58>
 800e4e6:	f7fc fc67 	bl	800adb8 <__errno>
 800e4ea:	2321      	movs	r3, #33	; 0x21
 800e4ec:	6003      	str	r3, [r0, #0]
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	4639      	mov	r1, r7
 800e4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	4639      	mov	r1, r7
 800e4fe:	f7f2 fa53 	bl	80009a8 <__aeabi_dcmpeq>
 800e502:	2800      	cmp	r0, #0
 800e504:	d0f3      	beq.n	800e4ee <pow+0x96>
 800e506:	4640      	mov	r0, r8
 800e508:	4649      	mov	r1, r9
 800e50a:	f000 f80d 	bl	800e528 <finite>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d0ed      	beq.n	800e4ee <pow+0x96>
 800e512:	4620      	mov	r0, r4
 800e514:	4629      	mov	r1, r5
 800e516:	f000 f807 	bl	800e528 <finite>
 800e51a:	e7c8      	b.n	800e4ae <pow+0x56>
 800e51c:	2600      	movs	r6, #0
 800e51e:	4f01      	ldr	r7, [pc, #4]	; (800e524 <pow+0xcc>)
 800e520:	e7e5      	b.n	800e4ee <pow+0x96>
 800e522:	bf00      	nop
 800e524:	3ff00000 	.word	0x3ff00000

0800e528 <finite>:
 800e528:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e52c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e530:	0fc0      	lsrs	r0, r0, #31
 800e532:	4770      	bx	lr
 800e534:	0000      	movs	r0, r0
	...

0800e538 <__ieee754_pow>:
 800e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53c:	b093      	sub	sp, #76	; 0x4c
 800e53e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e542:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800e546:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e54a:	4689      	mov	r9, r1
 800e54c:	ea56 0102 	orrs.w	r1, r6, r2
 800e550:	4680      	mov	r8, r0
 800e552:	d111      	bne.n	800e578 <__ieee754_pow+0x40>
 800e554:	1803      	adds	r3, r0, r0
 800e556:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800e55a:	4152      	adcs	r2, r2
 800e55c:	4299      	cmp	r1, r3
 800e55e:	4b82      	ldr	r3, [pc, #520]	; (800e768 <__ieee754_pow+0x230>)
 800e560:	4193      	sbcs	r3, r2
 800e562:	f080 84ba 	bcs.w	800eeda <__ieee754_pow+0x9a2>
 800e566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e56a:	4640      	mov	r0, r8
 800e56c:	4649      	mov	r1, r9
 800e56e:	f7f1 fdfd 	bl	800016c <__adddf3>
 800e572:	4683      	mov	fp, r0
 800e574:	468c      	mov	ip, r1
 800e576:	e06f      	b.n	800e658 <__ieee754_pow+0x120>
 800e578:	4b7c      	ldr	r3, [pc, #496]	; (800e76c <__ieee754_pow+0x234>)
 800e57a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800e57e:	429c      	cmp	r4, r3
 800e580:	464d      	mov	r5, r9
 800e582:	4682      	mov	sl, r0
 800e584:	dc06      	bgt.n	800e594 <__ieee754_pow+0x5c>
 800e586:	d101      	bne.n	800e58c <__ieee754_pow+0x54>
 800e588:	2800      	cmp	r0, #0
 800e58a:	d1ec      	bne.n	800e566 <__ieee754_pow+0x2e>
 800e58c:	429e      	cmp	r6, r3
 800e58e:	dc01      	bgt.n	800e594 <__ieee754_pow+0x5c>
 800e590:	d10f      	bne.n	800e5b2 <__ieee754_pow+0x7a>
 800e592:	b172      	cbz	r2, 800e5b2 <__ieee754_pow+0x7a>
 800e594:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e598:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e59c:	ea55 050a 	orrs.w	r5, r5, sl
 800e5a0:	d1e1      	bne.n	800e566 <__ieee754_pow+0x2e>
 800e5a2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e5a6:	18db      	adds	r3, r3, r3
 800e5a8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e5ac:	4152      	adcs	r2, r2
 800e5ae:	429d      	cmp	r5, r3
 800e5b0:	e7d5      	b.n	800e55e <__ieee754_pow+0x26>
 800e5b2:	2d00      	cmp	r5, #0
 800e5b4:	da39      	bge.n	800e62a <__ieee754_pow+0xf2>
 800e5b6:	4b6e      	ldr	r3, [pc, #440]	; (800e770 <__ieee754_pow+0x238>)
 800e5b8:	429e      	cmp	r6, r3
 800e5ba:	dc52      	bgt.n	800e662 <__ieee754_pow+0x12a>
 800e5bc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e5c0:	429e      	cmp	r6, r3
 800e5c2:	f340 849d 	ble.w	800ef00 <__ieee754_pow+0x9c8>
 800e5c6:	1533      	asrs	r3, r6, #20
 800e5c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e5cc:	2b14      	cmp	r3, #20
 800e5ce:	dd0f      	ble.n	800e5f0 <__ieee754_pow+0xb8>
 800e5d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e5d4:	fa22 f103 	lsr.w	r1, r2, r3
 800e5d8:	fa01 f303 	lsl.w	r3, r1, r3
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	f040 848f 	bne.w	800ef00 <__ieee754_pow+0x9c8>
 800e5e2:	f001 0101 	and.w	r1, r1, #1
 800e5e6:	f1c1 0302 	rsb	r3, r1, #2
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	b182      	cbz	r2, 800e610 <__ieee754_pow+0xd8>
 800e5ee:	e05d      	b.n	800e6ac <__ieee754_pow+0x174>
 800e5f0:	2a00      	cmp	r2, #0
 800e5f2:	d159      	bne.n	800e6a8 <__ieee754_pow+0x170>
 800e5f4:	f1c3 0314 	rsb	r3, r3, #20
 800e5f8:	fa46 f103 	asr.w	r1, r6, r3
 800e5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800e600:	42b3      	cmp	r3, r6
 800e602:	f040 847a 	bne.w	800eefa <__ieee754_pow+0x9c2>
 800e606:	f001 0101 	and.w	r1, r1, #1
 800e60a:	f1c1 0302 	rsb	r3, r1, #2
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	4b58      	ldr	r3, [pc, #352]	; (800e774 <__ieee754_pow+0x23c>)
 800e612:	429e      	cmp	r6, r3
 800e614:	d132      	bne.n	800e67c <__ieee754_pow+0x144>
 800e616:	2f00      	cmp	r7, #0
 800e618:	f280 846b 	bge.w	800eef2 <__ieee754_pow+0x9ba>
 800e61c:	4642      	mov	r2, r8
 800e61e:	464b      	mov	r3, r9
 800e620:	2000      	movs	r0, #0
 800e622:	4954      	ldr	r1, [pc, #336]	; (800e774 <__ieee754_pow+0x23c>)
 800e624:	f7f2 f882 	bl	800072c <__aeabi_ddiv>
 800e628:	e7a3      	b.n	800e572 <__ieee754_pow+0x3a>
 800e62a:	2300      	movs	r3, #0
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	2a00      	cmp	r2, #0
 800e630:	d13c      	bne.n	800e6ac <__ieee754_pow+0x174>
 800e632:	4b4e      	ldr	r3, [pc, #312]	; (800e76c <__ieee754_pow+0x234>)
 800e634:	429e      	cmp	r6, r3
 800e636:	d1eb      	bne.n	800e610 <__ieee754_pow+0xd8>
 800e638:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e63c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e640:	ea53 030a 	orrs.w	r3, r3, sl
 800e644:	f000 8449 	beq.w	800eeda <__ieee754_pow+0x9a2>
 800e648:	4b4b      	ldr	r3, [pc, #300]	; (800e778 <__ieee754_pow+0x240>)
 800e64a:	429c      	cmp	r4, r3
 800e64c:	dd0b      	ble.n	800e666 <__ieee754_pow+0x12e>
 800e64e:	2f00      	cmp	r7, #0
 800e650:	f2c0 8449 	blt.w	800eee6 <__ieee754_pow+0x9ae>
 800e654:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800e658:	4658      	mov	r0, fp
 800e65a:	4661      	mov	r1, ip
 800e65c:	b013      	add	sp, #76	; 0x4c
 800e65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e662:	2302      	movs	r3, #2
 800e664:	e7e2      	b.n	800e62c <__ieee754_pow+0xf4>
 800e666:	2f00      	cmp	r7, #0
 800e668:	f04f 0b00 	mov.w	fp, #0
 800e66c:	f04f 0c00 	mov.w	ip, #0
 800e670:	daf2      	bge.n	800e658 <__ieee754_pow+0x120>
 800e672:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e676:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e67a:	e7ed      	b.n	800e658 <__ieee754_pow+0x120>
 800e67c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e680:	d106      	bne.n	800e690 <__ieee754_pow+0x158>
 800e682:	4642      	mov	r2, r8
 800e684:	464b      	mov	r3, r9
 800e686:	4640      	mov	r0, r8
 800e688:	4649      	mov	r1, r9
 800e68a:	f7f1 ff25 	bl	80004d8 <__aeabi_dmul>
 800e68e:	e770      	b.n	800e572 <__ieee754_pow+0x3a>
 800e690:	4b3a      	ldr	r3, [pc, #232]	; (800e77c <__ieee754_pow+0x244>)
 800e692:	429f      	cmp	r7, r3
 800e694:	d10a      	bne.n	800e6ac <__ieee754_pow+0x174>
 800e696:	2d00      	cmp	r5, #0
 800e698:	db08      	blt.n	800e6ac <__ieee754_pow+0x174>
 800e69a:	4640      	mov	r0, r8
 800e69c:	4649      	mov	r1, r9
 800e69e:	b013      	add	sp, #76	; 0x4c
 800e6a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a4:	f000 bd0a 	b.w	800f0bc <__ieee754_sqrt>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	4649      	mov	r1, r9
 800e6b0:	f000 fc58 	bl	800ef64 <fabs>
 800e6b4:	4683      	mov	fp, r0
 800e6b6:	468c      	mov	ip, r1
 800e6b8:	f1ba 0f00 	cmp.w	sl, #0
 800e6bc:	d128      	bne.n	800e710 <__ieee754_pow+0x1d8>
 800e6be:	b124      	cbz	r4, 800e6ca <__ieee754_pow+0x192>
 800e6c0:	4b2c      	ldr	r3, [pc, #176]	; (800e774 <__ieee754_pow+0x23c>)
 800e6c2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d122      	bne.n	800e710 <__ieee754_pow+0x1d8>
 800e6ca:	2f00      	cmp	r7, #0
 800e6cc:	da07      	bge.n	800e6de <__ieee754_pow+0x1a6>
 800e6ce:	465a      	mov	r2, fp
 800e6d0:	4663      	mov	r3, ip
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	4927      	ldr	r1, [pc, #156]	; (800e774 <__ieee754_pow+0x23c>)
 800e6d6:	f7f2 f829 	bl	800072c <__aeabi_ddiv>
 800e6da:	4683      	mov	fp, r0
 800e6dc:	468c      	mov	ip, r1
 800e6de:	2d00      	cmp	r5, #0
 800e6e0:	daba      	bge.n	800e658 <__ieee754_pow+0x120>
 800e6e2:	9b00      	ldr	r3, [sp, #0]
 800e6e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e6e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e6ec:	431c      	orrs	r4, r3
 800e6ee:	d108      	bne.n	800e702 <__ieee754_pow+0x1ca>
 800e6f0:	465a      	mov	r2, fp
 800e6f2:	4663      	mov	r3, ip
 800e6f4:	4658      	mov	r0, fp
 800e6f6:	4661      	mov	r1, ip
 800e6f8:	f7f1 fd36 	bl	8000168 <__aeabi_dsub>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	e790      	b.n	800e624 <__ieee754_pow+0xec>
 800e702:	9b00      	ldr	r3, [sp, #0]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d1a7      	bne.n	800e658 <__ieee754_pow+0x120>
 800e708:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e70c:	469c      	mov	ip, r3
 800e70e:	e7a3      	b.n	800e658 <__ieee754_pow+0x120>
 800e710:	0feb      	lsrs	r3, r5, #31
 800e712:	3b01      	subs	r3, #1
 800e714:	930c      	str	r3, [sp, #48]	; 0x30
 800e716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e718:	9b00      	ldr	r3, [sp, #0]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	d104      	bne.n	800e728 <__ieee754_pow+0x1f0>
 800e71e:	4642      	mov	r2, r8
 800e720:	464b      	mov	r3, r9
 800e722:	4640      	mov	r0, r8
 800e724:	4649      	mov	r1, r9
 800e726:	e7e7      	b.n	800e6f8 <__ieee754_pow+0x1c0>
 800e728:	4b15      	ldr	r3, [pc, #84]	; (800e780 <__ieee754_pow+0x248>)
 800e72a:	429e      	cmp	r6, r3
 800e72c:	f340 80f6 	ble.w	800e91c <__ieee754_pow+0x3e4>
 800e730:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e734:	429e      	cmp	r6, r3
 800e736:	4b10      	ldr	r3, [pc, #64]	; (800e778 <__ieee754_pow+0x240>)
 800e738:	dd09      	ble.n	800e74e <__ieee754_pow+0x216>
 800e73a:	429c      	cmp	r4, r3
 800e73c:	dc0c      	bgt.n	800e758 <__ieee754_pow+0x220>
 800e73e:	2f00      	cmp	r7, #0
 800e740:	da0c      	bge.n	800e75c <__ieee754_pow+0x224>
 800e742:	2000      	movs	r0, #0
 800e744:	b013      	add	sp, #76	; 0x4c
 800e746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74a:	f000 bcb2 	b.w	800f0b2 <__math_oflow>
 800e74e:	429c      	cmp	r4, r3
 800e750:	dbf5      	blt.n	800e73e <__ieee754_pow+0x206>
 800e752:	4b08      	ldr	r3, [pc, #32]	; (800e774 <__ieee754_pow+0x23c>)
 800e754:	429c      	cmp	r4, r3
 800e756:	dd15      	ble.n	800e784 <__ieee754_pow+0x24c>
 800e758:	2f00      	cmp	r7, #0
 800e75a:	dcf2      	bgt.n	800e742 <__ieee754_pow+0x20a>
 800e75c:	2000      	movs	r0, #0
 800e75e:	b013      	add	sp, #76	; 0x4c
 800e760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	f000 bca0 	b.w	800f0a8 <__math_uflow>
 800e768:	fff00000 	.word	0xfff00000
 800e76c:	7ff00000 	.word	0x7ff00000
 800e770:	433fffff 	.word	0x433fffff
 800e774:	3ff00000 	.word	0x3ff00000
 800e778:	3fefffff 	.word	0x3fefffff
 800e77c:	3fe00000 	.word	0x3fe00000
 800e780:	41e00000 	.word	0x41e00000
 800e784:	4661      	mov	r1, ip
 800e786:	2200      	movs	r2, #0
 800e788:	4658      	mov	r0, fp
 800e78a:	4b5f      	ldr	r3, [pc, #380]	; (800e908 <__ieee754_pow+0x3d0>)
 800e78c:	f7f1 fcec 	bl	8000168 <__aeabi_dsub>
 800e790:	a355      	add	r3, pc, #340	; (adr r3, 800e8e8 <__ieee754_pow+0x3b0>)
 800e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e796:	4604      	mov	r4, r0
 800e798:	460d      	mov	r5, r1
 800e79a:	f7f1 fe9d 	bl	80004d8 <__aeabi_dmul>
 800e79e:	a354      	add	r3, pc, #336	; (adr r3, 800e8f0 <__ieee754_pow+0x3b8>)
 800e7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	460f      	mov	r7, r1
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	f7f1 fe94 	bl	80004d8 <__aeabi_dmul>
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	4682      	mov	sl, r0
 800e7b4:	468b      	mov	fp, r1
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4b54      	ldr	r3, [pc, #336]	; (800e90c <__ieee754_pow+0x3d4>)
 800e7bc:	f7f1 fe8c 	bl	80004d8 <__aeabi_dmul>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	a14c      	add	r1, pc, #304	; (adr r1, 800e8f8 <__ieee754_pow+0x3c0>)
 800e7c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7ca:	f7f1 fccd 	bl	8000168 <__aeabi_dsub>
 800e7ce:	4622      	mov	r2, r4
 800e7d0:	462b      	mov	r3, r5
 800e7d2:	f7f1 fe81 	bl	80004d8 <__aeabi_dmul>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	2000      	movs	r0, #0
 800e7dc:	494c      	ldr	r1, [pc, #304]	; (800e910 <__ieee754_pow+0x3d8>)
 800e7de:	f7f1 fcc3 	bl	8000168 <__aeabi_dsub>
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	462b      	mov	r3, r5
 800e7e6:	4680      	mov	r8, r0
 800e7e8:	4689      	mov	r9, r1
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	f7f1 fe73 	bl	80004d8 <__aeabi_dmul>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	4640      	mov	r0, r8
 800e7f8:	4649      	mov	r1, r9
 800e7fa:	f7f1 fe6d 	bl	80004d8 <__aeabi_dmul>
 800e7fe:	a340      	add	r3, pc, #256	; (adr r3, 800e900 <__ieee754_pow+0x3c8>)
 800e800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e804:	f7f1 fe68 	bl	80004d8 <__aeabi_dmul>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4650      	mov	r0, sl
 800e80e:	4659      	mov	r1, fp
 800e810:	f7f1 fcaa 	bl	8000168 <__aeabi_dsub>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4604      	mov	r4, r0
 800e81a:	460d      	mov	r5, r1
 800e81c:	4630      	mov	r0, r6
 800e81e:	4639      	mov	r1, r7
 800e820:	f7f1 fca4 	bl	800016c <__adddf3>
 800e824:	2000      	movs	r0, #0
 800e826:	4632      	mov	r2, r6
 800e828:	463b      	mov	r3, r7
 800e82a:	4682      	mov	sl, r0
 800e82c:	468b      	mov	fp, r1
 800e82e:	f7f1 fc9b 	bl	8000168 <__aeabi_dsub>
 800e832:	4602      	mov	r2, r0
 800e834:	460b      	mov	r3, r1
 800e836:	4620      	mov	r0, r4
 800e838:	4629      	mov	r1, r5
 800e83a:	f7f1 fc95 	bl	8000168 <__aeabi_dsub>
 800e83e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e842:	9b00      	ldr	r3, [sp, #0]
 800e844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e846:	3b01      	subs	r3, #1
 800e848:	4313      	orrs	r3, r2
 800e84a:	f04f 0600 	mov.w	r6, #0
 800e84e:	f04f 0200 	mov.w	r2, #0
 800e852:	bf0c      	ite	eq
 800e854:	4b2f      	ldreq	r3, [pc, #188]	; (800e914 <__ieee754_pow+0x3dc>)
 800e856:	4b2c      	ldrne	r3, [pc, #176]	; (800e908 <__ieee754_pow+0x3d0>)
 800e858:	4604      	mov	r4, r0
 800e85a:	460d      	mov	r5, r1
 800e85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e860:	e9cd 2300 	strd	r2, r3, [sp]
 800e864:	4632      	mov	r2, r6
 800e866:	463b      	mov	r3, r7
 800e868:	f7f1 fc7e 	bl	8000168 <__aeabi_dsub>
 800e86c:	4652      	mov	r2, sl
 800e86e:	465b      	mov	r3, fp
 800e870:	f7f1 fe32 	bl	80004d8 <__aeabi_dmul>
 800e874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e878:	4680      	mov	r8, r0
 800e87a:	4689      	mov	r9, r1
 800e87c:	4620      	mov	r0, r4
 800e87e:	4629      	mov	r1, r5
 800e880:	f7f1 fe2a 	bl	80004d8 <__aeabi_dmul>
 800e884:	4602      	mov	r2, r0
 800e886:	460b      	mov	r3, r1
 800e888:	4640      	mov	r0, r8
 800e88a:	4649      	mov	r1, r9
 800e88c:	f7f1 fc6e 	bl	800016c <__adddf3>
 800e890:	4632      	mov	r2, r6
 800e892:	463b      	mov	r3, r7
 800e894:	4680      	mov	r8, r0
 800e896:	4689      	mov	r9, r1
 800e898:	4650      	mov	r0, sl
 800e89a:	4659      	mov	r1, fp
 800e89c:	f7f1 fe1c 	bl	80004d8 <__aeabi_dmul>
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	460d      	mov	r5, r1
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	4649      	mov	r1, r9
 800e8aa:	4640      	mov	r0, r8
 800e8ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e8b0:	f7f1 fc5c 	bl	800016c <__adddf3>
 800e8b4:	4b18      	ldr	r3, [pc, #96]	; (800e918 <__ieee754_pow+0x3e0>)
 800e8b6:	4682      	mov	sl, r0
 800e8b8:	4299      	cmp	r1, r3
 800e8ba:	460f      	mov	r7, r1
 800e8bc:	460e      	mov	r6, r1
 800e8be:	f340 82e7 	ble.w	800ee90 <__ieee754_pow+0x958>
 800e8c2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e8c6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e8ca:	4303      	orrs	r3, r0
 800e8cc:	f000 81e2 	beq.w	800ec94 <__ieee754_pow+0x75c>
 800e8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f7f2 f870 	bl	80009bc <__aeabi_dcmplt>
 800e8dc:	3800      	subs	r0, #0
 800e8de:	bf18      	it	ne
 800e8e0:	2001      	movne	r0, #1
 800e8e2:	e72f      	b.n	800e744 <__ieee754_pow+0x20c>
 800e8e4:	f3af 8000 	nop.w
 800e8e8:	60000000 	.word	0x60000000
 800e8ec:	3ff71547 	.word	0x3ff71547
 800e8f0:	f85ddf44 	.word	0xf85ddf44
 800e8f4:	3e54ae0b 	.word	0x3e54ae0b
 800e8f8:	55555555 	.word	0x55555555
 800e8fc:	3fd55555 	.word	0x3fd55555
 800e900:	652b82fe 	.word	0x652b82fe
 800e904:	3ff71547 	.word	0x3ff71547
 800e908:	3ff00000 	.word	0x3ff00000
 800e90c:	3fd00000 	.word	0x3fd00000
 800e910:	3fe00000 	.word	0x3fe00000
 800e914:	bff00000 	.word	0xbff00000
 800e918:	408fffff 	.word	0x408fffff
 800e91c:	4bd4      	ldr	r3, [pc, #848]	; (800ec70 <__ieee754_pow+0x738>)
 800e91e:	2200      	movs	r2, #0
 800e920:	402b      	ands	r3, r5
 800e922:	b943      	cbnz	r3, 800e936 <__ieee754_pow+0x3fe>
 800e924:	4658      	mov	r0, fp
 800e926:	4661      	mov	r1, ip
 800e928:	4bd2      	ldr	r3, [pc, #840]	; (800ec74 <__ieee754_pow+0x73c>)
 800e92a:	f7f1 fdd5 	bl	80004d8 <__aeabi_dmul>
 800e92e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e932:	4683      	mov	fp, r0
 800e934:	460c      	mov	r4, r1
 800e936:	1523      	asrs	r3, r4, #20
 800e938:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e93c:	4413      	add	r3, r2
 800e93e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e940:	4bcd      	ldr	r3, [pc, #820]	; (800ec78 <__ieee754_pow+0x740>)
 800e942:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e946:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e94a:	429c      	cmp	r4, r3
 800e94c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e950:	dd08      	ble.n	800e964 <__ieee754_pow+0x42c>
 800e952:	4bca      	ldr	r3, [pc, #808]	; (800ec7c <__ieee754_pow+0x744>)
 800e954:	429c      	cmp	r4, r3
 800e956:	f340 8164 	ble.w	800ec22 <__ieee754_pow+0x6ea>
 800e95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e95c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e960:	3301      	adds	r3, #1
 800e962:	930b      	str	r3, [sp, #44]	; 0x2c
 800e964:	2600      	movs	r6, #0
 800e966:	00f3      	lsls	r3, r6, #3
 800e968:	930d      	str	r3, [sp, #52]	; 0x34
 800e96a:	4bc5      	ldr	r3, [pc, #788]	; (800ec80 <__ieee754_pow+0x748>)
 800e96c:	4658      	mov	r0, fp
 800e96e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e972:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e976:	4629      	mov	r1, r5
 800e978:	461a      	mov	r2, r3
 800e97a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e97e:	4623      	mov	r3, r4
 800e980:	f7f1 fbf2 	bl	8000168 <__aeabi_dsub>
 800e984:	46da      	mov	sl, fp
 800e986:	462b      	mov	r3, r5
 800e988:	4652      	mov	r2, sl
 800e98a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e98e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e992:	f7f1 fbeb 	bl	800016c <__adddf3>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	2000      	movs	r0, #0
 800e99c:	49b9      	ldr	r1, [pc, #740]	; (800ec84 <__ieee754_pow+0x74c>)
 800e99e:	f7f1 fec5 	bl	800072c <__aeabi_ddiv>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e9aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e9ae:	f7f1 fd93 	bl	80004d8 <__aeabi_dmul>
 800e9b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9b6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e9ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	46ab      	mov	fp, r5
 800e9c4:	106d      	asrs	r5, r5, #1
 800e9c6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e9ca:	9304      	str	r3, [sp, #16]
 800e9cc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e9d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e9d4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e9d8:	4640      	mov	r0, r8
 800e9da:	4649      	mov	r1, r9
 800e9dc:	4614      	mov	r4, r2
 800e9de:	461d      	mov	r5, r3
 800e9e0:	f7f1 fd7a 	bl	80004d8 <__aeabi_dmul>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e9ec:	f7f1 fbbc 	bl	8000168 <__aeabi_dsub>
 800e9f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e9f4:	4606      	mov	r6, r0
 800e9f6:	460f      	mov	r7, r1
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	f7f1 fbb4 	bl	8000168 <__aeabi_dsub>
 800ea00:	4602      	mov	r2, r0
 800ea02:	460b      	mov	r3, r1
 800ea04:	4650      	mov	r0, sl
 800ea06:	4659      	mov	r1, fp
 800ea08:	f7f1 fbae 	bl	8000168 <__aeabi_dsub>
 800ea0c:	4642      	mov	r2, r8
 800ea0e:	464b      	mov	r3, r9
 800ea10:	f7f1 fd62 	bl	80004d8 <__aeabi_dmul>
 800ea14:	4602      	mov	r2, r0
 800ea16:	460b      	mov	r3, r1
 800ea18:	4630      	mov	r0, r6
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	f7f1 fba4 	bl	8000168 <__aeabi_dsub>
 800ea20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ea24:	f7f1 fd58 	bl	80004d8 <__aeabi_dmul>
 800ea28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea2c:	4682      	mov	sl, r0
 800ea2e:	468b      	mov	fp, r1
 800ea30:	4610      	mov	r0, r2
 800ea32:	4619      	mov	r1, r3
 800ea34:	f7f1 fd50 	bl	80004d8 <__aeabi_dmul>
 800ea38:	a37b      	add	r3, pc, #492	; (adr r3, 800ec28 <__ieee754_pow+0x6f0>)
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	4604      	mov	r4, r0
 800ea40:	460d      	mov	r5, r1
 800ea42:	f7f1 fd49 	bl	80004d8 <__aeabi_dmul>
 800ea46:	a37a      	add	r3, pc, #488	; (adr r3, 800ec30 <__ieee754_pow+0x6f8>)
 800ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4c:	f7f1 fb8e 	bl	800016c <__adddf3>
 800ea50:	4622      	mov	r2, r4
 800ea52:	462b      	mov	r3, r5
 800ea54:	f7f1 fd40 	bl	80004d8 <__aeabi_dmul>
 800ea58:	a377      	add	r3, pc, #476	; (adr r3, 800ec38 <__ieee754_pow+0x700>)
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	f7f1 fb85 	bl	800016c <__adddf3>
 800ea62:	4622      	mov	r2, r4
 800ea64:	462b      	mov	r3, r5
 800ea66:	f7f1 fd37 	bl	80004d8 <__aeabi_dmul>
 800ea6a:	a375      	add	r3, pc, #468	; (adr r3, 800ec40 <__ieee754_pow+0x708>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	f7f1 fb7c 	bl	800016c <__adddf3>
 800ea74:	4622      	mov	r2, r4
 800ea76:	462b      	mov	r3, r5
 800ea78:	f7f1 fd2e 	bl	80004d8 <__aeabi_dmul>
 800ea7c:	a372      	add	r3, pc, #456	; (adr r3, 800ec48 <__ieee754_pow+0x710>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	f7f1 fb73 	bl	800016c <__adddf3>
 800ea86:	4622      	mov	r2, r4
 800ea88:	462b      	mov	r3, r5
 800ea8a:	f7f1 fd25 	bl	80004d8 <__aeabi_dmul>
 800ea8e:	a370      	add	r3, pc, #448	; (adr r3, 800ec50 <__ieee754_pow+0x718>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	f7f1 fb6a 	bl	800016c <__adddf3>
 800ea98:	4622      	mov	r2, r4
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	460f      	mov	r7, r1
 800ea9e:	462b      	mov	r3, r5
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	4629      	mov	r1, r5
 800eaa4:	f7f1 fd18 	bl	80004d8 <__aeabi_dmul>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	4630      	mov	r0, r6
 800eaae:	4639      	mov	r1, r7
 800eab0:	f7f1 fd12 	bl	80004d8 <__aeabi_dmul>
 800eab4:	4604      	mov	r4, r0
 800eab6:	460d      	mov	r5, r1
 800eab8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eabc:	4642      	mov	r2, r8
 800eabe:	464b      	mov	r3, r9
 800eac0:	f7f1 fb54 	bl	800016c <__adddf3>
 800eac4:	4652      	mov	r2, sl
 800eac6:	465b      	mov	r3, fp
 800eac8:	f7f1 fd06 	bl	80004d8 <__aeabi_dmul>
 800eacc:	4622      	mov	r2, r4
 800eace:	462b      	mov	r3, r5
 800ead0:	f7f1 fb4c 	bl	800016c <__adddf3>
 800ead4:	4642      	mov	r2, r8
 800ead6:	4606      	mov	r6, r0
 800ead8:	460f      	mov	r7, r1
 800eada:	464b      	mov	r3, r9
 800eadc:	4640      	mov	r0, r8
 800eade:	4649      	mov	r1, r9
 800eae0:	f7f1 fcfa 	bl	80004d8 <__aeabi_dmul>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eaec:	2200      	movs	r2, #0
 800eaee:	4b66      	ldr	r3, [pc, #408]	; (800ec88 <__ieee754_pow+0x750>)
 800eaf0:	f7f1 fb3c 	bl	800016c <__adddf3>
 800eaf4:	4632      	mov	r2, r6
 800eaf6:	463b      	mov	r3, r7
 800eaf8:	f7f1 fb38 	bl	800016c <__adddf3>
 800eafc:	2400      	movs	r4, #0
 800eafe:	460d      	mov	r5, r1
 800eb00:	4622      	mov	r2, r4
 800eb02:	460b      	mov	r3, r1
 800eb04:	4640      	mov	r0, r8
 800eb06:	4649      	mov	r1, r9
 800eb08:	f7f1 fce6 	bl	80004d8 <__aeabi_dmul>
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	4680      	mov	r8, r0
 800eb10:	4689      	mov	r9, r1
 800eb12:	4620      	mov	r0, r4
 800eb14:	4629      	mov	r1, r5
 800eb16:	4b5c      	ldr	r3, [pc, #368]	; (800ec88 <__ieee754_pow+0x750>)
 800eb18:	f7f1 fb26 	bl	8000168 <__aeabi_dsub>
 800eb1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eb20:	f7f1 fb22 	bl	8000168 <__aeabi_dsub>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	4630      	mov	r0, r6
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	f7f1 fb1c 	bl	8000168 <__aeabi_dsub>
 800eb30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb34:	f7f1 fcd0 	bl	80004d8 <__aeabi_dmul>
 800eb38:	4622      	mov	r2, r4
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	460f      	mov	r7, r1
 800eb3e:	462b      	mov	r3, r5
 800eb40:	4650      	mov	r0, sl
 800eb42:	4659      	mov	r1, fp
 800eb44:	f7f1 fcc8 	bl	80004d8 <__aeabi_dmul>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	4639      	mov	r1, r7
 800eb50:	f7f1 fb0c 	bl	800016c <__adddf3>
 800eb54:	2400      	movs	r4, #0
 800eb56:	4606      	mov	r6, r0
 800eb58:	460f      	mov	r7, r1
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4640      	mov	r0, r8
 800eb60:	4649      	mov	r1, r9
 800eb62:	f7f1 fb03 	bl	800016c <__adddf3>
 800eb66:	a33c      	add	r3, pc, #240	; (adr r3, 800ec58 <__ieee754_pow+0x720>)
 800eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	460d      	mov	r5, r1
 800eb70:	f7f1 fcb2 	bl	80004d8 <__aeabi_dmul>
 800eb74:	4642      	mov	r2, r8
 800eb76:	464b      	mov	r3, r9
 800eb78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	4629      	mov	r1, r5
 800eb80:	f7f1 faf2 	bl	8000168 <__aeabi_dsub>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4630      	mov	r0, r6
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	f7f1 faec 	bl	8000168 <__aeabi_dsub>
 800eb90:	a333      	add	r3, pc, #204	; (adr r3, 800ec60 <__ieee754_pow+0x728>)
 800eb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb96:	f7f1 fc9f 	bl	80004d8 <__aeabi_dmul>
 800eb9a:	a333      	add	r3, pc, #204	; (adr r3, 800ec68 <__ieee754_pow+0x730>)
 800eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba0:	4606      	mov	r6, r0
 800eba2:	460f      	mov	r7, r1
 800eba4:	4620      	mov	r0, r4
 800eba6:	4629      	mov	r1, r5
 800eba8:	f7f1 fc96 	bl	80004d8 <__aeabi_dmul>
 800ebac:	4602      	mov	r2, r0
 800ebae:	460b      	mov	r3, r1
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	4639      	mov	r1, r7
 800ebb4:	f7f1 fada 	bl	800016c <__adddf3>
 800ebb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebba:	4b34      	ldr	r3, [pc, #208]	; (800ec8c <__ieee754_pow+0x754>)
 800ebbc:	4413      	add	r3, r2
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fad3 	bl	800016c <__adddf3>
 800ebc6:	4680      	mov	r8, r0
 800ebc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ebca:	4689      	mov	r9, r1
 800ebcc:	f7f1 fc1a 	bl	8000404 <__aeabi_i2d>
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	460d      	mov	r5, r1
 800ebd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebda:	4b2d      	ldr	r3, [pc, #180]	; (800ec90 <__ieee754_pow+0x758>)
 800ebdc:	4413      	add	r3, r2
 800ebde:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ebe2:	4642      	mov	r2, r8
 800ebe4:	464b      	mov	r3, r9
 800ebe6:	f7f1 fac1 	bl	800016c <__adddf3>
 800ebea:	4632      	mov	r2, r6
 800ebec:	463b      	mov	r3, r7
 800ebee:	f7f1 fabd 	bl	800016c <__adddf3>
 800ebf2:	4622      	mov	r2, r4
 800ebf4:	462b      	mov	r3, r5
 800ebf6:	f7f1 fab9 	bl	800016c <__adddf3>
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	4622      	mov	r2, r4
 800ebfe:	462b      	mov	r3, r5
 800ec00:	4682      	mov	sl, r0
 800ec02:	468b      	mov	fp, r1
 800ec04:	f7f1 fab0 	bl	8000168 <__aeabi_dsub>
 800ec08:	4632      	mov	r2, r6
 800ec0a:	463b      	mov	r3, r7
 800ec0c:	f7f1 faac 	bl	8000168 <__aeabi_dsub>
 800ec10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec14:	f7f1 faa8 	bl	8000168 <__aeabi_dsub>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	4640      	mov	r0, r8
 800ec1e:	4649      	mov	r1, r9
 800ec20:	e60b      	b.n	800e83a <__ieee754_pow+0x302>
 800ec22:	2601      	movs	r6, #1
 800ec24:	e69f      	b.n	800e966 <__ieee754_pow+0x42e>
 800ec26:	bf00      	nop
 800ec28:	4a454eef 	.word	0x4a454eef
 800ec2c:	3fca7e28 	.word	0x3fca7e28
 800ec30:	93c9db65 	.word	0x93c9db65
 800ec34:	3fcd864a 	.word	0x3fcd864a
 800ec38:	a91d4101 	.word	0xa91d4101
 800ec3c:	3fd17460 	.word	0x3fd17460
 800ec40:	518f264d 	.word	0x518f264d
 800ec44:	3fd55555 	.word	0x3fd55555
 800ec48:	db6fabff 	.word	0xdb6fabff
 800ec4c:	3fdb6db6 	.word	0x3fdb6db6
 800ec50:	33333303 	.word	0x33333303
 800ec54:	3fe33333 	.word	0x3fe33333
 800ec58:	e0000000 	.word	0xe0000000
 800ec5c:	3feec709 	.word	0x3feec709
 800ec60:	dc3a03fd 	.word	0xdc3a03fd
 800ec64:	3feec709 	.word	0x3feec709
 800ec68:	145b01f5 	.word	0x145b01f5
 800ec6c:	be3e2fe0 	.word	0xbe3e2fe0
 800ec70:	7ff00000 	.word	0x7ff00000
 800ec74:	43400000 	.word	0x43400000
 800ec78:	0003988e 	.word	0x0003988e
 800ec7c:	000bb679 	.word	0x000bb679
 800ec80:	0800f8c0 	.word	0x0800f8c0
 800ec84:	3ff00000 	.word	0x3ff00000
 800ec88:	40080000 	.word	0x40080000
 800ec8c:	0800f8e0 	.word	0x0800f8e0
 800ec90:	0800f8d0 	.word	0x0800f8d0
 800ec94:	a39c      	add	r3, pc, #624	; (adr r3, 800ef08 <__ieee754_pow+0x9d0>)
 800ec96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	4649      	mov	r1, r9
 800ec9e:	f7f1 fa65 	bl	800016c <__adddf3>
 800eca2:	4622      	mov	r2, r4
 800eca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eca8:	462b      	mov	r3, r5
 800ecaa:	4650      	mov	r0, sl
 800ecac:	4639      	mov	r1, r7
 800ecae:	f7f1 fa5b 	bl	8000168 <__aeabi_dsub>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecba:	f7f1 fe9d 	bl	80009f8 <__aeabi_dcmpgt>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	f47f ae06 	bne.w	800e8d0 <__ieee754_pow+0x398>
 800ecc4:	4aa2      	ldr	r2, [pc, #648]	; (800ef50 <__ieee754_pow+0xa18>)
 800ecc6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ecca:	4293      	cmp	r3, r2
 800eccc:	f340 8100 	ble.w	800eed0 <__ieee754_pow+0x998>
 800ecd0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ecd4:	151b      	asrs	r3, r3, #20
 800ecd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ecda:	fa4a fa03 	asr.w	sl, sl, r3
 800ecde:	44b2      	add	sl, r6
 800ece0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ece4:	489b      	ldr	r0, [pc, #620]	; (800ef54 <__ieee754_pow+0xa1c>)
 800ece6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ecea:	4108      	asrs	r0, r1
 800ecec:	ea00 030a 	and.w	r3, r0, sl
 800ecf0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ecf4:	f1c1 0114 	rsb	r1, r1, #20
 800ecf8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ecfc:	fa4a fa01 	asr.w	sl, sl, r1
 800ed00:	2e00      	cmp	r6, #0
 800ed02:	f04f 0200 	mov.w	r2, #0
 800ed06:	4620      	mov	r0, r4
 800ed08:	4629      	mov	r1, r5
 800ed0a:	bfb8      	it	lt
 800ed0c:	f1ca 0a00 	rsblt	sl, sl, #0
 800ed10:	f7f1 fa2a 	bl	8000168 <__aeabi_dsub>
 800ed14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed1c:	2400      	movs	r4, #0
 800ed1e:	4642      	mov	r2, r8
 800ed20:	464b      	mov	r3, r9
 800ed22:	f7f1 fa23 	bl	800016c <__adddf3>
 800ed26:	a37a      	add	r3, pc, #488	; (adr r3, 800ef10 <__ieee754_pow+0x9d8>)
 800ed28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	460d      	mov	r5, r1
 800ed30:	f7f1 fbd2 	bl	80004d8 <__aeabi_dmul>
 800ed34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed38:	4606      	mov	r6, r0
 800ed3a:	460f      	mov	r7, r1
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	4629      	mov	r1, r5
 800ed40:	f7f1 fa12 	bl	8000168 <__aeabi_dsub>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	4640      	mov	r0, r8
 800ed4a:	4649      	mov	r1, r9
 800ed4c:	f7f1 fa0c 	bl	8000168 <__aeabi_dsub>
 800ed50:	a371      	add	r3, pc, #452	; (adr r3, 800ef18 <__ieee754_pow+0x9e0>)
 800ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed56:	f7f1 fbbf 	bl	80004d8 <__aeabi_dmul>
 800ed5a:	a371      	add	r3, pc, #452	; (adr r3, 800ef20 <__ieee754_pow+0x9e8>)
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	4680      	mov	r8, r0
 800ed62:	4689      	mov	r9, r1
 800ed64:	4620      	mov	r0, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	f7f1 fbb6 	bl	80004d8 <__aeabi_dmul>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	460b      	mov	r3, r1
 800ed70:	4640      	mov	r0, r8
 800ed72:	4649      	mov	r1, r9
 800ed74:	f7f1 f9fa 	bl	800016c <__adddf3>
 800ed78:	4604      	mov	r4, r0
 800ed7a:	460d      	mov	r5, r1
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 f9f2 	bl	800016c <__adddf3>
 800ed88:	4632      	mov	r2, r6
 800ed8a:	463b      	mov	r3, r7
 800ed8c:	4680      	mov	r8, r0
 800ed8e:	4689      	mov	r9, r1
 800ed90:	f7f1 f9ea 	bl	8000168 <__aeabi_dsub>
 800ed94:	4602      	mov	r2, r0
 800ed96:	460b      	mov	r3, r1
 800ed98:	4620      	mov	r0, r4
 800ed9a:	4629      	mov	r1, r5
 800ed9c:	f7f1 f9e4 	bl	8000168 <__aeabi_dsub>
 800eda0:	4642      	mov	r2, r8
 800eda2:	4606      	mov	r6, r0
 800eda4:	460f      	mov	r7, r1
 800eda6:	464b      	mov	r3, r9
 800eda8:	4640      	mov	r0, r8
 800edaa:	4649      	mov	r1, r9
 800edac:	f7f1 fb94 	bl	80004d8 <__aeabi_dmul>
 800edb0:	a35d      	add	r3, pc, #372	; (adr r3, 800ef28 <__ieee754_pow+0x9f0>)
 800edb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb6:	4604      	mov	r4, r0
 800edb8:	460d      	mov	r5, r1
 800edba:	f7f1 fb8d 	bl	80004d8 <__aeabi_dmul>
 800edbe:	a35c      	add	r3, pc, #368	; (adr r3, 800ef30 <__ieee754_pow+0x9f8>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	f7f1 f9d0 	bl	8000168 <__aeabi_dsub>
 800edc8:	4622      	mov	r2, r4
 800edca:	462b      	mov	r3, r5
 800edcc:	f7f1 fb84 	bl	80004d8 <__aeabi_dmul>
 800edd0:	a359      	add	r3, pc, #356	; (adr r3, 800ef38 <__ieee754_pow+0xa00>)
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f7f1 f9c9 	bl	800016c <__adddf3>
 800edda:	4622      	mov	r2, r4
 800eddc:	462b      	mov	r3, r5
 800edde:	f7f1 fb7b 	bl	80004d8 <__aeabi_dmul>
 800ede2:	a357      	add	r3, pc, #348	; (adr r3, 800ef40 <__ieee754_pow+0xa08>)
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	f7f1 f9be 	bl	8000168 <__aeabi_dsub>
 800edec:	4622      	mov	r2, r4
 800edee:	462b      	mov	r3, r5
 800edf0:	f7f1 fb72 	bl	80004d8 <__aeabi_dmul>
 800edf4:	a354      	add	r3, pc, #336	; (adr r3, 800ef48 <__ieee754_pow+0xa10>)
 800edf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfa:	f7f1 f9b7 	bl	800016c <__adddf3>
 800edfe:	4622      	mov	r2, r4
 800ee00:	462b      	mov	r3, r5
 800ee02:	f7f1 fb69 	bl	80004d8 <__aeabi_dmul>
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	f7f1 f9ab 	bl	8000168 <__aeabi_dsub>
 800ee12:	4604      	mov	r4, r0
 800ee14:	460d      	mov	r5, r1
 800ee16:	4602      	mov	r2, r0
 800ee18:	460b      	mov	r3, r1
 800ee1a:	4640      	mov	r0, r8
 800ee1c:	4649      	mov	r1, r9
 800ee1e:	f7f1 fb5b 	bl	80004d8 <__aeabi_dmul>
 800ee22:	2200      	movs	r2, #0
 800ee24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	4629      	mov	r1, r5
 800ee30:	f7f1 f99a 	bl	8000168 <__aeabi_dsub>
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee3c:	f7f1 fc76 	bl	800072c <__aeabi_ddiv>
 800ee40:	4632      	mov	r2, r6
 800ee42:	4604      	mov	r4, r0
 800ee44:	460d      	mov	r5, r1
 800ee46:	463b      	mov	r3, r7
 800ee48:	4640      	mov	r0, r8
 800ee4a:	4649      	mov	r1, r9
 800ee4c:	f7f1 fb44 	bl	80004d8 <__aeabi_dmul>
 800ee50:	4632      	mov	r2, r6
 800ee52:	463b      	mov	r3, r7
 800ee54:	f7f1 f98a 	bl	800016c <__adddf3>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	4629      	mov	r1, r5
 800ee60:	f7f1 f982 	bl	8000168 <__aeabi_dsub>
 800ee64:	4642      	mov	r2, r8
 800ee66:	464b      	mov	r3, r9
 800ee68:	f7f1 f97e 	bl	8000168 <__aeabi_dsub>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	2000      	movs	r0, #0
 800ee72:	4939      	ldr	r1, [pc, #228]	; (800ef58 <__ieee754_pow+0xa20>)
 800ee74:	f7f1 f978 	bl	8000168 <__aeabi_dsub>
 800ee78:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ee7c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ee80:	da29      	bge.n	800eed6 <__ieee754_pow+0x99e>
 800ee82:	4652      	mov	r2, sl
 800ee84:	f000 f874 	bl	800ef70 <scalbn>
 800ee88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee8c:	f7ff bbfd 	b.w	800e68a <__ieee754_pow+0x152>
 800ee90:	4b32      	ldr	r3, [pc, #200]	; (800ef5c <__ieee754_pow+0xa24>)
 800ee92:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ee96:	429f      	cmp	r7, r3
 800ee98:	f77f af14 	ble.w	800ecc4 <__ieee754_pow+0x78c>
 800ee9c:	4b30      	ldr	r3, [pc, #192]	; (800ef60 <__ieee754_pow+0xa28>)
 800ee9e:	440b      	add	r3, r1
 800eea0:	4303      	orrs	r3, r0
 800eea2:	d009      	beq.n	800eeb8 <__ieee754_pow+0x980>
 800eea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2300      	movs	r3, #0
 800eeac:	f7f1 fd86 	bl	80009bc <__aeabi_dcmplt>
 800eeb0:	3800      	subs	r0, #0
 800eeb2:	bf18      	it	ne
 800eeb4:	2001      	movne	r0, #1
 800eeb6:	e452      	b.n	800e75e <__ieee754_pow+0x226>
 800eeb8:	4622      	mov	r2, r4
 800eeba:	462b      	mov	r3, r5
 800eebc:	f7f1 f954 	bl	8000168 <__aeabi_dsub>
 800eec0:	4642      	mov	r2, r8
 800eec2:	464b      	mov	r3, r9
 800eec4:	f7f1 fd8e 	bl	80009e4 <__aeabi_dcmpge>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	f43f aefb 	beq.w	800ecc4 <__ieee754_pow+0x78c>
 800eece:	e7e9      	b.n	800eea4 <__ieee754_pow+0x96c>
 800eed0:	f04f 0a00 	mov.w	sl, #0
 800eed4:	e720      	b.n	800ed18 <__ieee754_pow+0x7e0>
 800eed6:	4621      	mov	r1, r4
 800eed8:	e7d6      	b.n	800ee88 <__ieee754_pow+0x950>
 800eeda:	f04f 0b00 	mov.w	fp, #0
 800eede:	f8df c078 	ldr.w	ip, [pc, #120]	; 800ef58 <__ieee754_pow+0xa20>
 800eee2:	f7ff bbb9 	b.w	800e658 <__ieee754_pow+0x120>
 800eee6:	f04f 0b00 	mov.w	fp, #0
 800eeea:	f04f 0c00 	mov.w	ip, #0
 800eeee:	f7ff bbb3 	b.w	800e658 <__ieee754_pow+0x120>
 800eef2:	4640      	mov	r0, r8
 800eef4:	4649      	mov	r1, r9
 800eef6:	f7ff bb3c 	b.w	800e572 <__ieee754_pow+0x3a>
 800eefa:	9200      	str	r2, [sp, #0]
 800eefc:	f7ff bb88 	b.w	800e610 <__ieee754_pow+0xd8>
 800ef00:	2300      	movs	r3, #0
 800ef02:	f7ff bb72 	b.w	800e5ea <__ieee754_pow+0xb2>
 800ef06:	bf00      	nop
 800ef08:	652b82fe 	.word	0x652b82fe
 800ef0c:	3c971547 	.word	0x3c971547
 800ef10:	00000000 	.word	0x00000000
 800ef14:	3fe62e43 	.word	0x3fe62e43
 800ef18:	fefa39ef 	.word	0xfefa39ef
 800ef1c:	3fe62e42 	.word	0x3fe62e42
 800ef20:	0ca86c39 	.word	0x0ca86c39
 800ef24:	be205c61 	.word	0xbe205c61
 800ef28:	72bea4d0 	.word	0x72bea4d0
 800ef2c:	3e663769 	.word	0x3e663769
 800ef30:	c5d26bf1 	.word	0xc5d26bf1
 800ef34:	3ebbbd41 	.word	0x3ebbbd41
 800ef38:	af25de2c 	.word	0xaf25de2c
 800ef3c:	3f11566a 	.word	0x3f11566a
 800ef40:	16bebd93 	.word	0x16bebd93
 800ef44:	3f66c16c 	.word	0x3f66c16c
 800ef48:	5555553e 	.word	0x5555553e
 800ef4c:	3fc55555 	.word	0x3fc55555
 800ef50:	3fe00000 	.word	0x3fe00000
 800ef54:	fff00000 	.word	0xfff00000
 800ef58:	3ff00000 	.word	0x3ff00000
 800ef5c:	4090cbff 	.word	0x4090cbff
 800ef60:	3f6f3400 	.word	0x3f6f3400

0800ef64 <fabs>:
 800ef64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ef68:	4619      	mov	r1, r3
 800ef6a:	4770      	bx	lr
 800ef6c:	0000      	movs	r0, r0
	...

0800ef70 <scalbn>:
 800ef70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef72:	4616      	mov	r6, r2
 800ef74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ef78:	4604      	mov	r4, r0
 800ef7a:	460d      	mov	r5, r1
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	b992      	cbnz	r2, 800efa6 <scalbn+0x36>
 800ef80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ef84:	4303      	orrs	r3, r0
 800ef86:	d03c      	beq.n	800f002 <scalbn+0x92>
 800ef88:	4b31      	ldr	r3, [pc, #196]	; (800f050 <scalbn+0xe0>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f7f1 faa4 	bl	80004d8 <__aeabi_dmul>
 800ef90:	4b30      	ldr	r3, [pc, #192]	; (800f054 <scalbn+0xe4>)
 800ef92:	4604      	mov	r4, r0
 800ef94:	429e      	cmp	r6, r3
 800ef96:	460d      	mov	r5, r1
 800ef98:	da0f      	bge.n	800efba <scalbn+0x4a>
 800ef9a:	a329      	add	r3, pc, #164	; (adr r3, 800f040 <scalbn+0xd0>)
 800ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa0:	f7f1 fa9a 	bl	80004d8 <__aeabi_dmul>
 800efa4:	e006      	b.n	800efb4 <scalbn+0x44>
 800efa6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800efaa:	42ba      	cmp	r2, r7
 800efac:	d109      	bne.n	800efc2 <scalbn+0x52>
 800efae:	4602      	mov	r2, r0
 800efb0:	f7f1 f8dc 	bl	800016c <__adddf3>
 800efb4:	4604      	mov	r4, r0
 800efb6:	460d      	mov	r5, r1
 800efb8:	e023      	b.n	800f002 <scalbn+0x92>
 800efba:	460b      	mov	r3, r1
 800efbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800efc0:	3a36      	subs	r2, #54	; 0x36
 800efc2:	f24c 3150 	movw	r1, #50000	; 0xc350
 800efc6:	428e      	cmp	r6, r1
 800efc8:	dd0e      	ble.n	800efe8 <scalbn+0x78>
 800efca:	a31f      	add	r3, pc, #124	; (adr r3, 800f048 <scalbn+0xd8>)
 800efcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800efd4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800efd8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800efdc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800efe0:	481d      	ldr	r0, [pc, #116]	; (800f058 <scalbn+0xe8>)
 800efe2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800efe6:	e7db      	b.n	800efa0 <scalbn+0x30>
 800efe8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800efec:	4432      	add	r2, r6
 800efee:	428a      	cmp	r2, r1
 800eff0:	dceb      	bgt.n	800efca <scalbn+0x5a>
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	dd08      	ble.n	800f008 <scalbn+0x98>
 800eff6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800effa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800effe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f002:	4620      	mov	r0, r4
 800f004:	4629      	mov	r1, r5
 800f006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f008:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f00c:	da0c      	bge.n	800f028 <scalbn+0xb8>
 800f00e:	a30c      	add	r3, pc, #48	; (adr r3, 800f040 <scalbn+0xd0>)
 800f010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f014:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f018:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800f01c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800f020:	480e      	ldr	r0, [pc, #56]	; (800f05c <scalbn+0xec>)
 800f022:	f041 011f 	orr.w	r1, r1, #31
 800f026:	e7bb      	b.n	800efa0 <scalbn+0x30>
 800f028:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f02c:	3236      	adds	r2, #54	; 0x36
 800f02e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f036:	4620      	mov	r0, r4
 800f038:	4629      	mov	r1, r5
 800f03a:	2200      	movs	r2, #0
 800f03c:	4b08      	ldr	r3, [pc, #32]	; (800f060 <scalbn+0xf0>)
 800f03e:	e7af      	b.n	800efa0 <scalbn+0x30>
 800f040:	c2f8f359 	.word	0xc2f8f359
 800f044:	01a56e1f 	.word	0x01a56e1f
 800f048:	8800759c 	.word	0x8800759c
 800f04c:	7e37e43c 	.word	0x7e37e43c
 800f050:	43500000 	.word	0x43500000
 800f054:	ffff3cb0 	.word	0xffff3cb0
 800f058:	8800759c 	.word	0x8800759c
 800f05c:	c2f8f359 	.word	0xc2f8f359
 800f060:	3c900000 	.word	0x3c900000

0800f064 <with_errno>:
 800f064:	b570      	push	{r4, r5, r6, lr}
 800f066:	4604      	mov	r4, r0
 800f068:	460d      	mov	r5, r1
 800f06a:	4616      	mov	r6, r2
 800f06c:	f7fb fea4 	bl	800adb8 <__errno>
 800f070:	4629      	mov	r1, r5
 800f072:	6006      	str	r6, [r0, #0]
 800f074:	4620      	mov	r0, r4
 800f076:	bd70      	pop	{r4, r5, r6, pc}

0800f078 <xflow>:
 800f078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f07a:	4615      	mov	r5, r2
 800f07c:	461c      	mov	r4, r3
 800f07e:	b180      	cbz	r0, 800f0a2 <xflow+0x2a>
 800f080:	4610      	mov	r0, r2
 800f082:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f086:	e9cd 0100 	strd	r0, r1, [sp]
 800f08a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f08e:	4628      	mov	r0, r5
 800f090:	4621      	mov	r1, r4
 800f092:	f7f1 fa21 	bl	80004d8 <__aeabi_dmul>
 800f096:	2222      	movs	r2, #34	; 0x22
 800f098:	b003      	add	sp, #12
 800f09a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f09e:	f7ff bfe1 	b.w	800f064 <with_errno>
 800f0a2:	4610      	mov	r0, r2
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	e7ee      	b.n	800f086 <xflow+0xe>

0800f0a8 <__math_uflow>:
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0ae:	f7ff bfe3 	b.w	800f078 <xflow>

0800f0b2 <__math_oflow>:
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f0b8:	f7ff bfde 	b.w	800f078 <xflow>

0800f0bc <__ieee754_sqrt>:
 800f0bc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800f260 <__ieee754_sqrt+0x1a4>
 800f0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c4:	ea3c 0c01 	bics.w	ip, ip, r1
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	460d      	mov	r5, r1
 800f0ce:	460a      	mov	r2, r1
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	d10e      	bne.n	800f0f2 <__ieee754_sqrt+0x36>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	f7f1 f9ff 	bl	80004d8 <__aeabi_dmul>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4630      	mov	r0, r6
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	f7f1 f843 	bl	800016c <__adddf3>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	460d      	mov	r5, r1
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f2:	2900      	cmp	r1, #0
 800f0f4:	dc0d      	bgt.n	800f112 <__ieee754_sqrt+0x56>
 800f0f6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800f0fa:	ea5c 0c00 	orrs.w	ip, ip, r0
 800f0fe:	d0f4      	beq.n	800f0ea <__ieee754_sqrt+0x2e>
 800f100:	b139      	cbz	r1, 800f112 <__ieee754_sqrt+0x56>
 800f102:	4602      	mov	r2, r0
 800f104:	f7f1 f830 	bl	8000168 <__aeabi_dsub>
 800f108:	4602      	mov	r2, r0
 800f10a:	460b      	mov	r3, r1
 800f10c:	f7f1 fb0e 	bl	800072c <__aeabi_ddiv>
 800f110:	e7e9      	b.n	800f0e6 <__ieee754_sqrt+0x2a>
 800f112:	1512      	asrs	r2, r2, #20
 800f114:	f000 8089 	beq.w	800f22a <__ieee754_sqrt+0x16e>
 800f118:	2500      	movs	r5, #0
 800f11a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f11e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f126:	07d2      	lsls	r2, r2, #31
 800f128:	bf5c      	itt	pl
 800f12a:	005b      	lslpl	r3, r3, #1
 800f12c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800f130:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f134:	bf58      	it	pl
 800f136:	0064      	lslpl	r4, r4, #1
 800f138:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f13c:	0062      	lsls	r2, r4, #1
 800f13e:	2016      	movs	r0, #22
 800f140:	4629      	mov	r1, r5
 800f142:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800f146:	1076      	asrs	r6, r6, #1
 800f148:	190f      	adds	r7, r1, r4
 800f14a:	429f      	cmp	r7, r3
 800f14c:	bfde      	ittt	le
 800f14e:	1bdb      	suble	r3, r3, r7
 800f150:	1939      	addle	r1, r7, r4
 800f152:	192d      	addle	r5, r5, r4
 800f154:	005b      	lsls	r3, r3, #1
 800f156:	3801      	subs	r0, #1
 800f158:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f15c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f160:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f164:	d1f0      	bne.n	800f148 <__ieee754_sqrt+0x8c>
 800f166:	4604      	mov	r4, r0
 800f168:	2720      	movs	r7, #32
 800f16a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800f16e:	428b      	cmp	r3, r1
 800f170:	eb0c 0e00 	add.w	lr, ip, r0
 800f174:	dc02      	bgt.n	800f17c <__ieee754_sqrt+0xc0>
 800f176:	d113      	bne.n	800f1a0 <__ieee754_sqrt+0xe4>
 800f178:	4596      	cmp	lr, r2
 800f17a:	d811      	bhi.n	800f1a0 <__ieee754_sqrt+0xe4>
 800f17c:	f1be 0f00 	cmp.w	lr, #0
 800f180:	eb0e 000c 	add.w	r0, lr, ip
 800f184:	da56      	bge.n	800f234 <__ieee754_sqrt+0x178>
 800f186:	2800      	cmp	r0, #0
 800f188:	db54      	blt.n	800f234 <__ieee754_sqrt+0x178>
 800f18a:	f101 0801 	add.w	r8, r1, #1
 800f18e:	1a5b      	subs	r3, r3, r1
 800f190:	4641      	mov	r1, r8
 800f192:	4596      	cmp	lr, r2
 800f194:	bf88      	it	hi
 800f196:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f19a:	eba2 020e 	sub.w	r2, r2, lr
 800f19e:	4464      	add	r4, ip
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	3f01      	subs	r7, #1
 800f1a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f1a8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f1ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f1b0:	d1dd      	bne.n	800f16e <__ieee754_sqrt+0xb2>
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	d01b      	beq.n	800f1ee <__ieee754_sqrt+0x132>
 800f1b6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f264 <__ieee754_sqrt+0x1a8>
 800f1ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f268 <__ieee754_sqrt+0x1ac>
 800f1be:	e9da 0100 	ldrd	r0, r1, [sl]
 800f1c2:	e9db 2300 	ldrd	r2, r3, [fp]
 800f1c6:	f7f0 ffcf 	bl	8000168 <__aeabi_dsub>
 800f1ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	4640      	mov	r0, r8
 800f1d4:	4649      	mov	r1, r9
 800f1d6:	f7f1 fbfb 	bl	80009d0 <__aeabi_dcmple>
 800f1da:	b140      	cbz	r0, 800f1ee <__ieee754_sqrt+0x132>
 800f1dc:	e9da 0100 	ldrd	r0, r1, [sl]
 800f1e0:	e9db 2300 	ldrd	r2, r3, [fp]
 800f1e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f1e8:	d126      	bne.n	800f238 <__ieee754_sqrt+0x17c>
 800f1ea:	463c      	mov	r4, r7
 800f1ec:	3501      	adds	r5, #1
 800f1ee:	106b      	asrs	r3, r5, #1
 800f1f0:	0864      	lsrs	r4, r4, #1
 800f1f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f1f6:	07ea      	lsls	r2, r5, #31
 800f1f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f1fc:	bf48      	it	mi
 800f1fe:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800f202:	4620      	mov	r0, r4
 800f204:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f208:	e76d      	b.n	800f0e6 <__ieee754_sqrt+0x2a>
 800f20a:	0ae3      	lsrs	r3, r4, #11
 800f20c:	3915      	subs	r1, #21
 800f20e:	0564      	lsls	r4, r4, #21
 800f210:	2b00      	cmp	r3, #0
 800f212:	d0fa      	beq.n	800f20a <__ieee754_sqrt+0x14e>
 800f214:	02d8      	lsls	r0, r3, #11
 800f216:	d50a      	bpl.n	800f22e <__ieee754_sqrt+0x172>
 800f218:	f1c2 0020 	rsb	r0, r2, #32
 800f21c:	fa24 f000 	lsr.w	r0, r4, r0
 800f220:	1e55      	subs	r5, r2, #1
 800f222:	4094      	lsls	r4, r2
 800f224:	4303      	orrs	r3, r0
 800f226:	1b4a      	subs	r2, r1, r5
 800f228:	e776      	b.n	800f118 <__ieee754_sqrt+0x5c>
 800f22a:	4611      	mov	r1, r2
 800f22c:	e7f0      	b.n	800f210 <__ieee754_sqrt+0x154>
 800f22e:	005b      	lsls	r3, r3, #1
 800f230:	3201      	adds	r2, #1
 800f232:	e7ef      	b.n	800f214 <__ieee754_sqrt+0x158>
 800f234:	4688      	mov	r8, r1
 800f236:	e7aa      	b.n	800f18e <__ieee754_sqrt+0xd2>
 800f238:	f7f0 ff98 	bl	800016c <__adddf3>
 800f23c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f240:	4602      	mov	r2, r0
 800f242:	460b      	mov	r3, r1
 800f244:	4640      	mov	r0, r8
 800f246:	4649      	mov	r1, r9
 800f248:	f7f1 fbb8 	bl	80009bc <__aeabi_dcmplt>
 800f24c:	b120      	cbz	r0, 800f258 <__ieee754_sqrt+0x19c>
 800f24e:	1ca1      	adds	r1, r4, #2
 800f250:	bf08      	it	eq
 800f252:	3501      	addeq	r5, #1
 800f254:	3402      	adds	r4, #2
 800f256:	e7ca      	b.n	800f1ee <__ieee754_sqrt+0x132>
 800f258:	3401      	adds	r4, #1
 800f25a:	f024 0401 	bic.w	r4, r4, #1
 800f25e:	e7c6      	b.n	800f1ee <__ieee754_sqrt+0x132>
 800f260:	7ff00000 	.word	0x7ff00000
 800f264:	200001e0 	.word	0x200001e0
 800f268:	200001e8 	.word	0x200001e8

0800f26c <_init>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	bf00      	nop
 800f270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f272:	bc08      	pop	{r3}
 800f274:	469e      	mov	lr, r3
 800f276:	4770      	bx	lr

0800f278 <_fini>:
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	bf00      	nop
 800f27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27e:	bc08      	pop	{r3}
 800f280:	469e      	mov	lr, r3
 800f282:	4770      	bx	lr
